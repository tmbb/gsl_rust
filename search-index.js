var searchIndex = JSON.parse('{\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"darling":{"doc":"Darling","t":"DIIIIIIIIGAAKLLKKKKLLLLLKLKLAOOANQENDEIDNQNNENNQNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIINIGGGGDEIILLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLKLKLINDDDNNNEDEDDNNDLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFMLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Error","FromAttributes","FromDeriveInput","FromField","FromGenericParam","FromGenerics","FromMeta","FromTypeParam","FromVariant","Result","ast","error","from_attributes","from_bool","from_char","from_derive_input","from_field","from_generic_param","from_generics","from_list","from_meta","from_nested_meta","from_none","from_string","from_type_param","from_value","from_variant","from_word","usage","uses_lifetimes","uses_type_params","util","Const","ConstParam","Data","Enum","Fields","GenericParam","GenericParamExt","Generics","Lifetime","LifetimeDef","Struct","Struct","Style","Tuple","Type","TypeParam","Unit","as_const_param","as_const_param","as_lifetime_def","as_lifetime_def","as_ref","as_ref","as_shape","as_type_param","as_type_param","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","empty_from","empty_from","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_generic_param","from_generics","from_type_param","into","into","into","into","into","into_iter","is_empty","is_enum","is_newtype","is_struct","is_struct","is_struct","is_tuple","is_tuple","is_unit","is_unit","iter","len","map","map_enum_variants","map_struct","map_struct_fields","new","params","span","split","style","take_enum","take_struct","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","try_empty_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_params","uses_lifetimes","uses_lifetimes","uses_type_params","uses_type_params","where_clause","with_span","Accumulator","Error","IntoIter","Result","accumulator","at","at_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","checkpoint","clone","clone_into","custom","default","description","drop","duplicate_field","duplicate_field_path","explicit_span","extend","finish","finish_with","flatten","fmt","fmt","fmt","from","from","from","from","handle","handle_in","has_span","into","into","into","into_inner","into_iter","into_iter","len","missing_field","multiple","next","provide","push","span","to_owned","to_string","too_few_items","too_many_items","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unexpected_lit_type","unexpected_type","unknown_field","unknown_field_path","unknown_field_with_alts","unknown_value","unsupported_format","unsupported_shape","unsupported_shape_with_expected","with_span","write_errors","BoundImpl","CollectLifetimes","CollectTypeParams","Declare","GenericsExt","IdentRefSet","IdentSet","LifetimeRefSet","LifetimeSet","Options","Purpose","UsesLifetimes","UsesTypeParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","declared_lifetimes","declared_type_params","eq","fmt","fmt","from","from","from","include_type_path_qself","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uses_lifetimes","uses_lifetimes_cloned","uses_type_params","uses_type_params_cloned","AsShape","Explicit","Flag","IdentString","Ignored","Inherit","Named","Newtype","Override","PathList","Shape","ShapeSet","SpannedValue","Tuple","Unit","WithOriginal","as_ident","as_mut","as_ref","as_ref","as_ref","as_ref","as_shape","as_shape","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","default","default","default","deref","deref","deref_mut","description","eq","eq","eq","eq","eq","eq","eq","eq","explicit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_derive_input","from_derive_input","from_derive_input","from_field","from_field","from_field","from_generic_param","from_generic_param","from_generic_param","from_generics","from_generics","from_generics","from_iter","from_list","from_list","from_meta","from_meta","from_meta","from_meta","from_meta","from_none","from_type_param","from_type_param","from_type_param","from_value","from_variant","from_variant","from_variant","from_word","hash","hash","insert","insert_all","into","into","into","into","into","into","into","into","into","is_empty","is_explicit","is_present","is_some","map","map_ref","new","new","new","new","new","original","parse_attribute_to_meta_list","parsed","partial_cmp","path_to_string","present","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_strings","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or","unwrap_or_default","unwrap_or_else","uses_lifetimes","uses_type_params"],"q":[[0,"darling"],[32,"darling::ast"],[167,"darling::error"],[242,"darling::usage"],[290,"darling::util"]],"d":["An error encountered during attribute parsing.","Create an instance by parsing a list of attributes.","Creates an instance by parsing an entire proc-macro <code>derive</code> …","Creates an instance by parsing an individual field and its …","Creates an instance by parsing a specific <code>syn::GenericParam</code>…","Creates an instance by parsing an entire generics …","Create an instance from an item in an attribute …","Creates an instance by parsing an individual type_param …","Creates an instance from a specified <code>syn::Variant</code>.","An alias of <code>Result</code> specific to attribute parsing.","Utility types for working with the AST.","The <code>darling::Error</code> type, the multiple error <code>Accumulator</code>, …","Create an instance by parsing a list of attributes.","Create an instance from a bool literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from <code>syn::DeriveInput</code>, or return an …","","","","Create an instance from a list of nested meta items.","Create an instance from a <code>syn::Meta</code> by dispatching to the …","","When a field is omitted from a parent meta-item, <code>from_none</code> …","Create an instance from a string literal in a value …","","Create an instance from a literal value of either …","Create an instance from <code>syn::Variant</code>, or return an error.","Create an instance from the presence of the word in the …","Traits and types used for tracking the usage of generic …","Generator for <code>UsesLifetimes</code> impls that unions the used …","Generator for <code>UsesTypeParam</code> impls that unions the used …","Utility types for attribute parsing.","","","A struct or enum body.","","Equivalent to <code>syn::Fields</code>, but replaces the AST element …","A mirror of <code>syn::GenericParam</code> which is generic over all …","Extension trait for <code>GenericParam</code> to support getting values …","A mirror of the <code>syn::Generics</code> type which can contain …","","","","","","","","The type this GenericParam uses to represent type params …","","If this GenericParam is a const param, get the underlying …","","If this GenericParam is a lifetime, get the underlying …","","Creates a new <code>Data&lt;&amp;&#39;a V, &amp;&#39;a F&gt;</code> instance from <code>Data&lt;V, F&gt;</code>.","","","If this GenericParam is a type param, get the underlying …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty body of the same shape as the passed-in …","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the <code>Fields</code> contains no fields.","Returns <code>true</code> if this instance is <code>Data::Enum</code>.","Returns true if this variant’s data makes it a newtype.","Returns <code>true</code> if this instance is <code>Data::Struct</code>.","","","","","","","","Returns the number of fields in the structure.","","Applies a function <code>V -&gt; U</code> on enum variants, if this is an …","Applies a function to the <code>Fields</code> if this is a struct.","Applies a function <code>F -&gt; U</code> on struct fields, if this is a …","Creates a new <code>Fields</code> struct.","","","Splits the <code>Fields</code> into its style and fields for further …","","Consumes the <code>Data</code>, returning <code>Vec&lt;V&gt;</code> if it was an enum.","Consumes the <code>Data</code>, returning <code>Fields&lt;F&gt;</code> if it was a struct.","","","","","","","Creates an empty body of the same shape as the passed-in …","","Attempt to convert from a <code>syn::Data</code> instance.","","","","","","","","","","","","","","","","","","","","","","Adds a <code>Span</code> to <code>Fields</code>.","Accumulator for errors, for helping call <code>Error::multiple</code>.","An error encountered during attribute parsing.","An iterator that moves out of an <code>Error</code>.","An alias of <code>Result</code> specific to attribute parsing.","Creates an error collector, for aggregating multiple errors","Adds a location to the error, such as a field or variant. …","Adds a location to the error, such as a field or variant. …","","","","","","","","Finish the current accumulation, and if there are no …","","","Creates a new error with a custom message.","","","","Creates a new error for a field that appears twice in the …","Creates a new error for a field that appears twice in the …","Get the span for <code>self</code>, if one has been set.","","Stop accumulating errors, producing <code>Ok</code> if there are no …","Bundles the collected errors if there were any, or returns …","Recursively converts a tree of errors to a flattened list.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Handles a possible error.","Runs a closure, returning the successful value as <code>Some</code>, or …","Check if this error is associated with a span in the token …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the accumulated errors as a <code>Vec</code>.","","","Gets the number of individual errors in this error.","Creates a new error for a non-optional field that does not …","Bundle a set of multiple errors into a single <code>Error</code> …","","","Add one error to the collection.","Get a span for the error.","","","Creates a new error for a list which did not get enough …","Creates a new error when a list got more items than it …","","","","","","","","","","Creates a new error for a field which has an unexpected …","Creates a new error for a field which has an unexpected …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a value which doesn’t match a …","","Creates a new error for a struct or variant that does not …","","Tie a span to the error if none is already present. This …","Write this error and any children as compile errors into a …","The tracing is being used to generate an <code>impl</code> block.","Searcher for finding lifetimes in an iterator.","Searcher for finding type params in an iterator.","The tracing is being used to generate a new struct or enum.","Extension trait for pulling specific generics data from a …","A set of references to idents.","A set of idents.","A set of references to lifetimes.","A set of lifetimes.","Control struct for searching type parameters.","The goal of tracing generic parameter usage.","Searcher for finding lifetimes in a syntax tree. This can …","Searcher for finding type params in a syntax tree. This …","","","","","","","","","Consume an iterator, accumulating all lifetimes in the …","Consume an iterator using <code>collect_lifetimes</code>, then clone …","Consume an iterator, accumulating all type parameters in …","Consume an iterator using <code>collect_type_params</code>, then clone …","Get the set of all lifetimes declared by the syntax …","Get the set of all type parameters declared by the syntax …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns <code>true</code> if the implementer of <code>UseTypeParams</code> should …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the subset of the queried lifetimes that are used …","Find all used lifetimes, then clone them and return that …","Returns the subset of the queried type parameters that are …","Find all type params using <code>uses_type_params</code>, then clone …","Get the “shape” of a fields container, such as a …","Explicitly set the value.","A meta-item that can be present as a word - with no value …","A wrapper for an <code>Ident</code> which also keeps the value as a …","An efficient way of discarding data from a syntax element.","Inherit the eventual value from an external source.","A set of named fields, e.g. <code>{ field: String }</code>.","A special case of <code>Tuple</code> with exactly one field, e.g. …","A value which can inherit a default value or have an …","A list of <code>syn::Path</code> instances. This type is used to …","Description of how fields in a struct or variant are …","A set of <code>Shape</code> values, which correctly handles the …","A value and an associated position in source code. The …","A list of unnamed fields, e.g. <code>(String, u64)</code>.","No fields, e.g. <code>struct Example;</code>","A container to parse some syntax and retain access to the …","Get the ident as a <code>proc_macro2::Ident</code>.","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;mut T&gt;</code>.","","","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;T&gt;</code>.","","Get the “shape” of a fields container.","","Get the ident as a string.","","","","","","","","","","","","","","","","","","","Check if a field container’s shape is in this set of …","","","","","","","","","","","","","","","","","","","","Check if a fields container’s shape is in this set.","","","","","","","","","","","","","","","","","","","Converts from <code>Override&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert a shape into the set, so that the set will match …","Insert all possible shapes into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this set is empty.","Returns <code>true</code> if the override is an <code>Explicit</code> value.","Check if the flag is present.","","Apply some transform to the ident’s string …","Apply a mapping function to a reference to the spanned …","Create a new <code>IdentString</code>.","Create a new list.","Create a new <code>ShapeSet</code> which includes the specified items.","","","","Try to parse an attribute into a meta list. Path-type meta …","","","Transform Rust paths to a readable and comparable string.","Creates a new <code>Flag</code> which corresponds to the presence of a …","","Get the location of this <code>Ident</code> in source.","","Get the source code location referenced by this struct.","","","","","","","","","","","","","","","Create a new <code>Vec</code> containing the string representation of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwraps an override, yielding the content of an <code>Explicit</code>. …","Returns the contained value or the default value of <code>T</code>.","Unwraps an override, yielding the content of an <code>Explicit</code>. …","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,84,79,79,77,49,38,78,79,79,79,79,79,35,79,48,79,0,0,0,0,16,85,0,17,0,0,0,0,16,85,17,21,0,21,16,85,21,85,16,85,16,17,18,18,85,16,17,18,21,16,22,17,18,21,16,22,17,18,21,16,22,17,18,21,16,22,18,18,18,18,17,18,17,18,21,16,22,18,17,18,21,16,22,17,18,18,18,21,21,21,16,22,16,22,16,17,18,21,16,22,18,18,17,18,17,18,21,18,21,18,21,18,18,18,17,17,17,18,22,18,18,18,17,17,17,18,21,16,22,18,17,17,17,18,18,21,16,22,17,18,21,16,22,17,18,21,16,22,22,17,18,17,18,22,18,0,0,0,0,1,1,1,61,1,54,61,1,54,1,54,1,1,1,54,1,54,1,1,1,54,54,54,1,1,1,54,61,1,1,54,54,54,1,61,1,54,54,61,1,1,1,1,61,1,54,1,1,1,1,1,61,1,54,61,1,54,61,1,54,1,1,1,1,1,1,1,1,1,1,1,65,0,0,65,0,0,0,0,0,0,0,0,0,65,23,65,23,65,23,65,23,86,86,87,87,88,88,65,65,23,65,23,23,23,65,23,65,23,65,23,65,23,65,23,52,52,53,53,0,67,0,0,0,67,19,19,0,0,0,0,0,19,19,0,66,67,66,66,67,68,70,19,66,71,66,72,67,73,19,69,68,74,71,66,72,67,73,19,69,68,74,69,71,66,72,67,73,19,69,68,74,71,66,72,67,73,19,69,68,74,66,69,71,72,67,73,69,68,73,68,68,19,66,66,66,72,67,73,19,74,67,71,66,66,72,67,67,73,19,19,69,69,68,74,71,71,66,66,72,67,67,73,73,19,69,68,68,74,72,68,74,72,68,74,72,68,74,72,68,74,69,67,73,71,66,72,68,74,71,72,68,74,67,72,68,74,67,66,72,69,69,71,66,72,67,73,19,69,68,74,69,67,71,71,66,68,66,73,69,68,74,74,0,74,66,0,71,71,66,66,68,68,71,66,72,67,73,19,69,68,74,66,67,19,69,73,66,71,66,72,67,73,19,69,68,74,71,66,72,67,73,19,69,68,74,71,66,72,67,73,19,69,68,74,67,67,67,72,72],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[3,[[2,[1]]]],[4,[[2,[1]]]],[5,[[2,[1]]]],[6,[[2,[1]]]],[7,[[2,[1]]]],[8,[[2,[1]]]],[[],[[2,[1]]]],[9,[[2,[1]]]],[10,[[2,[1]]]],[[],11],[12,[[2,[1]]]],[13,[[2,[1]]]],[14,[[2,[1]]]],[15,[[2,[1]]]],[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],11],[16,11],[[],11],[16,11],[17,17],[18,18],[18,19],[[],11],[16,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[20,20]]],[[17,[20,20]]]],[[[18,[20]]],[[18,[20]]]],[21,21],[[[16,[20,20,20]]],[[16,[20,20,20]]]],[[[22,[20,20]]],[[22,[20,20]]]],[[]],[[]],[[]],[[]],[[]],[[23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]],[[23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]],[29,17],[30,18],[[[17,[[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]]]],[17,[[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]]]]],3],[[[18,[[31,[[31,[[31,[31]]]]]]]],[18,[[31,[[31,[[31,[31]]]]]]]]],3],[[21,21],3],[[[16,[[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]]]],[16,[[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]]]]],3],[[[22,[[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]]]],[22,[[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]]]]],3],0,[[[17,[32,32]],33],[[2,[34]]]],[[[18,[32]],33],[[2,[34]]]],[[21,33],[[2,[34]]]],[[[16,[32,32,32]],33],[[2,[34]]]],[[[22,[32,32]],33],[[2,[34]]]],[[]],[21,18],[[]],[[],18],[[]],[30,21],[30,21],[[]],[[]],[7,[[2,[[16,[35,36,37]],1]]]],[8,[[2,[[22,[38,39]],1]]]],[13,[[2,[[16,[35,36,37]],1]]]],[[]],[[]],[[]],[[]],[[]],[18],[18,3],[17,3],[18,3],[17,3],[18,3],[21,3],[18,3],[21,3],[18,3],[21,3],[18,40],[18,41],[[18,42],18],[[17,42],17],[[17,42],17],[[17,42],17],[[21,[44,[43]]],18],0,[[],45],[18],0,[17,[[11,[[44,[43]]]]]],[17,[[11,[18]]]],[[]],[[]],[[]],[[]],[[]],[[[18,[46]],47]],[29,[[2,[17,1]]]],[[],2],[29,[[2,[[17,[48,49]],1]]]],[30,[[2,[[18,[49]],1]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],50],[[],50],[[],50],[[],50],[[],50],[22,51],[[[17,[52,52]],23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[[18,[52]],23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[[17,[53,53]],23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]],[[[18,[53]],23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]],0,[[18,45],18],0,0,0,0,[[],54],[[1,55],1],[[1,56],1],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[11,[57]]]],[54,[[2,[54,1]]]],[1,1],[[]],[55,1],[[],54],[1,12],[54],[12,1],[56,1],[1,[[11,[45]]]],[[54,58]],[54,[[2,[1]]]],[54,[[2,[1]]]],[1,1],[[1,33],[[2,[34]]]],[[1,33],[[2,[34]]]],[[54,33],[[2,[34]]]],[[]],[59,1],[[]],[[]],[[54,[2,[1]]],11],[[54,60],11],[1,3],[[]],[[]],[[]],[54,[[44,[1,43]]]],[[]],[1,61],[1,41],[12,1],[[[44,[1,43]]],1],[61,[[11,[1]]]],[62],[[54,1]],[1,45],[[]],[[],63],[41,1],[41,1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],50],[[],50],[[],50],[14,1],[12,1],[12,1],[56,1],[[12,58],1],[12,1],[12,1],[12,1],[[12,55],1],[[1,64],1],[1,47],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[65,65],[23,23],[[]],[[]],[[23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]],[[23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]],[[],[[27,[24,[26,[25]]]]]],[[],[[27,[28,[26,[25]]]]]],[[65,65],3],[[65,33],[[2,[34]]]],[[23,33],[[2,[34]]]],[[]],[[]],[65,23],[23,3],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],50],[[],50],[[23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]],[[23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[66,28],[67,67],[66,28],[66,12],[67,67],[68],[[],19],[19,19],[66,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[69,70],[[2,[1]]]],[71,71],[66,66],[72,72],[[[67,[20]]],[[67,[20]]]],[73,73],[19,19],[69,69],[[[68,[20]]],[[68,[20]]]],[[[74,[20,20]]],[[74,[20,20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[66,66],75],[[69,70],3],[[],71],[[],72],[[],67],[[],73],[[],69],[[],[[68,[76]]]],[73],[68],[68],[19,12],[[66,12],3],[[66,63],3],[[66,66],3],[[72,72],3],[[[67,[[31,[[31,[[31,[31]]]]]]]],[67,[[31,[[31,[[31,[31]]]]]]]]],3],[[73,73],3],[[19,19],3],[[[74,[[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]]]],[74,[[31,[[31,[[31,[31]]]]]],[31,[[31,[[31,[31]]]]]]]]],3],[67,11],[[71,33],[[2,[34]]]],[[66,33],[[2,[34]]]],[[66,33],[[2,[34]]]],[[72,33],[[2,[34]]]],[[[67,[32]],33],[[2,[34]]]],[[[67,[55]],33],[[2,[34]]]],[[73,33],[[2,[34]]]],[[19,33],[[2,[34]]]],[[19,33],[[2,[34]]]],[[69,33],[[2,[34]]]],[[69,33],[[2,[34]]]],[[[68,[32]],33],[[2,[34]]]],[[[74,[32,32]],33],[[2,[34]]]],[[]],[3,71],[[]],[28,66],[[]],[[]],[11,67],[[[44,[56,43]]],73],[[]],[[]],[[]],[[]],[64,[[68,[64]]]],[[]],[5,[[2,[72,1]]]],[5,[[2,[[68,[77]],1]]]],[5,[[2,[[74,[77,5]],1]]]],[6,[[2,[72,1]]]],[6,[[2,[[68,[49]],1]]]],[6,[[2,[[74,[49,6]],1]]]],[7,[[2,[72,1]]]],[7,[[2,[[68,[38]],1]]]],[7,[[2,[[74,[38,7]],1]]]],[8,[[2,[72,1]]]],[8,[[2,[[68,[78]],1]]]],[8,[[2,[[74,[78,8]],1]]]],[58,69],[[],[[2,[[67,[79]],1]]]],[[],[[2,[73,1]]]],[9,[[2,[71,1]]]],[9,[[2,[66,1]]]],[9,[[2,[72,1]]]],[9,[[2,[[68,[79]],1]]]],[9,[[2,[[74,[79,9]],1]]]],[[],[[11,[71]]]],[13,[[2,[72,1]]]],[13,[[2,[[68,[35]],1]]]],[13,[[2,[[74,[35,13]],1]]]],[14,[[2,[[67,[79]],1]]]],[15,[[2,[72,1]]]],[15,[[2,[[68,[48]],1]]]],[15,[[2,[[74,[48,15]],1]]]],[[],[[2,[[67,[79]],1]]]],[[66,80]],[[72,80]],[[69,19]],[69],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69,3],[67,3],[71,3],[71,3],[[66,60],66],[[68,60],68],[28,66],[[[44,[[81,[56]],43]]],73],[58,69],[45,68],[[],74],0,[82,[[2,[83,1]]]],0,[[66,66],[[11,[75]]]],[56,63],[[],71],[71,45],[66,45],[[],45],[68,45],[68,45],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],63],[[],63],[[],63],[[],63],[73,[[44,[63,43]]]],[[66,47]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[67],[[[67,[76]]],76],[[67,60]],[[72,23,[27,[24,[26,[25]]]]],[[27,[24,[26,[25]]]]]],[[72,23,[27,[28,[26,[25]]]]],[[27,[28,[26,[25]]]]]]],"c":[445],"p":[[3,"Error"],[4,"Result"],[15,"bool"],[15,"char"],[3,"DeriveInput"],[3,"Field"],[4,"GenericParam"],[3,"Generics"],[4,"Meta"],[4,"NestedMeta"],[4,"Option"],[15,"str"],[3,"TypeParam"],[4,"Lit"],[3,"Variant"],[4,"GenericParam"],[4,"Data"],[3,"Fields"],[4,"Shape"],[8,"Clone"],[4,"Style"],[3,"Generics"],[3,"Options"],[3,"Lifetime"],[3,"FnvHasher"],[3,"BuildHasherDefault"],[3,"HashSet"],[3,"Ident"],[4,"Data"],[4,"Fields"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[3,"Error"],[8,"FromTypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[8,"FromGenericParam"],[3,"WhereClause"],[3,"Iter"],[15,"usize"],[8,"FnMut"],[3,"Global"],[3,"Vec"],[3,"Span"],[8,"ToTokens"],[3,"TokenStream"],[8,"FromVariant"],[8,"FromField"],[3,"TypeId"],[3,"TypeParams"],[8,"UsesLifetimes"],[8,"UsesTypeParams"],[3,"Accumulator"],[8,"Display"],[3,"Path"],[8,"Error"],[8,"IntoIterator"],[3,"Error"],[8,"FnOnce"],[3,"IntoIter"],[3,"Demand"],[3,"String"],[8,"Spanned"],[4,"Purpose"],[3,"IdentString"],[4,"Override"],[3,"SpannedValue"],[3,"ShapeSet"],[8,"AsShape"],[3,"Flag"],[3,"Ignored"],[3,"PathList"],[3,"WithOriginal"],[4,"Ordering"],[8,"Default"],[8,"FromDeriveInput"],[8,"FromGenerics"],[8,"FromMeta"],[8,"Hasher"],[8,"Into"],[3,"Attribute"],[3,"MetaList"],[8,"FromAttributes"],[8,"GenericParamExt"],[8,"CollectLifetimes"],[8,"CollectTypeParams"],[8,"GenericsExt"]]},\
"darling_core":{"doc":"","t":"CIIIIIIIICAAAKLLLLKKKKLLLLLLLLLLKLLKLLAOOANQENDEIDNQNNENNQNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLFFFFFFDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIINIGGGGDEIILLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLKLLKLLINDDDNNNEDEDDNNDLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFMLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Error","FromAttributes","FromDeriveInput","FromField","FromGenericParam","FromGenerics","FromMeta","FromTypeParam","FromVariant","Result","ast","derive","error","from_attributes","from_bool","from_bool","from_char","from_char","from_derive_input","from_field","from_generic_param","from_generics","from_list","from_list","from_meta","from_meta","from_nested_meta","from_nested_meta","from_none","from_none","from_string","from_string","from_type_param","from_value","from_value","from_variant","from_word","from_word","usage","uses_lifetimes","uses_type_params","util","Const","ConstParam","Data","Enum","Fields","GenericParam","GenericParamExt","Generics","Lifetime","LifetimeDef","Struct","Struct","Style","Tuple","Type","TypeParam","Unit","as_const_param","as_const_param","as_const_param","as_lifetime_def","as_lifetime_def","as_lifetime_def","as_ref","as_ref","as_shape","as_type_param","as_type_param","as_type_param","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","empty_from","empty_from","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_generic_param","from_generics","from_type_param","into","into","into","into","into","into_iter","is_empty","is_enum","is_newtype","is_struct","is_struct","is_struct","is_tuple","is_tuple","is_unit","is_unit","iter","len","map","map_enum_variants","map_struct","map_struct_fields","new","params","span","split","style","take_enum","take_struct","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","try_empty_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_params","uses_lifetimes","uses_lifetimes","uses_type_params","uses_type_params","where_clause","with_span","from_attributes","from_derive_input","from_field","from_meta","from_type_param","from_variant","Accumulator","Error","IntoIter","Result","accumulator","at","at_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","checkpoint","clone","clone_into","custom","default","description","drop","duplicate_field","duplicate_field_path","explicit_span","extend","finish","finish_with","flatten","fmt","fmt","fmt","from","from","from","from","from_generics","from_meta","from_none","handle","handle_in","has_span","into","into","into","into_inner","into_iter","into_iter","len","missing_field","multiple","next","provide","push","span","to_owned","to_string","too_few_items","too_many_items","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unexpected_lit_type","unexpected_type","unknown_field","unknown_field_path","unknown_field_with_alts","unknown_value","unsupported_format","unsupported_shape","unsupported_shape_with_expected","with_span","write_errors","BoundImpl","CollectLifetimes","CollectTypeParams","Declare","GenericsExt","IdentRefSet","IdentSet","LifetimeRefSet","LifetimeSet","Options","Purpose","UsesLifetimes","UsesTypeParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","declared_lifetimes","declared_type_params","eq","fmt","fmt","from","from","from","include_type_path_qself","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uses_lifetimes","uses_lifetimes_cloned","uses_lifetimes_cloned","uses_type_params","uses_type_params_cloned","uses_type_params_cloned","AsShape","Explicit","Flag","IdentString","Ignored","Inherit","Named","Newtype","Override","PathList","Shape","ShapeSet","SpannedValue","Tuple","Unit","WithOriginal","as_ident","as_mut","as_ref","as_ref","as_ref","as_ref","as_shape","as_shape","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","default","default","default","deref","deref","deref_mut","description","eq","eq","eq","eq","eq","eq","eq","eq","explicit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_derive_input","from_derive_input","from_derive_input","from_field","from_field","from_field","from_generic_param","from_generic_param","from_generic_param","from_generics","from_generics","from_generics","from_iter","from_list","from_list","from_meta","from_meta","from_meta","from_meta","from_meta","from_none","from_type_param","from_type_param","from_type_param","from_value","from_variant","from_variant","from_variant","from_word","hash","hash","insert","insert_all","into","into","into","into","into","into","into","into","into","is_empty","is_explicit","is_present","is_some","map","map_ref","new","new","new","new","new","original","parse_attribute_to_meta_list","parsed","partial_cmp","path_to_string","present","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_strings","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or","unwrap_or_default","unwrap_or_else","uses_lifetimes","uses_type_params"],"q":[[0,"darling_core"],[42,"darling_core::ast"],[176,"darling_core::derive"],[182,"darling_core::error"],[260,"darling_core::usage"],[310,"darling_core::util"]],"d":["","Create an instance by parsing a list of attributes.","Creates an instance by parsing an entire proc-macro <code>derive</code> …","Creates an instance by parsing an individual field and its …","Creates an instance by parsing a specific <code>syn::GenericParam</code>…","Creates an instance by parsing an entire generics …","Create an instance from an item in an attribute …","Creates an instance by parsing an individual type_param …","Creates an instance from a specified <code>syn::Variant</code>.","","Utility types for working with the AST.","Functions to derive <code>darling</code>’s traits from well-formed …","The <code>darling::Error</code> type, the multiple error <code>Accumulator</code>, …","Create an instance by parsing a list of attributes.","Create an instance from a bool literal in a value position.","Create an instance from a bool literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from <code>syn::DeriveInput</code>, or return an …","","","","Create an instance from a list of nested meta items.","Create an instance from a list of nested meta items.","Create an instance from a <code>syn::Meta</code> by dispatching to the …","Create an instance from a <code>syn::Meta</code> by dispatching to the …","","","When a field is omitted from a parent meta-item, <code>from_none</code> …","When a field is omitted from a parent meta-item, <code>from_none</code> …","Create an instance from a string literal in a value …","Create an instance from a string literal in a value …","","Create an instance from a literal value of either …","Create an instance from a literal value of either …","Create an instance from <code>syn::Variant</code>, or return an error.","Create an instance from the presence of the word in the …","Create an instance from the presence of the word in the …","Traits and types used for tracking the usage of generic …","Generator for <code>UsesLifetimes</code> impls that unions the used …","Generator for <code>UsesTypeParam</code> impls that unions the used …","Utility types for attribute parsing.","","","A struct or enum body.","","Equivalent to <code>syn::Fields</code>, but replaces the AST element …","A mirror of <code>syn::GenericParam</code> which is generic over all …","Extension trait for <code>GenericParam</code> to support getting values …","A mirror of the <code>syn::Generics</code> type which can contain …","","","","","","","","The type this GenericParam uses to represent type params …","","If this GenericParam is a const param, get the underlying …","If this GenericParam is a const param, get the underlying …","","If this GenericParam is a lifetime, get the underlying …","If this GenericParam is a lifetime, get the underlying …","","Creates a new <code>Data&lt;&amp;&#39;a V, &amp;&#39;a F&gt;</code> instance from <code>Data&lt;V, F&gt;</code>.","","","If this GenericParam is a type param, get the underlying …","If this GenericParam is a type param, get the underlying …","","","","","","","","","","","","","","","","","","","","","","Creates an empty body of the same shape as the passed-in …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the <code>Fields</code> contains no fields.","Returns <code>true</code> if this instance is <code>Data::Enum</code>.","Returns true if this variant’s data makes it a newtype.","Returns <code>true</code> if this instance is <code>Data::Struct</code>.","","","","","","","","Returns the number of fields in the structure.","","Applies a function <code>V -&gt; U</code> on enum variants, if this is an …","Applies a function to the <code>Fields</code> if this is a struct.","Applies a function <code>F -&gt; U</code> on struct fields, if this is a …","Creates a new <code>Fields</code> struct.","","","Splits the <code>Fields</code> into its style and fields for further …","","Consumes the <code>Data</code>, returning <code>Vec&lt;V&gt;</code> if it was an enum.","Consumes the <code>Data</code>, returning <code>Fields&lt;F&gt;</code> if it was a struct.","","","","","","","Creates an empty body of the same shape as the passed-in …","","Attempt to convert from a <code>syn::Data</code> instance.","","","","","","","","","","","","","","","","","","","","","","Adds a <code>Span</code> to <code>Fields</code>.","Create tokens for a <code>darling::FromAttributes</code> impl from a …","Create tokens for a <code>darling::FromDeriveInput</code> impl from a …","Create tokens for a <code>darling::FromField</code> impl from a …","Create tokens for a <code>darling::FromMeta</code> impl from a …","Create tokens for a <code>darling::FromTypeParam</code> impl from a …","Create tokens for a <code>darling::FromVariant</code> impl from a …","Accumulator for errors, for helping call <code>Error::multiple</code>.","An error encountered during attribute parsing.","An iterator that moves out of an <code>Error</code>.","An alias of <code>Result</code> specific to attribute parsing.","Creates an error collector, for aggregating multiple errors","Adds a location to the error, such as a field or variant. …","Adds a location to the error, such as a field or variant. …","","","","","","","","Finish the current accumulation, and if there are no …","","","Creates a new error with a custom message.","","","","Creates a new error for a field that appears twice in the …","Creates a new error for a field that appears twice in the …","Get the span for <code>self</code>, if one has been set.","","Stop accumulating errors, producing <code>Ok</code> if there are no …","Bundles the collected errors if there were any, or returns …","Recursively converts a tree of errors to a flattened list.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Handles a possible error.","Runs a closure, returning the successful value as <code>Some</code>, or …","Check if this error is associated with a span in the token …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the accumulated errors as a <code>Vec</code>.","","","Gets the number of individual errors in this error.","Creates a new error for a non-optional field that does not …","Bundle a set of multiple errors into a single <code>Error</code> …","","","Add one error to the collection.","Get a span for the error.","","","Creates a new error for a list which did not get enough …","Creates a new error when a list got more items than it …","","","","","","","","","","Creates a new error for a field which has an unexpected …","Creates a new error for a field which has an unexpected …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a value which doesn’t match a …","","Creates a new error for a struct or variant that does not …","","Tie a span to the error if none is already present. This …","Write this error and any children as compile errors into a …","The tracing is being used to generate an <code>impl</code> block.","Searcher for finding lifetimes in an iterator.","Searcher for finding type params in an iterator.","The tracing is being used to generate a new struct or enum.","Extension trait for pulling specific generics data from a …","A set of references to idents.","A set of idents.","A set of references to lifetimes.","A set of lifetimes.","Control struct for searching type parameters.","The goal of tracing generic parameter usage.","Searcher for finding lifetimes in a syntax tree. This can …","Searcher for finding type params in a syntax tree. This …","","","","","","","","","Consume an iterator, accumulating all lifetimes in the …","Consume an iterator using <code>collect_lifetimes</code>, then clone …","Consume an iterator, accumulating all type parameters in …","Consume an iterator using <code>collect_type_params</code>, then clone …","Get the set of all lifetimes declared by the syntax …","Get the set of all type parameters declared by the syntax …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns <code>true</code> if the implementer of <code>UseTypeParams</code> should …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the subset of the queried lifetimes that are used …","Find all used lifetimes, then clone them and return that …","Find all used lifetimes, then clone them and return that …","Returns the subset of the queried type parameters that are …","Find all type params using <code>uses_type_params</code>, then clone …","Find all type params using <code>uses_type_params</code>, then clone …","Get the “shape” of a fields container, such as a …","Explicitly set the value.","A meta-item that can be present as a word - with no value …","A wrapper for an <code>Ident</code> which also keeps the value as a …","An efficient way of discarding data from a syntax element.","Inherit the eventual value from an external source.","A set of named fields, e.g. <code>{ field: String }</code>.","A special case of <code>Tuple</code> with exactly one field, e.g. …","A value which can inherit a default value or have an …","A list of <code>syn::Path</code> instances. This type is used to …","Description of how fields in a struct or variant are …","A set of <code>Shape</code> values, which correctly handles the …","A value and an associated position in source code. The …","A list of unnamed fields, e.g. <code>(String, u64)</code>.","No fields, e.g. <code>struct Example;</code>","A container to parse some syntax and retain access to the …","Get the ident as a <code>proc_macro2::Ident</code>.","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;mut T&gt;</code>.","","","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;T&gt;</code>.","","Get the “shape” of a fields container.","","Get the ident as a string.","","","","","","","","","","","","","","","","","","","Check if a field container’s shape is in this set of …","","","","","","","","","","","","","","","","","","","","Check if a fields container’s shape is in this set.","","","","","","","","","","","","","","","","","","","Converts from <code>Override&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert a shape into the set, so that the set will match …","Insert all possible shapes into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this set is empty.","Returns <code>true</code> if the override is an <code>Explicit</code> value.","Check if the flag is present.","","Apply some transform to the ident’s string …","Apply a mapping function to a reference to the spanned …","Create a new <code>IdentString</code>.","Create a new list.","Create a new <code>ShapeSet</code> which includes the specified items.","","","","Try to parse an attribute into a meta list. Path-type meta …","","","Transform Rust paths to a readable and comparable string.","Creates a new <code>Flag</code> which corresponds to the presence of a …","","","Get the location of this <code>Ident</code> in source.","","Get the source code location referenced by this struct.","","","","","","","","","","","","","","Create a new <code>Vec</code> containing the string representation of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwraps an override, yielding the content of an <code>Explicit</code>. …","Returns the contained value or the default value of <code>T</code>.","Unwraps an override, yielding the content of an <code>Explicit</code>. …","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,80,56,56,56,56,75,39,29,55,56,56,56,56,56,56,56,56,56,56,28,56,56,38,56,56,0,0,0,0,15,81,0,16,0,0,0,0,15,81,16,20,0,20,15,81,20,81,81,15,81,81,15,16,17,17,81,81,15,16,17,20,15,21,16,17,20,15,21,16,17,20,15,21,16,17,20,15,21,16,17,16,17,20,15,21,17,16,17,20,15,21,16,17,17,17,20,20,20,15,21,15,21,15,16,17,20,15,21,17,17,16,17,16,17,20,17,20,17,20,17,17,17,16,16,16,17,21,17,17,17,16,16,16,17,20,15,21,17,16,16,16,17,17,20,15,21,16,17,20,15,21,16,17,20,15,21,21,16,17,16,17,21,17,0,0,0,0,0,0,0,0,0,0,49,49,49,58,49,48,58,49,48,49,48,49,49,49,48,49,48,49,49,49,48,48,48,49,49,49,48,58,49,49,48,1,1,1,48,48,49,58,49,48,48,58,49,49,49,49,58,49,48,49,49,49,49,49,58,49,48,58,49,48,58,49,48,49,49,49,49,49,49,49,49,49,49,49,62,0,0,62,0,0,0,0,0,0,0,0,0,62,42,62,42,62,42,62,42,82,82,83,83,84,84,62,62,42,62,42,42,42,62,42,62,42,62,42,62,42,62,42,41,41,41,45,45,45,0,65,0,0,0,65,18,18,0,0,0,0,0,18,18,0,63,65,63,63,65,66,68,18,63,69,63,70,65,71,18,67,66,72,69,63,70,65,71,18,67,66,72,67,69,63,70,65,71,18,67,66,72,69,63,70,65,71,18,67,66,72,63,67,69,70,65,71,67,66,71,66,66,18,63,63,63,70,65,71,18,72,65,69,63,63,70,65,65,71,18,18,67,67,66,72,69,69,63,63,70,65,65,71,71,18,67,66,66,72,70,66,72,70,66,72,70,66,72,70,66,72,67,65,71,69,63,70,66,72,69,70,66,72,65,70,66,72,65,63,70,67,67,69,63,70,65,71,18,67,66,72,67,65,69,69,63,66,63,71,67,66,72,72,0,72,63,0,69,69,63,63,66,66,69,63,70,65,71,18,67,66,72,63,65,18,67,71,63,69,63,70,65,71,18,67,66,72,69,63,70,65,71,18,67,66,72,69,63,70,65,71,18,67,66,72,65,65,65,70,70],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[2,1],[3,1],[3,1],[4,1],[5,1],[6,1],[7,1],[[],1],[[],1],[8,1],[8,1],[9,1],[9,1],[[],10],[[],10],[11,1],[11,1],[12,1],[13,1],[13,1],[14,1],[[],1],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],10],[[],10],[15,10],[[],10],[[],10],[15,10],[16,16],[17,17],[17,18],[[],10],[[],10],[15,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[19,19]]],[[16,[19,19]]]],[[[17,[19]]],[[17,[19]]]],[20,20],[[[15,[19,19,19]]],[[15,[19,19,19]]]],[[[21,[19,19]]],[[21,[19,19]]]],[[]],[[]],[[]],[[]],[[]],[22,16],[23,17],[[[16,[24,24]],[16,[24,24]]],2],[[[17,[24]],[17,[24]]],2],[[20,20],2],[[[15,[24,24,24]],[15,[24,24,24]]],2],[[[21,[24,24]],[21,[24,24]]],2],0,[[[16,[25,25]],26],27],[[[17,[25]],26],27],[[20,26],27],[[[15,[25,25,25]],26],27],[[[21,[25,25]],26],27],[[]],[[]],[20,17],[[],17],[[]],[23,20],[23,20],[[]],[[]],[6,[[1,[[15,[28]]]]]],[7,[[1,[[21,[29]]]]]],[12,[[1,[[15,[28]]]]]],[[]],[[]],[[]],[[]],[[]],[17],[17,2],[16,2],[17,2],[16,2],[17,2],[20,2],[17,2],[20,2],[17,2],[20,2],[17,30],[17,31],[[17,32],17],[[16,32],16],[[16,32],16],[[16,32],16],[[20,33],17],0,[[],34],[17],0,[16,[[10,[33]]]],[16,[[10,[17]]]],[[]],[[]],[[]],[[]],[[]],[[[17,[35]],36]],[22,[[1,[16]]]],[[],37],[22,[[1,[[16,[38,39]]]]]],[23,[[1,[[17,[39]]]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],40],[[],40],[[],40],[[],40],[[],40],0,[[[16,[41,41]],42,43],44],[[[17,[41]],42,43],44],[[[16,[45,45]],42,46],47],[[[17,[45]],42,46],47],0,[[17,34],17],[4,36],[4,36],[4,36],[4,36],[4,36],[4,36],0,0,0,0,[[],48],[[49,50],49],[[49,51],49],[[]],[[]],[[]],[[]],[[]],[[]],[49,[[10,[52]]]],[48,[[1,[48]]]],[49,49],[[]],[50,49],[[],48],[49,11],[48],[11,49],[51,49],[49,[[10,[34]]]],[[48,53]],[48,1],[48,1],[49,49],[[49,26],27],[[49,26],27],[[48,26],27],[[]],[[]],[54,49],[[]],[7,[[1,[[1,[55]]]]]],[8,[[1,[[1,[56]]]]]],[[],[[10,[[1,[56]]]]]],[[48,1],10],[[48,57],10],[49,2],[[]],[[]],[[]],[48,[[33,[49]]]],[[]],[49,58],[49,31],[11,49],[[[33,[49]]],49],[58,[[10,[49]]]],[59],[[48,49]],[49,34],[[]],[[],60],[31,49],[31,49],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],40],[[],40],[[],40],[13,49],[11,49],[11,49],[51,49],[[11,53],49],[11,49],[11,49],[11,49],[[11,50],49],[[49,61],49],[49,36],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[62,62],[42,42],[[]],[[]],[[42,43],44],[[42,43],43],[[42,46],47],[[42,46],46],[[],43],[[],46],[[62,62],2],[[62,26],27],[[42,26],27],[[]],[[]],[62,42],[42,2],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],40],[[],40],[[42,43],44],[[42,43],43],[[42,43],43],[[42,46],47],[[42,46],46],[[42,46],46],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[63,64],[65,65],[63,64],[63,11],[65,65],[66],[[],18],[18,18],[63,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[67,68],1],[69,69],[63,63],[70,70],[[[65,[19]]],[[65,[19]]]],[71,71],[18,18],[67,67],[[[66,[19]]],[[66,[19]]]],[[[72,[19,19]]],[[72,[19,19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[63,63],73],[[67,68],2],[[],69],[[],70],[[],65],[[],71],[[],67],[[],[[66,[74]]]],[71],[66],[66],[18,11],[[63,63],2],[[63,60],2],[[63,11],2],[[70,70],2],[[[65,[24]],[65,[24]]],2],[[71,71],2],[[18,18],2],[[[72,[24,24]],[72,[24,24]]],2],[65,10],[[69,26],27],[[63,26],27],[[63,26],27],[[70,26],27],[[[65,[25]],26],27],[[[65,[50]],26],27],[[71,26],27],[[18,26],27],[[18,26],27],[[67,26],27],[[67,26],27],[[[66,[25]],26],27],[[[72,[25,25]],26],27],[[]],[2,69],[64,63],[[]],[[]],[[]],[10,65],[[[33,[51]]],71],[[]],[[]],[[]],[61,[[66,[61]]]],[[]],[[]],[4,[[1,[70]]]],[4,[[1,[[66,[75]]]]]],[4,[[1,[[72,[75,4]]]]]],[5,[[1,[70]]]],[5,[[1,[[66,[39]]]]]],[5,[[1,[[72,[39,5]]]]]],[6,[[1,[70]]]],[6,[[1,[[66,[29]]]]]],[6,[[1,[[72,[29,6]]]]]],[7,[[1,[70]]]],[7,[[1,[[66,[55]]]]]],[7,[[1,[[72,[55,7]]]]]],[53,67],[[],[[1,[[65,[56]]]]]],[[],[[1,[71]]]],[8,[[1,[69]]]],[8,[[1,[63]]]],[8,[[1,[70]]]],[8,[[1,[[66,[56]]]]]],[8,[[1,[[72,[56,8]]]]]],[[],[[10,[69]]]],[12,[[1,[70]]]],[12,[[1,[[66,[28]]]]]],[12,[[1,[[72,[28,12]]]]]],[13,[[1,[[65,[56]]]]]],[14,[[1,[70]]]],[14,[[1,[[66,[38]]]]]],[14,[[1,[[72,[38,14]]]]]],[[],[[1,[[65,[56]]]]]],[[63,76]],[[70,76]],[[67,18]],[67],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67,2],[65,2],[69,2],[69,2],[[63,57],63],[[66,57],66],[64,63],[[[33,[[77,[51]]]]],71],[53,67],[34,66],[[],72],0,[78,[[1,[79]]]],0,[[63,63],[[10,[73]]]],[51,60],[[],69],[69,34],[[],34],[63,34],[66,34],[66,34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],60],[[],60],[[],60],[[],60],[71,[[33,[60]]]],[[63,36]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[65],[[[65,[74]]],74],[[65,57]],[[70,42,43],44],[[70,42,46],47]],"c":[465],"p":[[6,"Result"],[15,"bool"],[15,"char"],[3,"DeriveInput"],[3,"Field"],[4,"GenericParam"],[3,"Generics"],[4,"Meta"],[4,"NestedMeta"],[4,"Option"],[15,"str"],[3,"TypeParam"],[4,"Lit"],[3,"Variant"],[4,"GenericParam"],[4,"Data"],[3,"Fields"],[4,"Shape"],[8,"Clone"],[4,"Style"],[3,"Generics"],[4,"Data"],[4,"Fields"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"FromTypeParam"],[8,"FromGenericParam"],[3,"Iter"],[15,"usize"],[8,"FnMut"],[3,"Vec"],[3,"Span"],[8,"ToTokens"],[3,"TokenStream"],[4,"Result"],[8,"FromVariant"],[8,"FromField"],[3,"TypeId"],[8,"UsesLifetimes"],[3,"Options"],[6,"LifetimeSet"],[6,"LifetimeRefSet"],[8,"UsesTypeParams"],[6,"IdentSet"],[6,"IdentRefSet"],[3,"Accumulator"],[3,"Error"],[8,"Display"],[3,"Path"],[8,"Error"],[8,"IntoIterator"],[3,"Error"],[8,"FromGenerics"],[8,"FromMeta"],[8,"FnOnce"],[3,"IntoIter"],[3,"Demand"],[3,"String"],[8,"Spanned"],[4,"Purpose"],[3,"IdentString"],[3,"Ident"],[4,"Override"],[3,"SpannedValue"],[3,"ShapeSet"],[8,"AsShape"],[3,"Flag"],[3,"Ignored"],[3,"PathList"],[3,"WithOriginal"],[4,"Ordering"],[8,"Default"],[8,"FromDeriveInput"],[8,"Hasher"],[8,"Into"],[3,"Attribute"],[3,"MetaList"],[8,"FromAttributes"],[8,"GenericParamExt"],[8,"CollectLifetimes"],[8,"CollectTypeParams"],[8,"GenericsExt"]]},\
"darling_macro":{"doc":"","t":"YYYYYYY","n":["FromAttributes","FromDeriveInput","FromField","FromMeta","FromMetaItem","FromTypeParam","FromVariant"],"q":[[0,"darling_macro"]],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[]},\
"derive_builder":{"doc":"Derive a builder for a struct","t":"YDLLLLLLLLLLLLLLLLL","n":["Builder","UninitializedFieldError","borrow","borrow_mut","clone","clone_into","field_name","fmt","fmt","from","from","into","new","provide","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"derive_builder"]],"d":["Create a builder struct for the deriving struct.","Runtime error when a <code>build()</code> method is called and one or …","","","","","Get the name of the first-declared field that wasn’t …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new <code>UnitializedFieldError</code> for the specified field …","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[]],[1,2],[[1,3],4],[[1,3],4],[[]],[2,1],[[]],[2,1],[5],[[]],[[],6],[[],7],[[],7],[[],8]],"c":[],"p":[[3,"UninitializedFieldError"],[15,"str"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"derive_builder_core":{"doc":"Internal helper library for the <code>derive_builder</code> crate.","t":"F","n":["builder_for_struct"],"q":[[0,"derive_builder_core"]],"d":["Derive a builder for a struct"],"i":[0],"f":[[1,2]],"c":[],"p":[[3,"DeriveInput"],[3,"TokenStream"]]},\
"derive_builder_macro":{"doc":"Derive a builder for a struct","t":"Y","n":["Builder"],"q":[[0,"derive_builder_macro"]],"d":["Create a builder struct for the deriving struct."],"i":[0],"f":[0],"c":[],"p":[]},\
"drop_guard":{"doc":"This crate gives a generic way to add a callback to any …","t":"DLLLLLLFLLLLL","n":["DropGuard","borrow","borrow_mut","deref","deref_mut","drop","from","guard","into","new","try_from","try_into","type_id"],"q":[[0,"drop_guard"]],"d":["The DropGuard will remain to <code>Send</code> and <code>Sync</code> from <code>T</code>.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new guard taking in your data and a function.","","",""],"i":[0,2,2,2,2,2,2,0,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[]],[[3,1],[[2,[3,1]]]],[[]],[[3,1],[[2,[3,1]]]],[[],4],[[],4],[[],5]],"c":[9],"p":[[8,"FnMut"],[3,"DropGuard"],[8,"Sized"],[4,"Result"],[3,"TypeId"]]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":"EIDCNCNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLL","n":["Either","IntoEither","IterEither","Left","Left","Right","Right","all","all","any","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","cause","clone","clone","clone_from","clone_into","clone_into","cmp","collect","collect","consume","count","count","deref","deref_mut","description","either","either_into","either_with","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_into_iter","factor_iter","factor_iter_mut","factor_none","factor_ok","factor_second","fill_buf","find","find","find_map","find_map","flip","flush","fmt","fmt","fmt","fold","fold","for_both","for_each","for_each","from","from","from","hash","into","into","into","into_either","into_either","into_either_with","into_either_with","into_future","into_inner","into_iter","into_iter","into_iter","is_left","is_right","iter","iter_mut","last","last","left","left_and_then","left_or","left_or_default","left_or_else","len","len","map","map_either","map_either_with","map_left","map_right","next","next","next_back","next_back","nth","nth","nth_back","nth_back","partial_cmp","partition","partition","poll","position","position","provide","read","read_exact","read_line","read_to_end","read_to_string","read_until","rfind","rfind","rfold","rfold","right","right_and_then","right_or","right_or_default","right_or_else","seek","size_hint","size_hint","source","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","try_left","try_right","type_id","type_id","unwrap_left","unwrap_right","write","write_all","write_fmt"],"q":[[0,"either"]],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Provides methods for converting a type <code>Self</code> into either a …","Iterator that maps left or right iterators to …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Converts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…","Borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s","Mutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …","Converts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …","Converts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …","Converts <code>self</code> into a <code>Left</code> variant of <code>Either&lt;Self, Self&gt;</code> if …","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","Borrow the inner value as an iterator.","Mutably borrow the inner value as an iterator.","","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to <code>map_either</code>, with an added context <code>ctx</code> …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","","","","","","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","","Returns the left value","Returns the right value","","",""],"i":[0,0,0,0,2,0,2,2,5,2,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,2,5,2,2,2,2,5,2,5,0,2,5,2,2,5,2,2,2,5,54,54,54,54,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,2,2,5,2,2,2,2,2,2,5,2,5,2,5,2,5,2,2,5,2,2,5,2,2,2,2,2,2,2,2,5,2,5,2,2,2,2,2,2,2,5,2,2,5,2,2,5,2,5,0,0,2,5,2,2,2,2,2],"f":[0,0,0,0,0,0,0,[[[2,[1,1]],3],4],[[[5,[1,1]],3],4],[[[2,[1,1]],3],4],[[[5,[1,1]],3],4],[[[2,[[7,[6]],[7,[6]]]]],6],[[[2,[[7,[8]],[7,[8]]]]],8],[[[2,[[7,[9]],[7,[9]]]]],9],[[[2,[[7,[10]],[7,[10]]]]],10],[[[2,[7,7]]]],[2,2],[[[2,[7,7]]]],[[[11,[2]]],[[2,[11,11]]]],[[[11,[2]]],[[2,[11,11]]]],[2,2],[[[2,[[12,[10]],[12,[10]]]]],10],[[[2,[12,12]]]],[[[2,[[12,[6]],[12,[6]]]]],6],[[[2,[[12,[8]],[12,[8]]]]],8],[[[2,[[12,[9]],[12,[9]]]]],9],[[[2,[12,12]]]],[[]],[[]],[[]],[[]],[[[2,[13,13]]],[[14,[13]]]],[[[2,[15,15]]],[[2,[15,15]]]],[[[5,[15,15]]],[[5,[15,15]]]],[[[2,[15,15]],[2,[15,15]]]],[[]],[[]],[[[2,[16,16]],[2,[16,16]]],17],[[[2,[1,1]]],18],[[[5,[1,1]]],18],[[[2,[19,19]],20]],[[[2,[1,1]]],20],[[[5,[1,1]]],20],[[[2,[21,21]]]],[[[2,[22,22]]]],[[[2,[13,13]]],6],[[2,23,23]],[[[2,[24,24]]]],[[2,23,23]],[[[2,[25,25]],[2,[25,25]]],4],[[[2,[26]],6]],[[[2,[26]],6]],[[[2,[27,27]],28]],[[[2,[29,29]]],[[29,[2]]]],[2],[[[2,[28,28]]],5],[2,5],[2,5],[[[2,[14,14]]],[[14,[2]]]],[[[2,[29,29]]],[[29,[2]]]],[2],[[[2,[19,19]]],30],[[[2,[1,1]],3],14],[[[5,[1,1]],3],14],[[[2,[1,1]],3],14],[[[5,[1,1]],3],14],[2,2],[[[2,[31,31]]],30],[[[2,[32,32]],33],34],[[[2,[26,26]],33],34],[[[5,[26,26]],33],34],[[[2,[1,1]],3]],[[[5,[1,1]],3]],0,[[[2,[1,1]],3]],[[[5,[1,1]],3]],[[]],[29,2],[[]],[[[2,[35,35]],36]],[2,29],[[]],[[]],[4,2],[4,2],[23,2],[23,2],[[]],[2],[[]],[[[2,[28,28]]],2],[[]],[2,4],[2,4],[2,2],[2,2],[[[2,[1,1]]],14],[[[5,[1,1]]],14],[2,14],[[2,23],2],[2],[[[2,[37]]],37],[[2,23]],[[[2,[38,38]]],20],[[[5,[38,38]]],20],[[2,23],2],[[2,23,23],2],[[2,23,23],2],[[2,23],2],[[2,23],2],[[[2,[1,1]]],14],[[[5,[1,1]]],14],[[[2,[39,39]]],14],[[[5,[39,39]]],14],[[[2,[1,1]],20],14],[[[5,[1,1]],20],14],[[[2,[39,39]],20],14],[[[5,[39,39]],20],14],[[[2,[40,40]],[2,[40,40]]],[[14,[17]]]],[[[2,[1,1]],3]],[[[5,[1,1]],3]],[[[11,[[2,[41,41]]]],42],43],[[[2,[1,1]],3],[[14,[20]]]],[[[5,[1,1]],3],[[14,[20]]]],[44],[[[2,[45,45]]],[[30,[20]]]],[[[2,[45,45]]],30],[[[2,[19,19]],46],[[30,[20]]]],[[[2,[45,45]],[48,[47]]],[[30,[20]]]],[[[2,[45,45]],46],[[30,[20]]]],[[[2,[19,19]],47,[48,[47]]],[[30,[20]]]],[[[2,[39,39]],3],14],[[[5,[39,39]],3],14],[[[2,[39,39]],3]],[[[5,[39,39]],3]],[2,14],[[2,23],2],[2],[[[2,[37]]],37],[[2,23]],[[[2,[49,49]],50],[[30,[51]]]],[[[2,[1,1]]]],[[[5,[1,1]]]],[[[2,[13,13]]],[[14,[13]]]],[[]],[[]],[[],46],[[],29],[[],29],[[],29],[[],29],0,0,[[],52],[[],52],[[[2,[26]]]],[[[2,[26]]]],[[[2,[31,31]]],[[30,[20]]]],[[[2,[31,31]]],30],[[[2,[31,31]],53],30]],"c":[],"p":[[8,"Iterator"],[4,"Either"],[8,"FnMut"],[15,"bool"],[3,"IterEither"],[15,"str"],[8,"AsMut"],[3,"OsStr"],[3,"CStr"],[3,"Path"],[3,"Pin"],[8,"AsRef"],[8,"Error"],[4,"Option"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"FromIterator"],[8,"BufRead"],[15,"usize"],[8,"Deref"],[8,"DerefMut"],[8,"FnOnce"],[8,"Into"],[8,"PartialEq"],[8,"Debug"],[8,"Extend"],[8,"IntoIterator"],[4,"Result"],[6,"Result"],[8,"Write"],[8,"Display"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[8,"Default"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"PartialOrd"],[8,"Future"],[3,"Context"],[4,"Poll"],[3,"Demand"],[8,"Read"],[3,"String"],[15,"u8"],[3,"Vec"],[8,"Seek"],[4,"SeekFrom"],[15,"u64"],[3,"TypeId"],[3,"Arguments"],[8,"IntoEither"]]},\
"fnv":{"doc":"An implementation of the Fowler–Noll–Vo hash function.","t":"GGGDLLLLLLLLLLL","n":["FnvBuildHasher","FnvHashMap","FnvHashSet","FnvHasher","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","with_key","write"],"q":[[0,"fnv"]],"d":["A builder for default FNV hashers.","A <code>HashMap</code> using a default FNV hasher.","A <code>HashSet</code> using a default FNV hasher.","An implementation of the Fowler–Noll–Vo hash function.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Create an FNV hasher starting with a state corresponding …",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,[[]],[[]],[[],1],[1,2],[[]],[[]],[[],3],[[],3],[[],4],[2,1],[1]],"c":[],"p":[[3,"FnvHasher"],[15,"u64"],[4,"Result"],[3,"TypeId"]]},\
"gsl_rust":{"doc":"","t":"NNNNNNNNNNNNENNNNNNNNNGNNNNNNNNNNNNNDNOALLLLAOLLLLFALLMAALLLLLLAALLLAAAAALAAAAALLLLLLLLLMMMMMGRRCGGRRCGRRRCGRRCMMMGRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRMMMMMMMMMMMMMMMMMMMMMMMMMDMMMDGDMMMMMDMMMGGMGGMMMMMMMMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFGFFFFFFFFFFFFFDGFFFGFFFFFFFFFFFFFDFFFFFFFFFFDFGFFFFFFFFFFFFFDFFFFFGFFFFFFFFFFFFFDGFFFFFFFFFFFFFDFFFFGFFFFFFFFFFFFFDFDGFFFFFFFFFFFFFDGFFFFFFFFFFFFFDGFFFFFFFFFFFFFDGFFFFFFFFFFFFFDFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFHFFDDGGGGGGGGGGGGFFFFFDFFFFFDFFFFDFFFFDFFFFDFFFFDFFFFFDFFFDFFFFDFFFFFFFDFFFFFFDGRRRRFFFDFFFFDFGFFFGRRFFFDFFDFFGRRRFFFFDFFFDFFFDFFFDGRRRRFFGGDDGDFFFDDFFFFHHHFHHHHHFFDHDFDFFDFFFFFFFFFFFGRRDFFFFFDFFFFFFFFFFFFFFFDGDFFDDFFFFHHFFHHFFFFFFFFFFHFFHHDFFFFFDFFFFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFDFFFFFFFFFFFFFFFFFFGFFFFFFFDFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFGFFFFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFDFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFGFFFFFFGFDFHFFFFHFFFHFFDFFFFGFFDHHHHHHHHHHHHHFFFFFGRRRFFDFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFDFGRRFFFFFFDFFFDHHHDHHHHFDHHHHFHHDDFDFFHHHFHFHFFHFFDFDFHDFFFFFFGFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFHHHHHHGFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFHFHHHHFHHHFFFFHHHHHFFFHHHHHFFHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFFHFHHHHHDFHHFFFHHHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGRRRRFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFGGDFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFDFFFFFFFFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFDFFFFFFFFFFFFFFGFFFFDFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFGFFFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFDFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFGFFMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMGMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDDLLLLLLLMMLLLMFLLLLLLLLLLLLLMMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFENNNNLLLLLLLFLFLLLLNNNNNNELLLLLLLLFFFFLLLLEENNNNNLLLLLLLLLLLLLLFFLLLLLLLLLLDLLLLLMLLLLFFMMFMMMLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDLLLLLLLLMMFFMLLLLMDDGLLLLLLLLMMLLLMMLLLLMLLMMMMFFMMMMLLLLLLLLLGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFDRRRRRRRRRMMMLLOFMLMFLLFMLLLFFFRRDMOLLMLLMFLLL","n":["BadFunction","BadLength","BadTolerance","Cache","Continue","Diverge","Domain","EOF","Factorization","Failed","Failure","Fault","GSLError","Invalid","Loss","MaxIteration","NoMemory","NoProgress","NoProgressJacobian","NotSquare","OverFlow","Range","Result","Round","RunAway","Sanity","Singularity","Table","Tolerance","ToleranceF","ToleranceG","ToleranceX","UnderFlow","Unimplemented","Unknown","Unsupported","ValWithError","ZeroDiv","assert_moments","bindings","borrow","borrow","borrow_mut","borrow_mut","bspline","check_result","clone","clone","clone_into","clone_into","disable_error_handler","distribution","eq","eq","err","fft","filter","fmt","fmt","fmt","from","from","from","integration","interpolation","into","into","into","linear_fit","machine","math","minimizer","nonlinear_fit","provide","rng","sorting","special","stats","test_helpers","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","val","A","A","A","B","CBLAS_DIAG","CBLAS_DIAG_CblasNonUnit","CBLAS_DIAG_CblasUnit","CBLAS_DIAG_t","CBLAS_INDEX_t","CBLAS_SIDE","CBLAS_SIDE_CblasLeft","CBLAS_SIDE_CblasRight","CBLAS_SIDE_t","CBLAS_TRANSPOSE","CBLAS_TRANSPOSE_CblasConjTrans","CBLAS_TRANSPOSE_CblasNoTrans","CBLAS_TRANSPOSE_CblasTrans","CBLAS_TRANSPOSE_t","CBLAS_UPLO","CBLAS_UPLO_CblasLower","CBLAS_UPLO_CblasUpper","CBLAS_UPLO_t","D","D","F","FILE","GSL_COMPLEX_LEGACY","GSL_CONTINUE","GSL_EBADFUNC","GSL_EBADLEN","GSL_EBADTOL","GSL_ECACHE","GSL_EDIVERGE","GSL_EDOM","GSL_EFACTOR","GSL_EFAILED","GSL_EFAULT","GSL_EINVAL","GSL_ELOSS","GSL_EMAXITER","GSL_ENOMEM","GSL_ENOPROG","GSL_ENOPROGJ","GSL_ENOTSQR","GSL_EOF","GSL_EOVRFLW","GSL_ERANGE","GSL_EROUND","GSL_ERUNAWAY","GSL_ESANITY","GSL_ESING","GSL_ETABLE","GSL_ETOL","GSL_ETOLF","GSL_ETOLG","GSL_ETOLX","GSL_EUNDRFLW","GSL_EUNIMPL","GSL_EUNSUP","GSL_EZERODIV","GSL_FAILURE","GSL_INTEG_GAUSS15","GSL_INTEG_GAUSS21","GSL_INTEG_GAUSS31","GSL_INTEG_GAUSS41","GSL_INTEG_GAUSS51","GSL_INTEG_GAUSS61","GSL_LOG_MACH_EPS","GSL_MODE_DEFAULT","GSL_NEGZERO","GSL_POSZERO","GSL_PREC_APPROX","GSL_PREC_DOUBLE","GSL_PREC_SINGLE","GSL_RANGE_CHECK","GSL_ROOT4_MACH_EPS","GSL_ROOT5_MACH_EPS","GSL_ROOT6_MACH_EPS","GSL_SF_DOUBLEFACT_NMAX","GSL_SF_FACT_NMAX","GSL_SF_GAMMA_XMAX","GSL_SF_MATHIEU_COEFF","GSL_SUCCESS","H","H","H","H","J","J","J","K","K","K","K","L","Q","Q","Q","QSI","QSI","R","Rsq","S","Z","Z","Z","Z","Z","_IO_FILE","_IO_backup_base","_IO_buf_base","_IO_buf_end","_IO_codecvt","_IO_lock_t","_IO_marker","_IO_read_base","_IO_read_end","_IO_read_ptr","_IO_save_base","_IO_save_end","_IO_wide_data","_IO_write_base","_IO_write_end","_IO_write_ptr","__off64_t","__off_t","__pad5","_bindgen_ty_1","_bindgen_ty_3","_chain","_codecvt","_cur_column","_fileno","_flags","_flags2","_freeres_buf","_freeres_list","_gsl_matrix_char_const_view","_gsl_matrix_char_view","_gsl_matrix_complex_const_view","_gsl_matrix_complex_float_const_view","_gsl_matrix_complex_float_view","_gsl_matrix_complex_view","_gsl_matrix_const_view","_gsl_matrix_float_const_view","_gsl_matrix_float_view","_gsl_matrix_int_const_view","_gsl_matrix_int_view","_gsl_matrix_long_const_view","_gsl_matrix_long_view","_gsl_matrix_short_const_view","_gsl_matrix_short_view","_gsl_matrix_uchar_const_view","_gsl_matrix_uchar_view","_gsl_matrix_uint_const_view","_gsl_matrix_uint_view","_gsl_matrix_ulong_const_view","_gsl_matrix_ulong_view","_gsl_matrix_ushort_const_view","_gsl_matrix_ushort_view","_gsl_matrix_view","_gsl_vector_char_const_view","_gsl_vector_char_view","_gsl_vector_complex_const_view","_gsl_vector_complex_float_const_view","_gsl_vector_complex_float_view","_gsl_vector_complex_view","_gsl_vector_const_view","_gsl_vector_float_const_view","_gsl_vector_float_view","_gsl_vector_int_const_view","_gsl_vector_int_view","_gsl_vector_long_const_view","_gsl_vector_long_view","_gsl_vector_short_const_view","_gsl_vector_short_view","_gsl_vector_uchar_const_view","_gsl_vector_uchar_view","_gsl_vector_uint_const_view","_gsl_vector_uint_view","_gsl_vector_ulong_const_view","_gsl_vector_ulong_view","_gsl_vector_ushort_const_view","_gsl_vector_ushort_view","_gsl_vector_view","_lock","_markers","_mode","_offset","_old_offset","_shortbuf","_unused2","_vtable_offset","_wide_data","a","a","aa","adj_Rsq","al","alist","alloc","alloc","alloc","alloc","alpha","alpha","ascale","atol","avmax","avratio","avratio","b","b","bb","be","beta","beta","blist","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bscale","btol","c","c_prev","cache","chebmo","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compute_s","compute_t","compute_t","d","d","d","d","dB","dat","dat","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","data","dd","delete_oldest","deltal","deltar","depth","df","df","diag","diag","diag","do_balance","dof","dpsi","dx","e10","e2","ee","elist","err","err","err","eshift","eval","eval","eval_deriv","eval_deriv2","eval_integ","evec","even_order","extra_values","f","f","f","f","f_lower","f_minimum","f_upper","factor","factor_down","factor_up","fdf","fdf","fdf","fdtype","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","francis_workspace_p","free","free","free","free","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_slice","function","function","function","function","fvv","fx","g","g","gc","gc","gen_workspace_p","get","get","get_double","gs","gs","gsl_acosh","gsl_asinh","gsl_atanh","gsl_blas_caxpy","gsl_blas_ccopy","gsl_blas_cdotc","gsl_blas_cdotu","gsl_blas_cgemm","gsl_blas_cgemv","gsl_blas_cgerc","gsl_blas_cgeru","gsl_blas_chemm","gsl_blas_chemv","gsl_blas_cher","gsl_blas_cher2","gsl_blas_cher2k","gsl_blas_cherk","gsl_blas_cscal","gsl_blas_csscal","gsl_blas_cswap","gsl_blas_csymm","gsl_blas_csyr2k","gsl_blas_csyrk","gsl_blas_ctrmm","gsl_blas_ctrmv","gsl_blas_ctrsm","gsl_blas_ctrsv","gsl_blas_dasum","gsl_blas_daxpy","gsl_blas_dcopy","gsl_blas_ddot","gsl_blas_dgemm","gsl_blas_dgemv","gsl_blas_dger","gsl_blas_dnrm2","gsl_blas_drot","gsl_blas_drotg","gsl_blas_drotm","gsl_blas_drotmg","gsl_blas_dscal","gsl_blas_dsdot","gsl_blas_dswap","gsl_blas_dsymm","gsl_blas_dsymv","gsl_blas_dsyr","gsl_blas_dsyr2","gsl_blas_dsyr2k","gsl_blas_dsyrk","gsl_blas_dtrmm","gsl_blas_dtrmv","gsl_blas_dtrsm","gsl_blas_dtrsv","gsl_blas_dzasum","gsl_blas_dznrm2","gsl_blas_icamax","gsl_blas_idamax","gsl_blas_isamax","gsl_blas_izamax","gsl_blas_sasum","gsl_blas_saxpy","gsl_blas_scasum","gsl_blas_scnrm2","gsl_blas_scopy","gsl_blas_sdot","gsl_blas_sdsdot","gsl_blas_sgemm","gsl_blas_sgemv","gsl_blas_sger","gsl_blas_snrm2","gsl_blas_srot","gsl_blas_srotg","gsl_blas_srotm","gsl_blas_srotmg","gsl_blas_sscal","gsl_blas_sswap","gsl_blas_ssymm","gsl_blas_ssymv","gsl_blas_ssyr","gsl_blas_ssyr2","gsl_blas_ssyr2k","gsl_blas_ssyrk","gsl_blas_strmm","gsl_blas_strmv","gsl_blas_strsm","gsl_blas_strsv","gsl_blas_zaxpy","gsl_blas_zcopy","gsl_blas_zdotc","gsl_blas_zdotu","gsl_blas_zdscal","gsl_blas_zgemm","gsl_blas_zgemv","gsl_blas_zgerc","gsl_blas_zgeru","gsl_blas_zhemm","gsl_blas_zhemv","gsl_blas_zher","gsl_blas_zher2","gsl_blas_zher2k","gsl_blas_zherk","gsl_blas_zscal","gsl_blas_zswap","gsl_blas_zsymm","gsl_blas_zsyr2k","gsl_blas_zsyrk","gsl_blas_ztrmm","gsl_blas_ztrmv","gsl_blas_ztrsm","gsl_blas_ztrsv","gsl_block","gsl_block_alloc","gsl_block_calloc","gsl_block_char","gsl_block_char_alloc","gsl_block_char_calloc","gsl_block_char_data","gsl_block_char_fprintf","gsl_block_char_fread","gsl_block_char_free","gsl_block_char_fscanf","gsl_block_char_fwrite","gsl_block_char_raw_fprintf","gsl_block_char_raw_fread","gsl_block_char_raw_fscanf","gsl_block_char_raw_fwrite","gsl_block_char_size","gsl_block_char_struct","gsl_block_complex","gsl_block_complex_alloc","gsl_block_complex_calloc","gsl_block_complex_data","gsl_block_complex_float","gsl_block_complex_float_alloc","gsl_block_complex_float_calloc","gsl_block_complex_float_data","gsl_block_complex_float_fprintf","gsl_block_complex_float_fread","gsl_block_complex_float_free","gsl_block_complex_float_fscanf","gsl_block_complex_float_fwrite","gsl_block_complex_float_raw_fprintf","gsl_block_complex_float_raw_fread","gsl_block_complex_float_raw_fscanf","gsl_block_complex_float_raw_fwrite","gsl_block_complex_float_size","gsl_block_complex_float_struct","gsl_block_complex_fprintf","gsl_block_complex_fread","gsl_block_complex_free","gsl_block_complex_fscanf","gsl_block_complex_fwrite","gsl_block_complex_raw_fprintf","gsl_block_complex_raw_fread","gsl_block_complex_raw_fscanf","gsl_block_complex_raw_fwrite","gsl_block_complex_size","gsl_block_complex_struct","gsl_block_data","gsl_block_float","gsl_block_float_alloc","gsl_block_float_calloc","gsl_block_float_data","gsl_block_float_fprintf","gsl_block_float_fread","gsl_block_float_free","gsl_block_float_fscanf","gsl_block_float_fwrite","gsl_block_float_raw_fprintf","gsl_block_float_raw_fread","gsl_block_float_raw_fscanf","gsl_block_float_raw_fwrite","gsl_block_float_size","gsl_block_float_struct","gsl_block_fprintf","gsl_block_fread","gsl_block_free","gsl_block_fscanf","gsl_block_fwrite","gsl_block_int","gsl_block_int_alloc","gsl_block_int_calloc","gsl_block_int_data","gsl_block_int_fprintf","gsl_block_int_fread","gsl_block_int_free","gsl_block_int_fscanf","gsl_block_int_fwrite","gsl_block_int_raw_fprintf","gsl_block_int_raw_fread","gsl_block_int_raw_fscanf","gsl_block_int_raw_fwrite","gsl_block_int_size","gsl_block_int_struct","gsl_block_long","gsl_block_long_alloc","gsl_block_long_calloc","gsl_block_long_data","gsl_block_long_fprintf","gsl_block_long_fread","gsl_block_long_free","gsl_block_long_fscanf","gsl_block_long_fwrite","gsl_block_long_raw_fprintf","gsl_block_long_raw_fread","gsl_block_long_raw_fscanf","gsl_block_long_raw_fwrite","gsl_block_long_size","gsl_block_long_struct","gsl_block_raw_fprintf","gsl_block_raw_fread","gsl_block_raw_fscanf","gsl_block_raw_fwrite","gsl_block_short","gsl_block_short_alloc","gsl_block_short_calloc","gsl_block_short_data","gsl_block_short_fprintf","gsl_block_short_fread","gsl_block_short_free","gsl_block_short_fscanf","gsl_block_short_fwrite","gsl_block_short_raw_fprintf","gsl_block_short_raw_fread","gsl_block_short_raw_fscanf","gsl_block_short_raw_fwrite","gsl_block_short_size","gsl_block_short_struct","gsl_block_size","gsl_block_struct","gsl_block_uchar","gsl_block_uchar_alloc","gsl_block_uchar_calloc","gsl_block_uchar_data","gsl_block_uchar_fprintf","gsl_block_uchar_fread","gsl_block_uchar_free","gsl_block_uchar_fscanf","gsl_block_uchar_fwrite","gsl_block_uchar_raw_fprintf","gsl_block_uchar_raw_fread","gsl_block_uchar_raw_fscanf","gsl_block_uchar_raw_fwrite","gsl_block_uchar_size","gsl_block_uchar_struct","gsl_block_uint","gsl_block_uint_alloc","gsl_block_uint_calloc","gsl_block_uint_data","gsl_block_uint_fprintf","gsl_block_uint_fread","gsl_block_uint_free","gsl_block_uint_fscanf","gsl_block_uint_fwrite","gsl_block_uint_raw_fprintf","gsl_block_uint_raw_fread","gsl_block_uint_raw_fscanf","gsl_block_uint_raw_fwrite","gsl_block_uint_size","gsl_block_uint_struct","gsl_block_ulong","gsl_block_ulong_alloc","gsl_block_ulong_calloc","gsl_block_ulong_data","gsl_block_ulong_fprintf","gsl_block_ulong_fread","gsl_block_ulong_free","gsl_block_ulong_fscanf","gsl_block_ulong_fwrite","gsl_block_ulong_raw_fprintf","gsl_block_ulong_raw_fread","gsl_block_ulong_raw_fscanf","gsl_block_ulong_raw_fwrite","gsl_block_ulong_size","gsl_block_ulong_struct","gsl_block_ushort","gsl_block_ushort_alloc","gsl_block_ushort_calloc","gsl_block_ushort_data","gsl_block_ushort_fprintf","gsl_block_ushort_fread","gsl_block_ushort_free","gsl_block_ushort_fscanf","gsl_block_ushort_fwrite","gsl_block_ushort_raw_fprintf","gsl_block_ushort_raw_fread","gsl_block_ushort_raw_fscanf","gsl_block_ushort_raw_fwrite","gsl_block_ushort_size","gsl_block_ushort_struct","gsl_bspline_alloc","gsl_bspline_breakpoint","gsl_bspline_deriv_eval","gsl_bspline_deriv_eval_nonzero","gsl_bspline_eval","gsl_bspline_eval_nonzero","gsl_bspline_free","gsl_bspline_greville_abscissa","gsl_bspline_knots","gsl_bspline_knots_greville","gsl_bspline_knots_uniform","gsl_bspline_nbreak","gsl_bspline_ncoeffs","gsl_bspline_order","gsl_bspline_workspace","gsl_cdf_beta_P","gsl_cdf_beta_Pinv","gsl_cdf_beta_Q","gsl_cdf_beta_Qinv","gsl_cdf_binomial_P","gsl_cdf_binomial_Q","gsl_cdf_cauchy_P","gsl_cdf_cauchy_Pinv","gsl_cdf_cauchy_Q","gsl_cdf_cauchy_Qinv","gsl_cdf_chisq_P","gsl_cdf_chisq_Pinv","gsl_cdf_chisq_Q","gsl_cdf_chisq_Qinv","gsl_cdf_exponential_P","gsl_cdf_exponential_Pinv","gsl_cdf_exponential_Q","gsl_cdf_exponential_Qinv","gsl_cdf_exppow_P","gsl_cdf_exppow_Q","gsl_cdf_fdist_P","gsl_cdf_fdist_Pinv","gsl_cdf_fdist_Q","gsl_cdf_fdist_Qinv","gsl_cdf_flat_P","gsl_cdf_flat_Pinv","gsl_cdf_flat_Q","gsl_cdf_flat_Qinv","gsl_cdf_gamma_P","gsl_cdf_gamma_Pinv","gsl_cdf_gamma_Q","gsl_cdf_gamma_Qinv","gsl_cdf_gaussian_P","gsl_cdf_gaussian_Pinv","gsl_cdf_gaussian_Q","gsl_cdf_gaussian_Qinv","gsl_cdf_geometric_P","gsl_cdf_geometric_Q","gsl_cdf_gumbel1_P","gsl_cdf_gumbel1_Pinv","gsl_cdf_gumbel1_Q","gsl_cdf_gumbel1_Qinv","gsl_cdf_gumbel2_P","gsl_cdf_gumbel2_Pinv","gsl_cdf_gumbel2_Q","gsl_cdf_gumbel2_Qinv","gsl_cdf_hypergeometric_P","gsl_cdf_hypergeometric_Q","gsl_cdf_laplace_P","gsl_cdf_laplace_Pinv","gsl_cdf_laplace_Q","gsl_cdf_laplace_Qinv","gsl_cdf_logistic_P","gsl_cdf_logistic_Pinv","gsl_cdf_logistic_Q","gsl_cdf_logistic_Qinv","gsl_cdf_lognormal_P","gsl_cdf_lognormal_Pinv","gsl_cdf_lognormal_Q","gsl_cdf_lognormal_Qinv","gsl_cdf_negative_binomial_P","gsl_cdf_negative_binomial_Q","gsl_cdf_pareto_P","gsl_cdf_pareto_Pinv","gsl_cdf_pareto_Q","gsl_cdf_pareto_Qinv","gsl_cdf_pascal_P","gsl_cdf_pascal_Q","gsl_cdf_poisson_P","gsl_cdf_poisson_Q","gsl_cdf_rayleigh_P","gsl_cdf_rayleigh_Pinv","gsl_cdf_rayleigh_Q","gsl_cdf_rayleigh_Qinv","gsl_cdf_tdist_P","gsl_cdf_tdist_Pinv","gsl_cdf_tdist_Q","gsl_cdf_tdist_Qinv","gsl_cdf_ugaussian_P","gsl_cdf_ugaussian_Pinv","gsl_cdf_ugaussian_Q","gsl_cdf_ugaussian_Qinv","gsl_cdf_weibull_P","gsl_cdf_weibull_Pinv","gsl_cdf_weibull_Q","gsl_cdf_weibull_Qinv","gsl_check_range","gsl_coerce_double","gsl_coerce_float","gsl_complex","gsl_complex_float","gsl_complex_packed","gsl_complex_packed_array","gsl_complex_packed_array_float","gsl_complex_packed_float","gsl_complex_packed_float_ptr","gsl_complex_packed_ptr","gsl_const_complex_packed","gsl_const_complex_packed_array","gsl_const_complex_packed_array_float","gsl_const_complex_packed_float","gsl_const_complex_packed_float_ptr","gsl_const_complex_packed_ptr","gsl_eigen_francis","gsl_eigen_francis_T","gsl_eigen_francis_Z","gsl_eigen_francis_alloc","gsl_eigen_francis_free","gsl_eigen_francis_workspace","gsl_eigen_gen","gsl_eigen_gen_QZ","gsl_eigen_gen_alloc","gsl_eigen_gen_free","gsl_eigen_gen_params","gsl_eigen_gen_workspace","gsl_eigen_genherm","gsl_eigen_genherm_alloc","gsl_eigen_genherm_free","gsl_eigen_genherm_standardize","gsl_eigen_genherm_workspace","gsl_eigen_genhermv","gsl_eigen_genhermv_alloc","gsl_eigen_genhermv_free","gsl_eigen_genhermv_sort","gsl_eigen_genhermv_workspace","gsl_eigen_gensymm","gsl_eigen_gensymm_alloc","gsl_eigen_gensymm_free","gsl_eigen_gensymm_standardize","gsl_eigen_gensymm_workspace","gsl_eigen_gensymmv","gsl_eigen_gensymmv_alloc","gsl_eigen_gensymmv_free","gsl_eigen_gensymmv_sort","gsl_eigen_gensymmv_workspace","gsl_eigen_genv","gsl_eigen_genv_QZ","gsl_eigen_genv_alloc","gsl_eigen_genv_free","gsl_eigen_genv_sort","gsl_eigen_genv_workspace","gsl_eigen_herm","gsl_eigen_herm_alloc","gsl_eigen_herm_free","gsl_eigen_herm_workspace","gsl_eigen_hermv","gsl_eigen_hermv_alloc","gsl_eigen_hermv_free","gsl_eigen_hermv_sort","gsl_eigen_hermv_workspace","gsl_eigen_invert_jacobi","gsl_eigen_jacobi","gsl_eigen_nonsymm","gsl_eigen_nonsymm_Z","gsl_eigen_nonsymm_alloc","gsl_eigen_nonsymm_free","gsl_eigen_nonsymm_params","gsl_eigen_nonsymm_workspace","gsl_eigen_nonsymmv","gsl_eigen_nonsymmv_Z","gsl_eigen_nonsymmv_alloc","gsl_eigen_nonsymmv_free","gsl_eigen_nonsymmv_params","gsl_eigen_nonsymmv_sort","gsl_eigen_nonsymmv_workspace","gsl_eigen_sort_t","gsl_eigen_sort_t_GSL_EIGEN_SORT_ABS_ASC","gsl_eigen_sort_t_GSL_EIGEN_SORT_ABS_DESC","gsl_eigen_sort_t_GSL_EIGEN_SORT_VAL_ASC","gsl_eigen_sort_t_GSL_EIGEN_SORT_VAL_DESC","gsl_eigen_symm","gsl_eigen_symm_alloc","gsl_eigen_symm_free","gsl_eigen_symm_workspace","gsl_eigen_symmv","gsl_eigen_symmv_alloc","gsl_eigen_symmv_free","gsl_eigen_symmv_sort","gsl_eigen_symmv_workspace","gsl_error","gsl_error_handler_t","gsl_expm1","gsl_fcmp","gsl_fdiv","gsl_fft_direction","gsl_fft_direction_gsl_fft_backward","gsl_fft_direction_gsl_fft_forward","gsl_fft_real_radix2_transform","gsl_fft_real_transform","gsl_fft_real_unpack","gsl_fft_real_wavetable","gsl_fft_real_wavetable_alloc","gsl_fft_real_wavetable_free","gsl_fft_real_workspace","gsl_fft_real_workspace_alloc","gsl_fft_real_workspace_free","gsl_filter_end_t","gsl_filter_end_t_GSL_FILTER_END_PADVALUE","gsl_filter_end_t_GSL_FILTER_END_PADZERO","gsl_filter_end_t_GSL_FILTER_END_TRUNCATE","gsl_filter_gaussian","gsl_filter_gaussian_alloc","gsl_filter_gaussian_free","gsl_filter_gaussian_kernel","gsl_filter_gaussian_workspace","gsl_filter_impulse","gsl_filter_impulse_alloc","gsl_filter_impulse_free","gsl_filter_impulse_workspace","gsl_filter_median","gsl_filter_median_alloc","gsl_filter_median_free","gsl_filter_median_workspace","gsl_filter_rmedian","gsl_filter_rmedian_alloc","gsl_filter_rmedian_free","gsl_filter_rmedian_workspace","gsl_filter_scale_t","gsl_filter_scale_t_GSL_FILTER_SCALE_IQR","gsl_filter_scale_t_GSL_FILTER_SCALE_MAD","gsl_filter_scale_t_GSL_FILTER_SCALE_QN","gsl_filter_scale_t_GSL_FILTER_SCALE_SN","gsl_finite","gsl_frexp","gsl_function","gsl_function_fdf","gsl_function_fdf_struct","gsl_function_struct","gsl_function_vec","gsl_function_vec_struct","gsl_hypot","gsl_hypot3","gsl_integration_cquad","gsl_integration_cquad_ival","gsl_integration_cquad_workspace","gsl_integration_cquad_workspace_alloc","gsl_integration_cquad_workspace_free","gsl_integration_fixed","gsl_integration_fixed_alloc","gsl_integration_fixed_chebyshev","gsl_integration_fixed_chebyshev2","gsl_integration_fixed_exponential","gsl_integration_fixed_free","gsl_integration_fixed_gegenbauer","gsl_integration_fixed_hermite","gsl_integration_fixed_jacobi","gsl_integration_fixed_laguerre","gsl_integration_fixed_legendre","gsl_integration_fixed_n","gsl_integration_fixed_nodes","gsl_integration_fixed_params","gsl_integration_fixed_rational","gsl_integration_fixed_type","gsl_integration_fixed_weights","gsl_integration_fixed_workspace","gsl_integration_glfixed","gsl_integration_glfixed_point","gsl_integration_glfixed_table","gsl_integration_glfixed_table_alloc","gsl_integration_glfixed_table_free","gsl_integration_qag","gsl_integration_qagi","gsl_integration_qagil","gsl_integration_qagiu","gsl_integration_qagp","gsl_integration_qags","gsl_integration_qawc","gsl_integration_qawf","gsl_integration_qawo","gsl_integration_qawo_enum","gsl_integration_qawo_enum_GSL_INTEG_COSINE","gsl_integration_qawo_enum_GSL_INTEG_SINE","gsl_integration_qawo_table","gsl_integration_qawo_table_alloc","gsl_integration_qawo_table_free","gsl_integration_qawo_table_set","gsl_integration_qawo_table_set_length","gsl_integration_qaws","gsl_integration_qaws_table","gsl_integration_qaws_table_alloc","gsl_integration_qaws_table_free","gsl_integration_qaws_table_set","gsl_integration_qcheb","gsl_integration_qk","gsl_integration_qk15","gsl_integration_qk21","gsl_integration_qk31","gsl_integration_qk41","gsl_integration_qk51","gsl_integration_qk61","gsl_integration_qng","gsl_integration_romberg","gsl_integration_romberg_alloc","gsl_integration_romberg_free","gsl_integration_romberg_workspace","gsl_integration_rule","gsl_integration_workspace","gsl_integration_workspace_alloc","gsl_integration_workspace_free","gsl_interp","gsl_interp_accel","gsl_interp_accel_alloc","gsl_interp_accel_find","gsl_interp_accel_free","gsl_interp_accel_reset","gsl_interp_akima","gsl_interp_akima_periodic","gsl_interp_alloc","gsl_interp_bsearch","gsl_interp_cspline","gsl_interp_cspline_periodic","gsl_interp_eval","gsl_interp_eval_deriv","gsl_interp_eval_deriv2","gsl_interp_eval_deriv2_e","gsl_interp_eval_deriv_e","gsl_interp_eval_e","gsl_interp_eval_integ","gsl_interp_eval_integ_e","gsl_interp_free","gsl_interp_init","gsl_interp_linear","gsl_interp_min_size","gsl_interp_name","gsl_interp_polynomial","gsl_interp_steffen","gsl_interp_type","gsl_interp_type_min_size","gsl_isinf","gsl_isnan","gsl_ldexp","gsl_log1p","gsl_matrix","gsl_matrix_add","gsl_matrix_add_constant","gsl_matrix_add_diagonal","gsl_matrix_alloc","gsl_matrix_alloc_from_block","gsl_matrix_alloc_from_matrix","gsl_matrix_calloc","gsl_matrix_char","gsl_matrix_char_add","gsl_matrix_char_add_constant","gsl_matrix_char_add_diagonal","gsl_matrix_char_alloc","gsl_matrix_char_alloc_from_block","gsl_matrix_char_alloc_from_matrix","gsl_matrix_char_calloc","gsl_matrix_char_column","gsl_matrix_char_const_column","gsl_matrix_char_const_diagonal","gsl_matrix_char_const_ptr","gsl_matrix_char_const_row","gsl_matrix_char_const_subcolumn","gsl_matrix_char_const_subdiagonal","gsl_matrix_char_const_submatrix","gsl_matrix_char_const_subrow","gsl_matrix_char_const_superdiagonal","gsl_matrix_char_const_view","gsl_matrix_char_const_view_array","gsl_matrix_char_const_view_array_with_tda","gsl_matrix_char_const_view_vector","gsl_matrix_char_const_view_vector_with_tda","gsl_matrix_char_diagonal","gsl_matrix_char_div_elements","gsl_matrix_char_equal","gsl_matrix_char_fprintf","gsl_matrix_char_fread","gsl_matrix_char_free","gsl_matrix_char_fscanf","gsl_matrix_char_fwrite","gsl_matrix_char_get","gsl_matrix_char_get_col","gsl_matrix_char_get_row","gsl_matrix_char_isneg","gsl_matrix_char_isnonneg","gsl_matrix_char_isnull","gsl_matrix_char_ispos","gsl_matrix_char_max","gsl_matrix_char_max_index","gsl_matrix_char_memcpy","gsl_matrix_char_min","gsl_matrix_char_min_index","gsl_matrix_char_minmax","gsl_matrix_char_minmax_index","gsl_matrix_char_mul_elements","gsl_matrix_char_norm1","gsl_matrix_char_ptr","gsl_matrix_char_row","gsl_matrix_char_scale","gsl_matrix_char_scale_columns","gsl_matrix_char_scale_rows","gsl_matrix_char_set","gsl_matrix_char_set_all","gsl_matrix_char_set_col","gsl_matrix_char_set_identity","gsl_matrix_char_set_row","gsl_matrix_char_set_zero","gsl_matrix_char_sub","gsl_matrix_char_subcolumn","gsl_matrix_char_subdiagonal","gsl_matrix_char_submatrix","gsl_matrix_char_subrow","gsl_matrix_char_superdiagonal","gsl_matrix_char_swap","gsl_matrix_char_swap_columns","gsl_matrix_char_swap_rowcol","gsl_matrix_char_swap_rows","gsl_matrix_char_transpose","gsl_matrix_char_transpose_memcpy","gsl_matrix_char_transpose_tricpy","gsl_matrix_char_tricpy","gsl_matrix_char_view","gsl_matrix_char_view_array","gsl_matrix_char_view_array_with_tda","gsl_matrix_char_view_vector","gsl_matrix_char_view_vector_with_tda","gsl_matrix_column","gsl_matrix_complex","gsl_matrix_complex_add","gsl_matrix_complex_add_constant","gsl_matrix_complex_add_diagonal","gsl_matrix_complex_alloc","gsl_matrix_complex_alloc_from_block","gsl_matrix_complex_alloc_from_matrix","gsl_matrix_complex_calloc","gsl_matrix_complex_column","gsl_matrix_complex_conjtrans_memcpy","gsl_matrix_complex_const_column","gsl_matrix_complex_const_diagonal","gsl_matrix_complex_const_ptr","gsl_matrix_complex_const_row","gsl_matrix_complex_const_subcolumn","gsl_matrix_complex_const_subdiagonal","gsl_matrix_complex_const_submatrix","gsl_matrix_complex_const_subrow","gsl_matrix_complex_const_superdiagonal","gsl_matrix_complex_const_view","gsl_matrix_complex_const_view_array","gsl_matrix_complex_const_view_array_with_tda","gsl_matrix_complex_const_view_vector","gsl_matrix_complex_const_view_vector_with_tda","gsl_matrix_complex_diagonal","gsl_matrix_complex_div_elements","gsl_matrix_complex_equal","gsl_matrix_complex_float","gsl_matrix_complex_float_add","gsl_matrix_complex_float_add_constant","gsl_matrix_complex_float_add_diagonal","gsl_matrix_complex_float_alloc","gsl_matrix_complex_float_alloc_from_block","gsl_matrix_complex_float_alloc_from_matrix","gsl_matrix_complex_float_calloc","gsl_matrix_complex_float_column","gsl_matrix_complex_float_conjtrans_memcpy","gsl_matrix_complex_float_const_column","gsl_matrix_complex_float_const_diagonal","gsl_matrix_complex_float_const_ptr","gsl_matrix_complex_float_const_row","gsl_matrix_complex_float_const_subcolumn","gsl_matrix_complex_float_const_subdiagonal","gsl_matrix_complex_float_const_submatrix","gsl_matrix_complex_float_const_subrow","gsl_matrix_complex_float_const_superdiagonal","gsl_matrix_complex_float_const_view","gsl_matrix_complex_float_const_view_array","gsl_matrix_complex_float_const_view_array_with_tda","gsl_matrix_complex_float_const_view_vector","gsl_matrix_complex_float_const_view_vector_with_tda","gsl_matrix_complex_float_diagonal","gsl_matrix_complex_float_div_elements","gsl_matrix_complex_float_equal","gsl_matrix_complex_float_fprintf","gsl_matrix_complex_float_fread","gsl_matrix_complex_float_free","gsl_matrix_complex_float_fscanf","gsl_matrix_complex_float_fwrite","gsl_matrix_complex_float_get","gsl_matrix_complex_float_get_col","gsl_matrix_complex_float_get_row","gsl_matrix_complex_float_isneg","gsl_matrix_complex_float_isnonneg","gsl_matrix_complex_float_isnull","gsl_matrix_complex_float_ispos","gsl_matrix_complex_float_memcpy","gsl_matrix_complex_float_mul_elements","gsl_matrix_complex_float_ptr","gsl_matrix_complex_float_row","gsl_matrix_complex_float_scale","gsl_matrix_complex_float_scale_columns","gsl_matrix_complex_float_scale_rows","gsl_matrix_complex_float_set","gsl_matrix_complex_float_set_all","gsl_matrix_complex_float_set_col","gsl_matrix_complex_float_set_identity","gsl_matrix_complex_float_set_row","gsl_matrix_complex_float_set_zero","gsl_matrix_complex_float_sub","gsl_matrix_complex_float_subcolumn","gsl_matrix_complex_float_subdiagonal","gsl_matrix_complex_float_submatrix","gsl_matrix_complex_float_subrow","gsl_matrix_complex_float_superdiagonal","gsl_matrix_complex_float_swap","gsl_matrix_complex_float_swap_columns","gsl_matrix_complex_float_swap_rowcol","gsl_matrix_complex_float_swap_rows","gsl_matrix_complex_float_transpose","gsl_matrix_complex_float_transpose_memcpy","gsl_matrix_complex_float_transpose_tricpy","gsl_matrix_complex_float_tricpy","gsl_matrix_complex_float_view","gsl_matrix_complex_float_view_array","gsl_matrix_complex_float_view_array_with_tda","gsl_matrix_complex_float_view_vector","gsl_matrix_complex_float_view_vector_with_tda","gsl_matrix_complex_fprintf","gsl_matrix_complex_fread","gsl_matrix_complex_free","gsl_matrix_complex_fscanf","gsl_matrix_complex_fwrite","gsl_matrix_complex_get","gsl_matrix_complex_get_col","gsl_matrix_complex_get_row","gsl_matrix_complex_isneg","gsl_matrix_complex_isnonneg","gsl_matrix_complex_isnull","gsl_matrix_complex_ispos","gsl_matrix_complex_memcpy","gsl_matrix_complex_mul_elements","gsl_matrix_complex_ptr","gsl_matrix_complex_row","gsl_matrix_complex_scale","gsl_matrix_complex_scale_columns","gsl_matrix_complex_scale_rows","gsl_matrix_complex_set","gsl_matrix_complex_set_all","gsl_matrix_complex_set_col","gsl_matrix_complex_set_identity","gsl_matrix_complex_set_row","gsl_matrix_complex_set_zero","gsl_matrix_complex_sub","gsl_matrix_complex_subcolumn","gsl_matrix_complex_subdiagonal","gsl_matrix_complex_submatrix","gsl_matrix_complex_subrow","gsl_matrix_complex_superdiagonal","gsl_matrix_complex_swap","gsl_matrix_complex_swap_columns","gsl_matrix_complex_swap_rowcol","gsl_matrix_complex_swap_rows","gsl_matrix_complex_transpose","gsl_matrix_complex_transpose_memcpy","gsl_matrix_complex_transpose_tricpy","gsl_matrix_complex_tricpy","gsl_matrix_complex_view","gsl_matrix_complex_view_array","gsl_matrix_complex_view_array_with_tda","gsl_matrix_complex_view_vector","gsl_matrix_complex_view_vector_with_tda","gsl_matrix_const_column","gsl_matrix_const_diagonal","gsl_matrix_const_ptr","gsl_matrix_const_row","gsl_matrix_const_subcolumn","gsl_matrix_const_subdiagonal","gsl_matrix_const_submatrix","gsl_matrix_const_subrow","gsl_matrix_const_superdiagonal","gsl_matrix_const_view","gsl_matrix_const_view_array","gsl_matrix_const_view_array_with_tda","gsl_matrix_const_view_vector","gsl_matrix_const_view_vector_with_tda","gsl_matrix_diagonal","gsl_matrix_div_elements","gsl_matrix_equal","gsl_matrix_float","gsl_matrix_float_add","gsl_matrix_float_add_constant","gsl_matrix_float_add_diagonal","gsl_matrix_float_alloc","gsl_matrix_float_alloc_from_block","gsl_matrix_float_alloc_from_matrix","gsl_matrix_float_calloc","gsl_matrix_float_column","gsl_matrix_float_const_column","gsl_matrix_float_const_diagonal","gsl_matrix_float_const_ptr","gsl_matrix_float_const_row","gsl_matrix_float_const_subcolumn","gsl_matrix_float_const_subdiagonal","gsl_matrix_float_const_submatrix","gsl_matrix_float_const_subrow","gsl_matrix_float_const_superdiagonal","gsl_matrix_float_const_view","gsl_matrix_float_const_view_array","gsl_matrix_float_const_view_array_with_tda","gsl_matrix_float_const_view_vector","gsl_matrix_float_const_view_vector_with_tda","gsl_matrix_float_diagonal","gsl_matrix_float_div_elements","gsl_matrix_float_equal","gsl_matrix_float_fprintf","gsl_matrix_float_fread","gsl_matrix_float_free","gsl_matrix_float_fscanf","gsl_matrix_float_fwrite","gsl_matrix_float_get","gsl_matrix_float_get_col","gsl_matrix_float_get_row","gsl_matrix_float_isneg","gsl_matrix_float_isnonneg","gsl_matrix_float_isnull","gsl_matrix_float_ispos","gsl_matrix_float_max","gsl_matrix_float_max_index","gsl_matrix_float_memcpy","gsl_matrix_float_min","gsl_matrix_float_min_index","gsl_matrix_float_minmax","gsl_matrix_float_minmax_index","gsl_matrix_float_mul_elements","gsl_matrix_float_norm1","gsl_matrix_float_ptr","gsl_matrix_float_row","gsl_matrix_float_scale","gsl_matrix_float_scale_columns","gsl_matrix_float_scale_rows","gsl_matrix_float_set","gsl_matrix_float_set_all","gsl_matrix_float_set_col","gsl_matrix_float_set_identity","gsl_matrix_float_set_row","gsl_matrix_float_set_zero","gsl_matrix_float_sub","gsl_matrix_float_subcolumn","gsl_matrix_float_subdiagonal","gsl_matrix_float_submatrix","gsl_matrix_float_subrow","gsl_matrix_float_superdiagonal","gsl_matrix_float_swap","gsl_matrix_float_swap_columns","gsl_matrix_float_swap_rowcol","gsl_matrix_float_swap_rows","gsl_matrix_float_transpose","gsl_matrix_float_transpose_memcpy","gsl_matrix_float_transpose_tricpy","gsl_matrix_float_tricpy","gsl_matrix_float_view","gsl_matrix_float_view_array","gsl_matrix_float_view_array_with_tda","gsl_matrix_float_view_vector","gsl_matrix_float_view_vector_with_tda","gsl_matrix_fprintf","gsl_matrix_fread","gsl_matrix_free","gsl_matrix_fscanf","gsl_matrix_fwrite","gsl_matrix_get","gsl_matrix_get_col","gsl_matrix_get_row","gsl_matrix_int","gsl_matrix_int_add","gsl_matrix_int_add_constant","gsl_matrix_int_add_diagonal","gsl_matrix_int_alloc","gsl_matrix_int_alloc_from_block","gsl_matrix_int_alloc_from_matrix","gsl_matrix_int_calloc","gsl_matrix_int_column","gsl_matrix_int_const_column","gsl_matrix_int_const_diagonal","gsl_matrix_int_const_ptr","gsl_matrix_int_const_row","gsl_matrix_int_const_subcolumn","gsl_matrix_int_const_subdiagonal","gsl_matrix_int_const_submatrix","gsl_matrix_int_const_subrow","gsl_matrix_int_const_superdiagonal","gsl_matrix_int_const_view","gsl_matrix_int_const_view_array","gsl_matrix_int_const_view_array_with_tda","gsl_matrix_int_const_view_vector","gsl_matrix_int_const_view_vector_with_tda","gsl_matrix_int_diagonal","gsl_matrix_int_div_elements","gsl_matrix_int_equal","gsl_matrix_int_fprintf","gsl_matrix_int_fread","gsl_matrix_int_free","gsl_matrix_int_fscanf","gsl_matrix_int_fwrite","gsl_matrix_int_get","gsl_matrix_int_get_col","gsl_matrix_int_get_row","gsl_matrix_int_isneg","gsl_matrix_int_isnonneg","gsl_matrix_int_isnull","gsl_matrix_int_ispos","gsl_matrix_int_max","gsl_matrix_int_max_index","gsl_matrix_int_memcpy","gsl_matrix_int_min","gsl_matrix_int_min_index","gsl_matrix_int_minmax","gsl_matrix_int_minmax_index","gsl_matrix_int_mul_elements","gsl_matrix_int_norm1","gsl_matrix_int_ptr","gsl_matrix_int_row","gsl_matrix_int_scale","gsl_matrix_int_scale_columns","gsl_matrix_int_scale_rows","gsl_matrix_int_set","gsl_matrix_int_set_all","gsl_matrix_int_set_col","gsl_matrix_int_set_identity","gsl_matrix_int_set_row","gsl_matrix_int_set_zero","gsl_matrix_int_sub","gsl_matrix_int_subcolumn","gsl_matrix_int_subdiagonal","gsl_matrix_int_submatrix","gsl_matrix_int_subrow","gsl_matrix_int_superdiagonal","gsl_matrix_int_swap","gsl_matrix_int_swap_columns","gsl_matrix_int_swap_rowcol","gsl_matrix_int_swap_rows","gsl_matrix_int_transpose","gsl_matrix_int_transpose_memcpy","gsl_matrix_int_transpose_tricpy","gsl_matrix_int_tricpy","gsl_matrix_int_view","gsl_matrix_int_view_array","gsl_matrix_int_view_array_with_tda","gsl_matrix_int_view_vector","gsl_matrix_int_view_vector_with_tda","gsl_matrix_isneg","gsl_matrix_isnonneg","gsl_matrix_isnull","gsl_matrix_ispos","gsl_matrix_long","gsl_matrix_long_add","gsl_matrix_long_add_constant","gsl_matrix_long_add_diagonal","gsl_matrix_long_alloc","gsl_matrix_long_alloc_from_block","gsl_matrix_long_alloc_from_matrix","gsl_matrix_long_calloc","gsl_matrix_long_column","gsl_matrix_long_const_column","gsl_matrix_long_const_diagonal","gsl_matrix_long_const_ptr","gsl_matrix_long_const_row","gsl_matrix_long_const_subcolumn","gsl_matrix_long_const_subdiagonal","gsl_matrix_long_const_submatrix","gsl_matrix_long_const_subrow","gsl_matrix_long_const_superdiagonal","gsl_matrix_long_const_view","gsl_matrix_long_const_view_array","gsl_matrix_long_const_view_array_with_tda","gsl_matrix_long_const_view_vector","gsl_matrix_long_const_view_vector_with_tda","gsl_matrix_long_diagonal","gsl_matrix_long_div_elements","gsl_matrix_long_equal","gsl_matrix_long_fprintf","gsl_matrix_long_fread","gsl_matrix_long_free","gsl_matrix_long_fscanf","gsl_matrix_long_fwrite","gsl_matrix_long_get","gsl_matrix_long_get_col","gsl_matrix_long_get_row","gsl_matrix_long_isneg","gsl_matrix_long_isnonneg","gsl_matrix_long_isnull","gsl_matrix_long_ispos","gsl_matrix_long_max","gsl_matrix_long_max_index","gsl_matrix_long_memcpy","gsl_matrix_long_min","gsl_matrix_long_min_index","gsl_matrix_long_minmax","gsl_matrix_long_minmax_index","gsl_matrix_long_mul_elements","gsl_matrix_long_norm1","gsl_matrix_long_ptr","gsl_matrix_long_row","gsl_matrix_long_scale","gsl_matrix_long_scale_columns","gsl_matrix_long_scale_rows","gsl_matrix_long_set","gsl_matrix_long_set_all","gsl_matrix_long_set_col","gsl_matrix_long_set_identity","gsl_matrix_long_set_row","gsl_matrix_long_set_zero","gsl_matrix_long_sub","gsl_matrix_long_subcolumn","gsl_matrix_long_subdiagonal","gsl_matrix_long_submatrix","gsl_matrix_long_subrow","gsl_matrix_long_superdiagonal","gsl_matrix_long_swap","gsl_matrix_long_swap_columns","gsl_matrix_long_swap_rowcol","gsl_matrix_long_swap_rows","gsl_matrix_long_transpose","gsl_matrix_long_transpose_memcpy","gsl_matrix_long_transpose_tricpy","gsl_matrix_long_tricpy","gsl_matrix_long_view","gsl_matrix_long_view_array","gsl_matrix_long_view_array_with_tda","gsl_matrix_long_view_vector","gsl_matrix_long_view_vector_with_tda","gsl_matrix_max","gsl_matrix_max_index","gsl_matrix_memcpy","gsl_matrix_min","gsl_matrix_min_index","gsl_matrix_minmax","gsl_matrix_minmax_index","gsl_matrix_mul_elements","gsl_matrix_norm1","gsl_matrix_ptr","gsl_matrix_row","gsl_matrix_scale","gsl_matrix_scale_columns","gsl_matrix_scale_rows","gsl_matrix_set","gsl_matrix_set_all","gsl_matrix_set_col","gsl_matrix_set_identity","gsl_matrix_set_row","gsl_matrix_set_zero","gsl_matrix_short","gsl_matrix_short_add","gsl_matrix_short_add_constant","gsl_matrix_short_add_diagonal","gsl_matrix_short_alloc","gsl_matrix_short_alloc_from_block","gsl_matrix_short_alloc_from_matrix","gsl_matrix_short_calloc","gsl_matrix_short_column","gsl_matrix_short_const_column","gsl_matrix_short_const_diagonal","gsl_matrix_short_const_ptr","gsl_matrix_short_const_row","gsl_matrix_short_const_subcolumn","gsl_matrix_short_const_subdiagonal","gsl_matrix_short_const_submatrix","gsl_matrix_short_const_subrow","gsl_matrix_short_const_superdiagonal","gsl_matrix_short_const_view","gsl_matrix_short_const_view_array","gsl_matrix_short_const_view_array_with_tda","gsl_matrix_short_const_view_vector","gsl_matrix_short_const_view_vector_with_tda","gsl_matrix_short_diagonal","gsl_matrix_short_div_elements","gsl_matrix_short_equal","gsl_matrix_short_fprintf","gsl_matrix_short_fread","gsl_matrix_short_free","gsl_matrix_short_fscanf","gsl_matrix_short_fwrite","gsl_matrix_short_get","gsl_matrix_short_get_col","gsl_matrix_short_get_row","gsl_matrix_short_isneg","gsl_matrix_short_isnonneg","gsl_matrix_short_isnull","gsl_matrix_short_ispos","gsl_matrix_short_max","gsl_matrix_short_max_index","gsl_matrix_short_memcpy","gsl_matrix_short_min","gsl_matrix_short_min_index","gsl_matrix_short_minmax","gsl_matrix_short_minmax_index","gsl_matrix_short_mul_elements","gsl_matrix_short_norm1","gsl_matrix_short_ptr","gsl_matrix_short_row","gsl_matrix_short_scale","gsl_matrix_short_scale_columns","gsl_matrix_short_scale_rows","gsl_matrix_short_set","gsl_matrix_short_set_all","gsl_matrix_short_set_col","gsl_matrix_short_set_identity","gsl_matrix_short_set_row","gsl_matrix_short_set_zero","gsl_matrix_short_sub","gsl_matrix_short_subcolumn","gsl_matrix_short_subdiagonal","gsl_matrix_short_submatrix","gsl_matrix_short_subrow","gsl_matrix_short_superdiagonal","gsl_matrix_short_swap","gsl_matrix_short_swap_columns","gsl_matrix_short_swap_rowcol","gsl_matrix_short_swap_rows","gsl_matrix_short_transpose","gsl_matrix_short_transpose_memcpy","gsl_matrix_short_transpose_tricpy","gsl_matrix_short_tricpy","gsl_matrix_short_view","gsl_matrix_short_view_array","gsl_matrix_short_view_array_with_tda","gsl_matrix_short_view_vector","gsl_matrix_short_view_vector_with_tda","gsl_matrix_sub","gsl_matrix_subcolumn","gsl_matrix_subdiagonal","gsl_matrix_submatrix","gsl_matrix_subrow","gsl_matrix_superdiagonal","gsl_matrix_swap","gsl_matrix_swap_columns","gsl_matrix_swap_rowcol","gsl_matrix_swap_rows","gsl_matrix_transpose","gsl_matrix_transpose_memcpy","gsl_matrix_transpose_tricpy","gsl_matrix_tricpy","gsl_matrix_uchar","gsl_matrix_uchar_add","gsl_matrix_uchar_add_constant","gsl_matrix_uchar_add_diagonal","gsl_matrix_uchar_alloc","gsl_matrix_uchar_alloc_from_block","gsl_matrix_uchar_alloc_from_matrix","gsl_matrix_uchar_calloc","gsl_matrix_uchar_column","gsl_matrix_uchar_const_column","gsl_matrix_uchar_const_diagonal","gsl_matrix_uchar_const_ptr","gsl_matrix_uchar_const_row","gsl_matrix_uchar_const_subcolumn","gsl_matrix_uchar_const_subdiagonal","gsl_matrix_uchar_const_submatrix","gsl_matrix_uchar_const_subrow","gsl_matrix_uchar_const_superdiagonal","gsl_matrix_uchar_const_view","gsl_matrix_uchar_const_view_array","gsl_matrix_uchar_const_view_array_with_tda","gsl_matrix_uchar_const_view_vector","gsl_matrix_uchar_const_view_vector_with_tda","gsl_matrix_uchar_diagonal","gsl_matrix_uchar_div_elements","gsl_matrix_uchar_equal","gsl_matrix_uchar_fprintf","gsl_matrix_uchar_fread","gsl_matrix_uchar_free","gsl_matrix_uchar_fscanf","gsl_matrix_uchar_fwrite","gsl_matrix_uchar_get","gsl_matrix_uchar_get_col","gsl_matrix_uchar_get_row","gsl_matrix_uchar_isneg","gsl_matrix_uchar_isnonneg","gsl_matrix_uchar_isnull","gsl_matrix_uchar_ispos","gsl_matrix_uchar_max","gsl_matrix_uchar_max_index","gsl_matrix_uchar_memcpy","gsl_matrix_uchar_min","gsl_matrix_uchar_min_index","gsl_matrix_uchar_minmax","gsl_matrix_uchar_minmax_index","gsl_matrix_uchar_mul_elements","gsl_matrix_uchar_norm1","gsl_matrix_uchar_ptr","gsl_matrix_uchar_row","gsl_matrix_uchar_scale","gsl_matrix_uchar_scale_columns","gsl_matrix_uchar_scale_rows","gsl_matrix_uchar_set","gsl_matrix_uchar_set_all","gsl_matrix_uchar_set_col","gsl_matrix_uchar_set_identity","gsl_matrix_uchar_set_row","gsl_matrix_uchar_set_zero","gsl_matrix_uchar_sub","gsl_matrix_uchar_subcolumn","gsl_matrix_uchar_subdiagonal","gsl_matrix_uchar_submatrix","gsl_matrix_uchar_subrow","gsl_matrix_uchar_superdiagonal","gsl_matrix_uchar_swap","gsl_matrix_uchar_swap_columns","gsl_matrix_uchar_swap_rowcol","gsl_matrix_uchar_swap_rows","gsl_matrix_uchar_transpose","gsl_matrix_uchar_transpose_memcpy","gsl_matrix_uchar_transpose_tricpy","gsl_matrix_uchar_tricpy","gsl_matrix_uchar_view","gsl_matrix_uchar_view_array","gsl_matrix_uchar_view_array_with_tda","gsl_matrix_uchar_view_vector","gsl_matrix_uchar_view_vector_with_tda","gsl_matrix_uint","gsl_matrix_uint_add","gsl_matrix_uint_add_constant","gsl_matrix_uint_add_diagonal","gsl_matrix_uint_alloc","gsl_matrix_uint_alloc_from_block","gsl_matrix_uint_alloc_from_matrix","gsl_matrix_uint_calloc","gsl_matrix_uint_column","gsl_matrix_uint_const_column","gsl_matrix_uint_const_diagonal","gsl_matrix_uint_const_ptr","gsl_matrix_uint_const_row","gsl_matrix_uint_const_subcolumn","gsl_matrix_uint_const_subdiagonal","gsl_matrix_uint_const_submatrix","gsl_matrix_uint_const_subrow","gsl_matrix_uint_const_superdiagonal","gsl_matrix_uint_const_view","gsl_matrix_uint_const_view_array","gsl_matrix_uint_const_view_array_with_tda","gsl_matrix_uint_const_view_vector","gsl_matrix_uint_const_view_vector_with_tda","gsl_matrix_uint_diagonal","gsl_matrix_uint_div_elements","gsl_matrix_uint_equal","gsl_matrix_uint_fprintf","gsl_matrix_uint_fread","gsl_matrix_uint_free","gsl_matrix_uint_fscanf","gsl_matrix_uint_fwrite","gsl_matrix_uint_get","gsl_matrix_uint_get_col","gsl_matrix_uint_get_row","gsl_matrix_uint_isneg","gsl_matrix_uint_isnonneg","gsl_matrix_uint_isnull","gsl_matrix_uint_ispos","gsl_matrix_uint_max","gsl_matrix_uint_max_index","gsl_matrix_uint_memcpy","gsl_matrix_uint_min","gsl_matrix_uint_min_index","gsl_matrix_uint_minmax","gsl_matrix_uint_minmax_index","gsl_matrix_uint_mul_elements","gsl_matrix_uint_norm1","gsl_matrix_uint_ptr","gsl_matrix_uint_row","gsl_matrix_uint_scale","gsl_matrix_uint_scale_columns","gsl_matrix_uint_scale_rows","gsl_matrix_uint_set","gsl_matrix_uint_set_all","gsl_matrix_uint_set_col","gsl_matrix_uint_set_identity","gsl_matrix_uint_set_row","gsl_matrix_uint_set_zero","gsl_matrix_uint_sub","gsl_matrix_uint_subcolumn","gsl_matrix_uint_subdiagonal","gsl_matrix_uint_submatrix","gsl_matrix_uint_subrow","gsl_matrix_uint_superdiagonal","gsl_matrix_uint_swap","gsl_matrix_uint_swap_columns","gsl_matrix_uint_swap_rowcol","gsl_matrix_uint_swap_rows","gsl_matrix_uint_transpose","gsl_matrix_uint_transpose_memcpy","gsl_matrix_uint_transpose_tricpy","gsl_matrix_uint_tricpy","gsl_matrix_uint_view","gsl_matrix_uint_view_array","gsl_matrix_uint_view_array_with_tda","gsl_matrix_uint_view_vector","gsl_matrix_uint_view_vector_with_tda","gsl_matrix_ulong","gsl_matrix_ulong_add","gsl_matrix_ulong_add_constant","gsl_matrix_ulong_add_diagonal","gsl_matrix_ulong_alloc","gsl_matrix_ulong_alloc_from_block","gsl_matrix_ulong_alloc_from_matrix","gsl_matrix_ulong_calloc","gsl_matrix_ulong_column","gsl_matrix_ulong_const_column","gsl_matrix_ulong_const_diagonal","gsl_matrix_ulong_const_ptr","gsl_matrix_ulong_const_row","gsl_matrix_ulong_const_subcolumn","gsl_matrix_ulong_const_subdiagonal","gsl_matrix_ulong_const_submatrix","gsl_matrix_ulong_const_subrow","gsl_matrix_ulong_const_superdiagonal","gsl_matrix_ulong_const_view","gsl_matrix_ulong_const_view_array","gsl_matrix_ulong_const_view_array_with_tda","gsl_matrix_ulong_const_view_vector","gsl_matrix_ulong_const_view_vector_with_tda","gsl_matrix_ulong_diagonal","gsl_matrix_ulong_div_elements","gsl_matrix_ulong_equal","gsl_matrix_ulong_fprintf","gsl_matrix_ulong_fread","gsl_matrix_ulong_free","gsl_matrix_ulong_fscanf","gsl_matrix_ulong_fwrite","gsl_matrix_ulong_get","gsl_matrix_ulong_get_col","gsl_matrix_ulong_get_row","gsl_matrix_ulong_isneg","gsl_matrix_ulong_isnonneg","gsl_matrix_ulong_isnull","gsl_matrix_ulong_ispos","gsl_matrix_ulong_max","gsl_matrix_ulong_max_index","gsl_matrix_ulong_memcpy","gsl_matrix_ulong_min","gsl_matrix_ulong_min_index","gsl_matrix_ulong_minmax","gsl_matrix_ulong_minmax_index","gsl_matrix_ulong_mul_elements","gsl_matrix_ulong_norm1","gsl_matrix_ulong_ptr","gsl_matrix_ulong_row","gsl_matrix_ulong_scale","gsl_matrix_ulong_scale_columns","gsl_matrix_ulong_scale_rows","gsl_matrix_ulong_set","gsl_matrix_ulong_set_all","gsl_matrix_ulong_set_col","gsl_matrix_ulong_set_identity","gsl_matrix_ulong_set_row","gsl_matrix_ulong_set_zero","gsl_matrix_ulong_sub","gsl_matrix_ulong_subcolumn","gsl_matrix_ulong_subdiagonal","gsl_matrix_ulong_submatrix","gsl_matrix_ulong_subrow","gsl_matrix_ulong_superdiagonal","gsl_matrix_ulong_swap","gsl_matrix_ulong_swap_columns","gsl_matrix_ulong_swap_rowcol","gsl_matrix_ulong_swap_rows","gsl_matrix_ulong_transpose","gsl_matrix_ulong_transpose_memcpy","gsl_matrix_ulong_transpose_tricpy","gsl_matrix_ulong_tricpy","gsl_matrix_ulong_view","gsl_matrix_ulong_view_array","gsl_matrix_ulong_view_array_with_tda","gsl_matrix_ulong_view_vector","gsl_matrix_ulong_view_vector_with_tda","gsl_matrix_ushort","gsl_matrix_ushort_add","gsl_matrix_ushort_add_constant","gsl_matrix_ushort_add_diagonal","gsl_matrix_ushort_alloc","gsl_matrix_ushort_alloc_from_block","gsl_matrix_ushort_alloc_from_matrix","gsl_matrix_ushort_calloc","gsl_matrix_ushort_column","gsl_matrix_ushort_const_column","gsl_matrix_ushort_const_diagonal","gsl_matrix_ushort_const_ptr","gsl_matrix_ushort_const_row","gsl_matrix_ushort_const_subcolumn","gsl_matrix_ushort_const_subdiagonal","gsl_matrix_ushort_const_submatrix","gsl_matrix_ushort_const_subrow","gsl_matrix_ushort_const_superdiagonal","gsl_matrix_ushort_const_view","gsl_matrix_ushort_const_view_array","gsl_matrix_ushort_const_view_array_with_tda","gsl_matrix_ushort_const_view_vector","gsl_matrix_ushort_const_view_vector_with_tda","gsl_matrix_ushort_diagonal","gsl_matrix_ushort_div_elements","gsl_matrix_ushort_equal","gsl_matrix_ushort_fprintf","gsl_matrix_ushort_fread","gsl_matrix_ushort_free","gsl_matrix_ushort_fscanf","gsl_matrix_ushort_fwrite","gsl_matrix_ushort_get","gsl_matrix_ushort_get_col","gsl_matrix_ushort_get_row","gsl_matrix_ushort_isneg","gsl_matrix_ushort_isnonneg","gsl_matrix_ushort_isnull","gsl_matrix_ushort_ispos","gsl_matrix_ushort_max","gsl_matrix_ushort_max_index","gsl_matrix_ushort_memcpy","gsl_matrix_ushort_min","gsl_matrix_ushort_min_index","gsl_matrix_ushort_minmax","gsl_matrix_ushort_minmax_index","gsl_matrix_ushort_mul_elements","gsl_matrix_ushort_norm1","gsl_matrix_ushort_ptr","gsl_matrix_ushort_row","gsl_matrix_ushort_scale","gsl_matrix_ushort_scale_columns","gsl_matrix_ushort_scale_rows","gsl_matrix_ushort_set","gsl_matrix_ushort_set_all","gsl_matrix_ushort_set_col","gsl_matrix_ushort_set_identity","gsl_matrix_ushort_set_row","gsl_matrix_ushort_set_zero","gsl_matrix_ushort_sub","gsl_matrix_ushort_subcolumn","gsl_matrix_ushort_subdiagonal","gsl_matrix_ushort_submatrix","gsl_matrix_ushort_subrow","gsl_matrix_ushort_superdiagonal","gsl_matrix_ushort_swap","gsl_matrix_ushort_swap_columns","gsl_matrix_ushort_swap_rowcol","gsl_matrix_ushort_swap_rows","gsl_matrix_ushort_transpose","gsl_matrix_ushort_transpose_memcpy","gsl_matrix_ushort_transpose_tricpy","gsl_matrix_ushort_tricpy","gsl_matrix_ushort_view","gsl_matrix_ushort_view_array","gsl_matrix_ushort_view_array_with_tda","gsl_matrix_ushort_view_vector","gsl_matrix_ushort_view_vector_with_tda","gsl_matrix_view","gsl_matrix_view_array","gsl_matrix_view_array_with_tda","gsl_matrix_view_vector","gsl_matrix_view_vector_with_tda","gsl_max","gsl_min","gsl_min_bracketing_function","gsl_min_find_bracket","gsl_min_fminimizer","gsl_min_fminimizer_alloc","gsl_min_fminimizer_brent","gsl_min_fminimizer_f_lower","gsl_min_fminimizer_f_minimum","gsl_min_fminimizer_f_upper","gsl_min_fminimizer_free","gsl_min_fminimizer_goldensection","gsl_min_fminimizer_iterate","gsl_min_fminimizer_minimum","gsl_min_fminimizer_name","gsl_min_fminimizer_quad_golden","gsl_min_fminimizer_set","gsl_min_fminimizer_set_with_values","gsl_min_fminimizer_type","gsl_min_fminimizer_x_lower","gsl_min_fminimizer_x_minimum","gsl_min_fminimizer_x_upper","gsl_min_test_interval","gsl_mode_t","gsl_movstat_Qn","gsl_movstat_Sn","gsl_movstat_accum","gsl_movstat_accum_Qn","gsl_movstat_accum_Sn","gsl_movstat_accum_mad","gsl_movstat_accum_max","gsl_movstat_accum_mean","gsl_movstat_accum_median","gsl_movstat_accum_min","gsl_movstat_accum_minmax","gsl_movstat_accum_qqr","gsl_movstat_accum_sd","gsl_movstat_accum_sum","gsl_movstat_accum_userfunc","gsl_movstat_accum_variance","gsl_movstat_alloc","gsl_movstat_alloc2","gsl_movstat_alloc_with_size","gsl_movstat_apply","gsl_movstat_apply_accum","gsl_movstat_end_t","gsl_movstat_end_t_GSL_MOVSTAT_END_PADVALUE","gsl_movstat_end_t_GSL_MOVSTAT_END_PADZERO","gsl_movstat_end_t_GSL_MOVSTAT_END_TRUNCATE","gsl_movstat_fill","gsl_movstat_free","gsl_movstat_function","gsl_movstat_mad","gsl_movstat_mad0","gsl_movstat_max","gsl_movstat_mean","gsl_movstat_median","gsl_movstat_min","gsl_movstat_minmax","gsl_movstat_qqr","gsl_movstat_sd","gsl_movstat_sum","gsl_movstat_variance","gsl_movstat_workspace","gsl_multifit_linear","gsl_multifit_linear_L_decomp","gsl_multifit_linear_Lk","gsl_multifit_linear_Lsobolev","gsl_multifit_linear_alloc","gsl_multifit_linear_applyW","gsl_multifit_linear_bsvd","gsl_multifit_linear_est","gsl_multifit_linear_free","gsl_multifit_linear_gcv","gsl_multifit_linear_gcv_calc","gsl_multifit_linear_gcv_curve","gsl_multifit_linear_gcv_init","gsl_multifit_linear_gcv_min","gsl_multifit_linear_genform1","gsl_multifit_linear_genform2","gsl_multifit_linear_lcorner","gsl_multifit_linear_lcorner2","gsl_multifit_linear_lcurvature","gsl_multifit_linear_lcurve","gsl_multifit_linear_lreg","gsl_multifit_linear_rank","gsl_multifit_linear_rcond","gsl_multifit_linear_residuals","gsl_multifit_linear_solve","gsl_multifit_linear_stdform1","gsl_multifit_linear_stdform2","gsl_multifit_linear_svd","gsl_multifit_linear_tsvd","gsl_multifit_linear_wgenform2","gsl_multifit_linear_workspace","gsl_multifit_linear_wstdform1","gsl_multifit_linear_wstdform2","gsl_multifit_nlinear_alloc","gsl_multifit_nlinear_avratio","gsl_multifit_nlinear_covar","gsl_multifit_nlinear_default_parameters","gsl_multifit_nlinear_df","gsl_multifit_nlinear_driver","gsl_multifit_nlinear_eval_df","gsl_multifit_nlinear_eval_f","gsl_multifit_nlinear_eval_fvv","gsl_multifit_nlinear_fdf","gsl_multifit_nlinear_fdfvv","gsl_multifit_nlinear_fdtype","gsl_multifit_nlinear_fdtype_GSL_MULTIFIT_NLINEAR_CTRDIFF","gsl_multifit_nlinear_fdtype_GSL_MULTIFIT_NLINEAR_FWDIFF","gsl_multifit_nlinear_free","gsl_multifit_nlinear_init","gsl_multifit_nlinear_iterate","gsl_multifit_nlinear_jac","gsl_multifit_nlinear_name","gsl_multifit_nlinear_niter","gsl_multifit_nlinear_parameters","gsl_multifit_nlinear_position","gsl_multifit_nlinear_rcond","gsl_multifit_nlinear_residual","gsl_multifit_nlinear_scale","gsl_multifit_nlinear_scale_levenberg","gsl_multifit_nlinear_scale_marquardt","gsl_multifit_nlinear_scale_more","gsl_multifit_nlinear_solver","gsl_multifit_nlinear_solver_cholesky","gsl_multifit_nlinear_solver_mcholesky","gsl_multifit_nlinear_solver_qr","gsl_multifit_nlinear_solver_svd","gsl_multifit_nlinear_test","gsl_multifit_nlinear_trs","gsl_multifit_nlinear_trs_ddogleg","gsl_multifit_nlinear_trs_dogleg","gsl_multifit_nlinear_trs_lm","gsl_multifit_nlinear_trs_lmaccel","gsl_multifit_nlinear_trs_name","gsl_multifit_nlinear_trs_subspace2D","gsl_multifit_nlinear_trust","gsl_multifit_nlinear_trust_state","gsl_multifit_nlinear_type","gsl_multifit_nlinear_winit","gsl_multifit_nlinear_workspace","gsl_multifit_robust","gsl_multifit_robust_alloc","gsl_multifit_robust_bisquare","gsl_multifit_robust_cauchy","gsl_multifit_robust_default","gsl_multifit_robust_est","gsl_multifit_robust_fair","gsl_multifit_robust_free","gsl_multifit_robust_huber","gsl_multifit_robust_maxiter","gsl_multifit_robust_name","gsl_multifit_robust_ols","gsl_multifit_robust_residuals","gsl_multifit_robust_statistics","gsl_multifit_robust_stats","gsl_multifit_robust_tune","gsl_multifit_robust_type","gsl_multifit_robust_weights","gsl_multifit_robust_welsch","gsl_multifit_robust_workspace","gsl_multifit_wlinear","gsl_multifit_wlinear_svd","gsl_multifit_wlinear_tsvd","gsl_multifit_wlinear_usvd","gsl_nan","gsl_neginf","gsl_permutation","gsl_permutation_alloc","gsl_permutation_calloc","gsl_permutation_canonical_cycles","gsl_permutation_canonical_to_linear","gsl_permutation_data","gsl_permutation_fprintf","gsl_permutation_fread","gsl_permutation_free","gsl_permutation_fscanf","gsl_permutation_fwrite","gsl_permutation_get","gsl_permutation_init","gsl_permutation_inverse","gsl_permutation_inversions","gsl_permutation_linear_cycles","gsl_permutation_linear_to_canonical","gsl_permutation_memcpy","gsl_permutation_mul","gsl_permutation_next","gsl_permutation_prev","gsl_permutation_reverse","gsl_permutation_size","gsl_permutation_struct","gsl_permutation_swap","gsl_permutation_valid","gsl_posinf","gsl_pow_2","gsl_pow_3","gsl_pow_4","gsl_pow_5","gsl_pow_6","gsl_pow_7","gsl_pow_8","gsl_pow_9","gsl_pow_int","gsl_pow_uint","gsl_prec_eps","gsl_prec_root3_eps","gsl_prec_root4_eps","gsl_prec_root5_eps","gsl_prec_root6_eps","gsl_prec_sqrt_eps","gsl_prec_t","gsl_ran_bernoulli","gsl_ran_bernoulli_pdf","gsl_ran_beta","gsl_ran_beta_pdf","gsl_ran_binomial","gsl_ran_binomial_knuth","gsl_ran_binomial_pdf","gsl_ran_binomial_tpe","gsl_ran_bivariate_gaussian","gsl_ran_bivariate_gaussian_pdf","gsl_ran_cauchy","gsl_ran_cauchy_pdf","gsl_ran_chisq","gsl_ran_chisq_pdf","gsl_ran_choose","gsl_ran_dir_2d","gsl_ran_dir_2d_trig_method","gsl_ran_dir_3d","gsl_ran_dir_nd","gsl_ran_dirichlet","gsl_ran_dirichlet_lnpdf","gsl_ran_dirichlet_pdf","gsl_ran_discrete","gsl_ran_discrete_free","gsl_ran_discrete_pdf","gsl_ran_discrete_preproc","gsl_ran_discrete_t","gsl_ran_erlang","gsl_ran_erlang_pdf","gsl_ran_exponential","gsl_ran_exponential_pdf","gsl_ran_exppow","gsl_ran_exppow_pdf","gsl_ran_fdist","gsl_ran_fdist_pdf","gsl_ran_flat","gsl_ran_flat_pdf","gsl_ran_gamma","gsl_ran_gamma_int","gsl_ran_gamma_knuth","gsl_ran_gamma_mt","gsl_ran_gamma_pdf","gsl_ran_gaussian","gsl_ran_gaussian_pdf","gsl_ran_gaussian_ratio_method","gsl_ran_gaussian_tail","gsl_ran_gaussian_tail_pdf","gsl_ran_gaussian_ziggurat","gsl_ran_geometric","gsl_ran_geometric_pdf","gsl_ran_gumbel1","gsl_ran_gumbel1_pdf","gsl_ran_gumbel2","gsl_ran_gumbel2_pdf","gsl_ran_hypergeometric","gsl_ran_hypergeometric_pdf","gsl_ran_landau","gsl_ran_landau_pdf","gsl_ran_laplace","gsl_ran_laplace_pdf","gsl_ran_levy","gsl_ran_levy_skew","gsl_ran_logarithmic","gsl_ran_logarithmic_pdf","gsl_ran_logistic","gsl_ran_logistic_pdf","gsl_ran_lognormal","gsl_ran_lognormal_pdf","gsl_ran_multinomial","gsl_ran_multinomial_lnpdf","gsl_ran_multinomial_pdf","gsl_ran_multivariate_gaussian","gsl_ran_multivariate_gaussian_log_pdf","gsl_ran_multivariate_gaussian_mean","gsl_ran_multivariate_gaussian_pdf","gsl_ran_multivariate_gaussian_vcov","gsl_ran_negative_binomial","gsl_ran_negative_binomial_pdf","gsl_ran_pareto","gsl_ran_pareto_pdf","gsl_ran_pascal","gsl_ran_pascal_pdf","gsl_ran_poisson","gsl_ran_poisson_array","gsl_ran_poisson_pdf","gsl_ran_rayleigh","gsl_ran_rayleigh_pdf","gsl_ran_rayleigh_tail","gsl_ran_rayleigh_tail_pdf","gsl_ran_sample","gsl_ran_shuffle","gsl_ran_tdist","gsl_ran_tdist_pdf","gsl_ran_ugaussian","gsl_ran_ugaussian_pdf","gsl_ran_ugaussian_ratio_method","gsl_ran_ugaussian_tail","gsl_ran_ugaussian_tail_pdf","gsl_ran_weibull","gsl_ran_weibull_pdf","gsl_ran_wishart","gsl_ran_wishart_log_pdf","gsl_ran_wishart_pdf","gsl_rng","gsl_rng_alloc","gsl_rng_borosh13","gsl_rng_clone","gsl_rng_cmrg","gsl_rng_coveyou","gsl_rng_default","gsl_rng_default_seed","gsl_rng_env_setup","gsl_rng_fishman18","gsl_rng_fishman20","gsl_rng_fishman2x","gsl_rng_fread","gsl_rng_free","gsl_rng_fwrite","gsl_rng_get","gsl_rng_gfsr4","gsl_rng_knuthran","gsl_rng_knuthran2","gsl_rng_knuthran2002","gsl_rng_lecuyer21","gsl_rng_max","gsl_rng_memcpy","gsl_rng_min","gsl_rng_minstd","gsl_rng_mrg","gsl_rng_mt19937","gsl_rng_mt19937_1998","gsl_rng_mt19937_1999","gsl_rng_name","gsl_rng_print_state","gsl_rng_r250","gsl_rng_ran0","gsl_rng_ran1","gsl_rng_ran2","gsl_rng_ran3","gsl_rng_rand","gsl_rng_rand48","gsl_rng_random128_bsd","gsl_rng_random128_glibc2","gsl_rng_random128_libc5","gsl_rng_random256_bsd","gsl_rng_random256_glibc2","gsl_rng_random256_libc5","gsl_rng_random32_bsd","gsl_rng_random32_glibc2","gsl_rng_random32_libc5","gsl_rng_random64_bsd","gsl_rng_random64_glibc2","gsl_rng_random64_libc5","gsl_rng_random8_bsd","gsl_rng_random8_glibc2","gsl_rng_random8_libc5","gsl_rng_random_bsd","gsl_rng_random_glibc2","gsl_rng_random_libc5","gsl_rng_randu","gsl_rng_ranf","gsl_rng_ranlux","gsl_rng_ranlux389","gsl_rng_ranlxd1","gsl_rng_ranlxd2","gsl_rng_ranlxs0","gsl_rng_ranlxs1","gsl_rng_ranlxs2","gsl_rng_ranmar","gsl_rng_set","gsl_rng_size","gsl_rng_slatec","gsl_rng_state","gsl_rng_taus","gsl_rng_taus113","gsl_rng_taus2","gsl_rng_transputer","gsl_rng_tt800","gsl_rng_type","gsl_rng_types_setup","gsl_rng_uni","gsl_rng_uni32","gsl_rng_uniform","gsl_rng_uniform_int","gsl_rng_uniform_pos","gsl_rng_vax","gsl_rng_waterman14","gsl_rng_zuf","gsl_schur_gen_eigvals","gsl_schur_solve_equation","gsl_schur_solve_equation_z","gsl_set_error_handler","gsl_set_error_handler_off","gsl_set_stream","gsl_set_stream_handler","gsl_sf_Chi","gsl_sf_Chi_e","gsl_sf_Ci","gsl_sf_Ci_e","gsl_sf_Shi","gsl_sf_Shi_e","gsl_sf_Si","gsl_sf_Si_e","gsl_sf_airy_Ai","gsl_sf_airy_Ai_deriv","gsl_sf_airy_Ai_deriv_e","gsl_sf_airy_Ai_deriv_scaled","gsl_sf_airy_Ai_deriv_scaled_e","gsl_sf_airy_Ai_e","gsl_sf_airy_Ai_scaled","gsl_sf_airy_Ai_scaled_e","gsl_sf_airy_Bi","gsl_sf_airy_Bi_deriv","gsl_sf_airy_Bi_deriv_e","gsl_sf_airy_Bi_deriv_scaled","gsl_sf_airy_Bi_deriv_scaled_e","gsl_sf_airy_Bi_e","gsl_sf_airy_Bi_scaled","gsl_sf_airy_Bi_scaled_e","gsl_sf_airy_zero_Ai","gsl_sf_airy_zero_Ai_deriv","gsl_sf_airy_zero_Ai_deriv_e","gsl_sf_airy_zero_Ai_e","gsl_sf_airy_zero_Bi","gsl_sf_airy_zero_Bi_deriv","gsl_sf_airy_zero_Bi_deriv_e","gsl_sf_airy_zero_Bi_e","gsl_sf_angle_restrict_pos","gsl_sf_angle_restrict_pos_e","gsl_sf_angle_restrict_pos_err_e","gsl_sf_angle_restrict_symm","gsl_sf_angle_restrict_symm_e","gsl_sf_angle_restrict_symm_err_e","gsl_sf_atanint","gsl_sf_atanint_e","gsl_sf_bessel_I0","gsl_sf_bessel_I0_e","gsl_sf_bessel_I0_scaled","gsl_sf_bessel_I0_scaled_e","gsl_sf_bessel_I1","gsl_sf_bessel_I1_e","gsl_sf_bessel_I1_scaled","gsl_sf_bessel_I1_scaled_e","gsl_sf_bessel_In","gsl_sf_bessel_In_array","gsl_sf_bessel_In_e","gsl_sf_bessel_In_scaled","gsl_sf_bessel_In_scaled_array","gsl_sf_bessel_In_scaled_e","gsl_sf_bessel_Inu","gsl_sf_bessel_Inu_e","gsl_sf_bessel_Inu_scaled","gsl_sf_bessel_Inu_scaled_e","gsl_sf_bessel_J0","gsl_sf_bessel_J0_e","gsl_sf_bessel_J1","gsl_sf_bessel_J1_e","gsl_sf_bessel_Jn","gsl_sf_bessel_Jn_array","gsl_sf_bessel_Jn_e","gsl_sf_bessel_Jnu","gsl_sf_bessel_Jnu_e","gsl_sf_bessel_K0","gsl_sf_bessel_K0_e","gsl_sf_bessel_K0_scaled","gsl_sf_bessel_K0_scaled_e","gsl_sf_bessel_K1","gsl_sf_bessel_K1_e","gsl_sf_bessel_K1_scaled","gsl_sf_bessel_K1_scaled_e","gsl_sf_bessel_Kn","gsl_sf_bessel_Kn_array","gsl_sf_bessel_Kn_e","gsl_sf_bessel_Kn_scaled","gsl_sf_bessel_Kn_scaled_array","gsl_sf_bessel_Kn_scaled_e","gsl_sf_bessel_Knu","gsl_sf_bessel_Knu_e","gsl_sf_bessel_Knu_scaled","gsl_sf_bessel_Knu_scaled_e","gsl_sf_bessel_Knu_scaled_e10_e","gsl_sf_bessel_Y0","gsl_sf_bessel_Y0_e","gsl_sf_bessel_Y1","gsl_sf_bessel_Y1_e","gsl_sf_bessel_Yn","gsl_sf_bessel_Yn_array","gsl_sf_bessel_Yn_e","gsl_sf_bessel_Ynu","gsl_sf_bessel_Ynu_e","gsl_sf_bessel_i0_scaled","gsl_sf_bessel_i0_scaled_e","gsl_sf_bessel_i1_scaled","gsl_sf_bessel_i1_scaled_e","gsl_sf_bessel_i2_scaled","gsl_sf_bessel_i2_scaled_e","gsl_sf_bessel_il_scaled","gsl_sf_bessel_il_scaled_array","gsl_sf_bessel_il_scaled_e","gsl_sf_bessel_j0","gsl_sf_bessel_j0_e","gsl_sf_bessel_j1","gsl_sf_bessel_j1_e","gsl_sf_bessel_j2","gsl_sf_bessel_j2_e","gsl_sf_bessel_jl","gsl_sf_bessel_jl_array","gsl_sf_bessel_jl_e","gsl_sf_bessel_jl_steed_array","gsl_sf_bessel_k0_scaled","gsl_sf_bessel_k0_scaled_e","gsl_sf_bessel_k1_scaled","gsl_sf_bessel_k1_scaled_e","gsl_sf_bessel_k2_scaled","gsl_sf_bessel_k2_scaled_e","gsl_sf_bessel_kl_scaled","gsl_sf_bessel_kl_scaled_array","gsl_sf_bessel_kl_scaled_e","gsl_sf_bessel_lnKnu","gsl_sf_bessel_lnKnu_e","gsl_sf_bessel_sequence_Jnu_e","gsl_sf_bessel_y0","gsl_sf_bessel_y0_e","gsl_sf_bessel_y1","gsl_sf_bessel_y1_e","gsl_sf_bessel_y2","gsl_sf_bessel_y2_e","gsl_sf_bessel_yl","gsl_sf_bessel_yl_array","gsl_sf_bessel_yl_e","gsl_sf_bessel_zero_J0","gsl_sf_bessel_zero_J0_e","gsl_sf_bessel_zero_J1","gsl_sf_bessel_zero_J1_e","gsl_sf_bessel_zero_Jnu","gsl_sf_bessel_zero_Jnu_e","gsl_sf_beta","gsl_sf_beta_e","gsl_sf_beta_inc","gsl_sf_beta_inc_e","gsl_sf_choose","gsl_sf_choose_e","gsl_sf_clausen","gsl_sf_clausen_e","gsl_sf_complex_cos_e","gsl_sf_complex_dilog_e","gsl_sf_complex_dilog_xy_e","gsl_sf_complex_log_e","gsl_sf_complex_logsin_e","gsl_sf_complex_psi_e","gsl_sf_complex_sin_e","gsl_sf_complex_spence_xy_e","gsl_sf_conicalP_0","gsl_sf_conicalP_0_e","gsl_sf_conicalP_1","gsl_sf_conicalP_1_e","gsl_sf_conicalP_cyl_reg","gsl_sf_conicalP_cyl_reg_e","gsl_sf_conicalP_half","gsl_sf_conicalP_half_e","gsl_sf_conicalP_mhalf","gsl_sf_conicalP_mhalf_e","gsl_sf_conicalP_sph_reg","gsl_sf_conicalP_sph_reg_e","gsl_sf_cos","gsl_sf_cos_e","gsl_sf_cos_err_e","gsl_sf_cos_pi","gsl_sf_cos_pi_e","gsl_sf_coulomb_CL_array","gsl_sf_coulomb_CL_e","gsl_sf_coulomb_wave_FG_array","gsl_sf_coulomb_wave_FG_e","gsl_sf_coulomb_wave_FGp_array","gsl_sf_coulomb_wave_F_array","gsl_sf_coulomb_wave_sphF_array","gsl_sf_coupling_3j","gsl_sf_coupling_3j_e","gsl_sf_coupling_6j","gsl_sf_coupling_6j_INCORRECT","gsl_sf_coupling_6j_INCORRECT_e","gsl_sf_coupling_6j_e","gsl_sf_coupling_9j","gsl_sf_coupling_9j_e","gsl_sf_coupling_RacahW","gsl_sf_coupling_RacahW_e","gsl_sf_dawson","gsl_sf_dawson_e","gsl_sf_debye_1","gsl_sf_debye_1_e","gsl_sf_debye_2","gsl_sf_debye_2_e","gsl_sf_debye_3","gsl_sf_debye_3_e","gsl_sf_debye_4","gsl_sf_debye_4_e","gsl_sf_debye_5","gsl_sf_debye_5_e","gsl_sf_debye_6","gsl_sf_debye_6_e","gsl_sf_dilog","gsl_sf_dilog_e","gsl_sf_doublefact","gsl_sf_doublefact_e","gsl_sf_ellint_D","gsl_sf_ellint_D_e","gsl_sf_ellint_Dcomp","gsl_sf_ellint_Dcomp_e","gsl_sf_ellint_E","gsl_sf_ellint_E_e","gsl_sf_ellint_Ecomp","gsl_sf_ellint_Ecomp_e","gsl_sf_ellint_F","gsl_sf_ellint_F_e","gsl_sf_ellint_Kcomp","gsl_sf_ellint_Kcomp_e","gsl_sf_ellint_P","gsl_sf_ellint_P_e","gsl_sf_ellint_Pcomp","gsl_sf_ellint_Pcomp_e","gsl_sf_ellint_RC","gsl_sf_ellint_RC_e","gsl_sf_ellint_RD","gsl_sf_ellint_RD_e","gsl_sf_ellint_RF","gsl_sf_ellint_RF_e","gsl_sf_ellint_RJ","gsl_sf_ellint_RJ_e","gsl_sf_elljac_e","gsl_sf_erf","gsl_sf_erf_Q","gsl_sf_erf_Q_e","gsl_sf_erf_Z","gsl_sf_erf_Z_e","gsl_sf_erf_e","gsl_sf_erfc","gsl_sf_erfc_e","gsl_sf_eta","gsl_sf_eta_e","gsl_sf_eta_int","gsl_sf_eta_int_e","gsl_sf_exp","gsl_sf_exp_e","gsl_sf_exp_e10_e","gsl_sf_exp_err_e","gsl_sf_exp_err_e10_e","gsl_sf_exp_mult","gsl_sf_exp_mult_e","gsl_sf_exp_mult_e10_e","gsl_sf_exp_mult_err_e","gsl_sf_exp_mult_err_e10_e","gsl_sf_expint_3","gsl_sf_expint_3_e","gsl_sf_expint_E1","gsl_sf_expint_E1_e","gsl_sf_expint_E1_scaled","gsl_sf_expint_E1_scaled_e","gsl_sf_expint_E2","gsl_sf_expint_E2_e","gsl_sf_expint_E2_scaled","gsl_sf_expint_E2_scaled_e","gsl_sf_expint_Ei","gsl_sf_expint_Ei_e","gsl_sf_expint_Ei_scaled","gsl_sf_expint_Ei_scaled_e","gsl_sf_expint_En","gsl_sf_expint_En_e","gsl_sf_expint_En_scaled","gsl_sf_expint_En_scaled_e","gsl_sf_expm1","gsl_sf_expm1_e","gsl_sf_exprel","gsl_sf_exprel_2","gsl_sf_exprel_2_e","gsl_sf_exprel_e","gsl_sf_exprel_n","gsl_sf_exprel_n_CF_e","gsl_sf_exprel_n_e","gsl_sf_fact","gsl_sf_fact_e","gsl_sf_fermi_dirac_0","gsl_sf_fermi_dirac_0_e","gsl_sf_fermi_dirac_1","gsl_sf_fermi_dirac_1_e","gsl_sf_fermi_dirac_2","gsl_sf_fermi_dirac_2_e","gsl_sf_fermi_dirac_3half","gsl_sf_fermi_dirac_3half_e","gsl_sf_fermi_dirac_half","gsl_sf_fermi_dirac_half_e","gsl_sf_fermi_dirac_inc_0","gsl_sf_fermi_dirac_inc_0_e","gsl_sf_fermi_dirac_int","gsl_sf_fermi_dirac_int_e","gsl_sf_fermi_dirac_m1","gsl_sf_fermi_dirac_m1_e","gsl_sf_fermi_dirac_mhalf","gsl_sf_fermi_dirac_mhalf_e","gsl_sf_gamma","gsl_sf_gamma_e","gsl_sf_gamma_inc","gsl_sf_gamma_inc_P","gsl_sf_gamma_inc_P_e","gsl_sf_gamma_inc_Q","gsl_sf_gamma_inc_Q_e","gsl_sf_gamma_inc_e","gsl_sf_gammainv","gsl_sf_gammainv_e","gsl_sf_gammastar","gsl_sf_gammastar_e","gsl_sf_gegenpoly_1","gsl_sf_gegenpoly_1_e","gsl_sf_gegenpoly_2","gsl_sf_gegenpoly_2_e","gsl_sf_gegenpoly_3","gsl_sf_gegenpoly_3_e","gsl_sf_gegenpoly_array","gsl_sf_gegenpoly_n","gsl_sf_gegenpoly_n_e","gsl_sf_hazard","gsl_sf_hazard_e","gsl_sf_hermite","gsl_sf_hermite_array","gsl_sf_hermite_array_deriv","gsl_sf_hermite_deriv","gsl_sf_hermite_deriv_array","gsl_sf_hermite_deriv_e","gsl_sf_hermite_e","gsl_sf_hermite_func","gsl_sf_hermite_func_array","gsl_sf_hermite_func_der","gsl_sf_hermite_func_der_e","gsl_sf_hermite_func_e","gsl_sf_hermite_func_fast","gsl_sf_hermite_func_fast_e","gsl_sf_hermite_func_series","gsl_sf_hermite_func_series_e","gsl_sf_hermite_func_zero","gsl_sf_hermite_func_zero_e","gsl_sf_hermite_phys","gsl_sf_hermite_phys_array","gsl_sf_hermite_phys_array_der","gsl_sf_hermite_phys_der","gsl_sf_hermite_phys_der_array","gsl_sf_hermite_phys_der_e","gsl_sf_hermite_phys_e","gsl_sf_hermite_phys_series","gsl_sf_hermite_phys_series_e","gsl_sf_hermite_phys_zero","gsl_sf_hermite_phys_zero_e","gsl_sf_hermite_prob","gsl_sf_hermite_prob_array","gsl_sf_hermite_prob_array_der","gsl_sf_hermite_prob_array_deriv","gsl_sf_hermite_prob_der","gsl_sf_hermite_prob_der_array","gsl_sf_hermite_prob_der_e","gsl_sf_hermite_prob_deriv","gsl_sf_hermite_prob_deriv_array","gsl_sf_hermite_prob_deriv_e","gsl_sf_hermite_prob_e","gsl_sf_hermite_prob_series","gsl_sf_hermite_prob_series_e","gsl_sf_hermite_prob_zero","gsl_sf_hermite_prob_zero_e","gsl_sf_hermite_series","gsl_sf_hermite_series_e","gsl_sf_hermite_zero","gsl_sf_hermite_zero_e","gsl_sf_hydrogenicR","gsl_sf_hydrogenicR_1","gsl_sf_hydrogenicR_1_e","gsl_sf_hydrogenicR_e","gsl_sf_hyperg_0F1","gsl_sf_hyperg_0F1_e","gsl_sf_hyperg_1F1","gsl_sf_hyperg_1F1_e","gsl_sf_hyperg_1F1_int","gsl_sf_hyperg_1F1_int_e","gsl_sf_hyperg_2F0","gsl_sf_hyperg_2F0_e","gsl_sf_hyperg_2F1","gsl_sf_hyperg_2F1_conj","gsl_sf_hyperg_2F1_conj_e","gsl_sf_hyperg_2F1_conj_renorm","gsl_sf_hyperg_2F1_conj_renorm_e","gsl_sf_hyperg_2F1_e","gsl_sf_hyperg_2F1_renorm","gsl_sf_hyperg_2F1_renorm_e","gsl_sf_hyperg_U","gsl_sf_hyperg_U_e","gsl_sf_hyperg_U_e10_e","gsl_sf_hyperg_U_int","gsl_sf_hyperg_U_int_e","gsl_sf_hyperg_U_int_e10_e","gsl_sf_hypot","gsl_sf_hypot_e","gsl_sf_hzeta","gsl_sf_hzeta_e","gsl_sf_laguerre_1","gsl_sf_laguerre_1_e","gsl_sf_laguerre_2","gsl_sf_laguerre_2_e","gsl_sf_laguerre_3","gsl_sf_laguerre_3_e","gsl_sf_laguerre_n","gsl_sf_laguerre_n_e","gsl_sf_lambert_W0","gsl_sf_lambert_W0_e","gsl_sf_lambert_Wm1","gsl_sf_lambert_Wm1_e","gsl_sf_legendre_H3d","gsl_sf_legendre_H3d_0","gsl_sf_legendre_H3d_0_e","gsl_sf_legendre_H3d_1","gsl_sf_legendre_H3d_1_e","gsl_sf_legendre_H3d_array","gsl_sf_legendre_H3d_e","gsl_sf_legendre_P1","gsl_sf_legendre_P1_e","gsl_sf_legendre_P2","gsl_sf_legendre_P2_e","gsl_sf_legendre_P3","gsl_sf_legendre_P3_e","gsl_sf_legendre_Pl","gsl_sf_legendre_Pl_array","gsl_sf_legendre_Pl_deriv_array","gsl_sf_legendre_Pl_e","gsl_sf_legendre_Plm","gsl_sf_legendre_Plm_array","gsl_sf_legendre_Plm_deriv_array","gsl_sf_legendre_Plm_e","gsl_sf_legendre_Q0","gsl_sf_legendre_Q0_e","gsl_sf_legendre_Q1","gsl_sf_legendre_Q1_e","gsl_sf_legendre_Ql","gsl_sf_legendre_Ql_e","gsl_sf_legendre_array","gsl_sf_legendre_array_e","gsl_sf_legendre_array_index","gsl_sf_legendre_array_n","gsl_sf_legendre_array_size","gsl_sf_legendre_deriv2_alt_array","gsl_sf_legendre_deriv2_alt_array_e","gsl_sf_legendre_deriv2_array","gsl_sf_legendre_deriv2_array_e","gsl_sf_legendre_deriv_alt_array","gsl_sf_legendre_deriv_alt_array_e","gsl_sf_legendre_deriv_array","gsl_sf_legendre_deriv_array_e","gsl_sf_legendre_nlm","gsl_sf_legendre_sphPlm","gsl_sf_legendre_sphPlm_array","gsl_sf_legendre_sphPlm_deriv_array","gsl_sf_legendre_sphPlm_e","gsl_sf_legendre_t","gsl_sf_legendre_t_GSL_SF_LEGENDRE_FULL","gsl_sf_legendre_t_GSL_SF_LEGENDRE_NONE","gsl_sf_legendre_t_GSL_SF_LEGENDRE_SCHMIDT","gsl_sf_legendre_t_GSL_SF_LEGENDRE_SPHARM","gsl_sf_lnbeta","gsl_sf_lnbeta_e","gsl_sf_lnbeta_sgn_e","gsl_sf_lnchoose","gsl_sf_lnchoose_e","gsl_sf_lncosh","gsl_sf_lncosh_e","gsl_sf_lndoublefact","gsl_sf_lndoublefact_e","gsl_sf_lnfact","gsl_sf_lnfact_e","gsl_sf_lngamma","gsl_sf_lngamma_complex_e","gsl_sf_lngamma_e","gsl_sf_lngamma_sgn_e","gsl_sf_lnpoch","gsl_sf_lnpoch_e","gsl_sf_lnpoch_sgn_e","gsl_sf_lnsinh","gsl_sf_lnsinh_e","gsl_sf_log","gsl_sf_log_1plusx","gsl_sf_log_1plusx_e","gsl_sf_log_1plusx_mx","gsl_sf_log_1plusx_mx_e","gsl_sf_log_abs","gsl_sf_log_abs_e","gsl_sf_log_e","gsl_sf_log_erfc","gsl_sf_log_erfc_e","gsl_sf_mathieu_Mc","gsl_sf_mathieu_Mc_array","gsl_sf_mathieu_Mc_e","gsl_sf_mathieu_Ms","gsl_sf_mathieu_Ms_array","gsl_sf_mathieu_Ms_e","gsl_sf_mathieu_a","gsl_sf_mathieu_a_array","gsl_sf_mathieu_a_coeff","gsl_sf_mathieu_a_e","gsl_sf_mathieu_alloc","gsl_sf_mathieu_b","gsl_sf_mathieu_b_array","gsl_sf_mathieu_b_coeff","gsl_sf_mathieu_b_e","gsl_sf_mathieu_ce","gsl_sf_mathieu_ce_array","gsl_sf_mathieu_ce_e","gsl_sf_mathieu_free","gsl_sf_mathieu_se","gsl_sf_mathieu_se_array","gsl_sf_mathieu_se_e","gsl_sf_mathieu_workspace","gsl_sf_multiply","gsl_sf_multiply_e","gsl_sf_multiply_err_e","gsl_sf_poch","gsl_sf_poch_e","gsl_sf_pochrel","gsl_sf_pochrel_e","gsl_sf_polar_to_rect","gsl_sf_pow_int","gsl_sf_pow_int_e","gsl_sf_psi","gsl_sf_psi_1","gsl_sf_psi_1_e","gsl_sf_psi_1_int","gsl_sf_psi_1_int_e","gsl_sf_psi_1piy","gsl_sf_psi_1piy_e","gsl_sf_psi_e","gsl_sf_psi_int","gsl_sf_psi_int_e","gsl_sf_psi_n","gsl_sf_psi_n_e","gsl_sf_rect_to_polar","gsl_sf_result","gsl_sf_result_e10","gsl_sf_result_e10_struct","gsl_sf_result_smash_e","gsl_sf_result_struct","gsl_sf_sin","gsl_sf_sin_e","gsl_sf_sin_err_e","gsl_sf_sin_pi","gsl_sf_sin_pi_e","gsl_sf_sinc","gsl_sf_sinc_e","gsl_sf_synchrotron_1","gsl_sf_synchrotron_1_e","gsl_sf_synchrotron_2","gsl_sf_synchrotron_2_e","gsl_sf_taylorcoeff","gsl_sf_taylorcoeff_e","gsl_sf_transport_2","gsl_sf_transport_2_e","gsl_sf_transport_3","gsl_sf_transport_3_e","gsl_sf_transport_4","gsl_sf_transport_4_e","gsl_sf_transport_5","gsl_sf_transport_5_e","gsl_sf_zeta","gsl_sf_zeta_e","gsl_sf_zeta_int","gsl_sf_zeta_int_e","gsl_sf_zetam1","gsl_sf_zetam1_e","gsl_sf_zetam1_int","gsl_sf_zetam1_int_e","gsl_sort_vector","gsl_sort_vector2","gsl_sort_vector_index","gsl_sort_vector_largest","gsl_sort_vector_largest_index","gsl_sort_vector_smallest","gsl_sort_vector_smallest_index","gsl_stats_Qn0_from_sorted_data","gsl_stats_Qn_from_sorted_data","gsl_stats_Sn0_from_sorted_data","gsl_stats_Sn_from_sorted_data","gsl_stats_absdev","gsl_stats_absdev_m","gsl_stats_correlation","gsl_stats_covariance","gsl_stats_covariance_m","gsl_stats_gastwirth_from_sorted_data","gsl_stats_kurtosis","gsl_stats_kurtosis_m_sd","gsl_stats_lag1_autocorrelation","gsl_stats_lag1_autocorrelation_m","gsl_stats_mad","gsl_stats_mad0","gsl_stats_max","gsl_stats_max_index","gsl_stats_mean","gsl_stats_median","gsl_stats_median_from_sorted_data","gsl_stats_min","gsl_stats_min_index","gsl_stats_minmax","gsl_stats_minmax_index","gsl_stats_pvariance","gsl_stats_quantile_from_sorted_data","gsl_stats_sd","gsl_stats_sd_m","gsl_stats_sd_with_fixed_mean","gsl_stats_select","gsl_stats_skew","gsl_stats_skew_m_sd","gsl_stats_spearman","gsl_stats_trmean_from_sorted_data","gsl_stats_tss","gsl_stats_tss_m","gsl_stats_ttest","gsl_stats_variance","gsl_stats_variance_m","gsl_stats_variance_with_fixed_mean","gsl_stats_wabsdev","gsl_stats_wabsdev_m","gsl_stats_wkurtosis","gsl_stats_wkurtosis_m_sd","gsl_stats_wmean","gsl_stats_wsd","gsl_stats_wsd_m","gsl_stats_wsd_with_fixed_mean","gsl_stats_wskew","gsl_stats_wskew_m_sd","gsl_stats_wtss","gsl_stats_wtss_m","gsl_stats_wvariance","gsl_stats_wvariance_m","gsl_stats_wvariance_with_fixed_mean","gsl_stream_handler_t","gsl_stream_printf","gsl_strerror","gsl_vector","gsl_vector_add","gsl_vector_add_constant","gsl_vector_alloc","gsl_vector_alloc_col_from_matrix","gsl_vector_alloc_from_block","gsl_vector_alloc_from_vector","gsl_vector_alloc_row_from_matrix","gsl_vector_axpby","gsl_vector_calloc","gsl_vector_char","gsl_vector_char_add","gsl_vector_char_add_constant","gsl_vector_char_alloc","gsl_vector_char_alloc_col_from_matrix","gsl_vector_char_alloc_from_block","gsl_vector_char_alloc_from_vector","gsl_vector_char_alloc_row_from_matrix","gsl_vector_char_axpby","gsl_vector_char_calloc","gsl_vector_char_const_ptr","gsl_vector_char_const_subvector","gsl_vector_char_const_subvector_with_stride","gsl_vector_char_const_view","gsl_vector_char_const_view_array","gsl_vector_char_const_view_array_with_stride","gsl_vector_char_div","gsl_vector_char_equal","gsl_vector_char_fprintf","gsl_vector_char_fread","gsl_vector_char_free","gsl_vector_char_fscanf","gsl_vector_char_fwrite","gsl_vector_char_get","gsl_vector_char_isneg","gsl_vector_char_isnonneg","gsl_vector_char_isnull","gsl_vector_char_ispos","gsl_vector_char_max","gsl_vector_char_max_index","gsl_vector_char_memcpy","gsl_vector_char_min","gsl_vector_char_min_index","gsl_vector_char_minmax","gsl_vector_char_minmax_index","gsl_vector_char_mul","gsl_vector_char_ptr","gsl_vector_char_reverse","gsl_vector_char_scale","gsl_vector_char_set","gsl_vector_char_set_all","gsl_vector_char_set_basis","gsl_vector_char_set_zero","gsl_vector_char_sub","gsl_vector_char_subvector","gsl_vector_char_subvector_with_stride","gsl_vector_char_sum","gsl_vector_char_swap","gsl_vector_char_swap_elements","gsl_vector_char_view","gsl_vector_char_view_array","gsl_vector_char_view_array_with_stride","gsl_vector_complex","gsl_vector_complex_add","gsl_vector_complex_add_constant","gsl_vector_complex_alloc","gsl_vector_complex_alloc_col_from_matrix","gsl_vector_complex_alloc_from_block","gsl_vector_complex_alloc_from_vector","gsl_vector_complex_alloc_row_from_matrix","gsl_vector_complex_axpby","gsl_vector_complex_calloc","gsl_vector_complex_const_imag","gsl_vector_complex_const_ptr","gsl_vector_complex_const_real","gsl_vector_complex_const_subvector","gsl_vector_complex_const_subvector_with_stride","gsl_vector_complex_const_view","gsl_vector_complex_const_view_array","gsl_vector_complex_const_view_array_with_stride","gsl_vector_complex_div","gsl_vector_complex_equal","gsl_vector_complex_float","gsl_vector_complex_float_add","gsl_vector_complex_float_add_constant","gsl_vector_complex_float_alloc","gsl_vector_complex_float_alloc_col_from_matrix","gsl_vector_complex_float_alloc_from_block","gsl_vector_complex_float_alloc_from_vector","gsl_vector_complex_float_alloc_row_from_matrix","gsl_vector_complex_float_axpby","gsl_vector_complex_float_calloc","gsl_vector_complex_float_const_imag","gsl_vector_complex_float_const_ptr","gsl_vector_complex_float_const_real","gsl_vector_complex_float_const_subvector","gsl_vector_complex_float_const_subvector_with_stride","gsl_vector_complex_float_const_view","gsl_vector_complex_float_const_view_array","gsl_vector_complex_float_const_view_array_with_stride","gsl_vector_complex_float_div","gsl_vector_complex_float_equal","gsl_vector_complex_float_fprintf","gsl_vector_complex_float_fread","gsl_vector_complex_float_free","gsl_vector_complex_float_fscanf","gsl_vector_complex_float_fwrite","gsl_vector_complex_float_get","gsl_vector_complex_float_imag","gsl_vector_complex_float_isneg","gsl_vector_complex_float_isnonneg","gsl_vector_complex_float_isnull","gsl_vector_complex_float_ispos","gsl_vector_complex_float_memcpy","gsl_vector_complex_float_mul","gsl_vector_complex_float_ptr","gsl_vector_complex_float_real","gsl_vector_complex_float_reverse","gsl_vector_complex_float_scale","gsl_vector_complex_float_set","gsl_vector_complex_float_set_all","gsl_vector_complex_float_set_basis","gsl_vector_complex_float_set_zero","gsl_vector_complex_float_sub","gsl_vector_complex_float_subvector","gsl_vector_complex_float_subvector_with_stride","gsl_vector_complex_float_swap","gsl_vector_complex_float_swap_elements","gsl_vector_complex_float_view","gsl_vector_complex_float_view_array","gsl_vector_complex_float_view_array_with_stride","gsl_vector_complex_fprintf","gsl_vector_complex_fread","gsl_vector_complex_free","gsl_vector_complex_fscanf","gsl_vector_complex_fwrite","gsl_vector_complex_get","gsl_vector_complex_imag","gsl_vector_complex_isneg","gsl_vector_complex_isnonneg","gsl_vector_complex_isnull","gsl_vector_complex_ispos","gsl_vector_complex_memcpy","gsl_vector_complex_mul","gsl_vector_complex_ptr","gsl_vector_complex_real","gsl_vector_complex_reverse","gsl_vector_complex_scale","gsl_vector_complex_set","gsl_vector_complex_set_all","gsl_vector_complex_set_basis","gsl_vector_complex_set_zero","gsl_vector_complex_sub","gsl_vector_complex_subvector","gsl_vector_complex_subvector_with_stride","gsl_vector_complex_swap","gsl_vector_complex_swap_elements","gsl_vector_complex_view","gsl_vector_complex_view_array","gsl_vector_complex_view_array_with_stride","gsl_vector_const_ptr","gsl_vector_const_subvector","gsl_vector_const_subvector_with_stride","gsl_vector_const_view","gsl_vector_const_view_array","gsl_vector_const_view_array_with_stride","gsl_vector_div","gsl_vector_equal","gsl_vector_float","gsl_vector_float_add","gsl_vector_float_add_constant","gsl_vector_float_alloc","gsl_vector_float_alloc_col_from_matrix","gsl_vector_float_alloc_from_block","gsl_vector_float_alloc_from_vector","gsl_vector_float_alloc_row_from_matrix","gsl_vector_float_axpby","gsl_vector_float_calloc","gsl_vector_float_const_ptr","gsl_vector_float_const_subvector","gsl_vector_float_const_subvector_with_stride","gsl_vector_float_const_view","gsl_vector_float_const_view_array","gsl_vector_float_const_view_array_with_stride","gsl_vector_float_div","gsl_vector_float_equal","gsl_vector_float_fprintf","gsl_vector_float_fread","gsl_vector_float_free","gsl_vector_float_fscanf","gsl_vector_float_fwrite","gsl_vector_float_get","gsl_vector_float_isneg","gsl_vector_float_isnonneg","gsl_vector_float_isnull","gsl_vector_float_ispos","gsl_vector_float_max","gsl_vector_float_max_index","gsl_vector_float_memcpy","gsl_vector_float_min","gsl_vector_float_min_index","gsl_vector_float_minmax","gsl_vector_float_minmax_index","gsl_vector_float_mul","gsl_vector_float_ptr","gsl_vector_float_reverse","gsl_vector_float_scale","gsl_vector_float_set","gsl_vector_float_set_all","gsl_vector_float_set_basis","gsl_vector_float_set_zero","gsl_vector_float_sub","gsl_vector_float_subvector","gsl_vector_float_subvector_with_stride","gsl_vector_float_sum","gsl_vector_float_swap","gsl_vector_float_swap_elements","gsl_vector_float_view","gsl_vector_float_view_array","gsl_vector_float_view_array_with_stride","gsl_vector_fprintf","gsl_vector_fread","gsl_vector_free","gsl_vector_fscanf","gsl_vector_fwrite","gsl_vector_get","gsl_vector_int","gsl_vector_int_add","gsl_vector_int_add_constant","gsl_vector_int_alloc","gsl_vector_int_alloc_col_from_matrix","gsl_vector_int_alloc_from_block","gsl_vector_int_alloc_from_vector","gsl_vector_int_alloc_row_from_matrix","gsl_vector_int_axpby","gsl_vector_int_calloc","gsl_vector_int_const_ptr","gsl_vector_int_const_subvector","gsl_vector_int_const_subvector_with_stride","gsl_vector_int_const_view","gsl_vector_int_const_view_array","gsl_vector_int_const_view_array_with_stride","gsl_vector_int_div","gsl_vector_int_equal","gsl_vector_int_fprintf","gsl_vector_int_fread","gsl_vector_int_free","gsl_vector_int_fscanf","gsl_vector_int_fwrite","gsl_vector_int_get","gsl_vector_int_isneg","gsl_vector_int_isnonneg","gsl_vector_int_isnull","gsl_vector_int_ispos","gsl_vector_int_max","gsl_vector_int_max_index","gsl_vector_int_memcpy","gsl_vector_int_min","gsl_vector_int_min_index","gsl_vector_int_minmax","gsl_vector_int_minmax_index","gsl_vector_int_mul","gsl_vector_int_ptr","gsl_vector_int_reverse","gsl_vector_int_scale","gsl_vector_int_set","gsl_vector_int_set_all","gsl_vector_int_set_basis","gsl_vector_int_set_zero","gsl_vector_int_sub","gsl_vector_int_subvector","gsl_vector_int_subvector_with_stride","gsl_vector_int_sum","gsl_vector_int_swap","gsl_vector_int_swap_elements","gsl_vector_int_view","gsl_vector_int_view_array","gsl_vector_int_view_array_with_stride","gsl_vector_isneg","gsl_vector_isnonneg","gsl_vector_isnull","gsl_vector_ispos","gsl_vector_long","gsl_vector_long_add","gsl_vector_long_add_constant","gsl_vector_long_alloc","gsl_vector_long_alloc_col_from_matrix","gsl_vector_long_alloc_from_block","gsl_vector_long_alloc_from_vector","gsl_vector_long_alloc_row_from_matrix","gsl_vector_long_axpby","gsl_vector_long_calloc","gsl_vector_long_const_ptr","gsl_vector_long_const_subvector","gsl_vector_long_const_subvector_with_stride","gsl_vector_long_const_view","gsl_vector_long_const_view_array","gsl_vector_long_const_view_array_with_stride","gsl_vector_long_div","gsl_vector_long_equal","gsl_vector_long_fprintf","gsl_vector_long_fread","gsl_vector_long_free","gsl_vector_long_fscanf","gsl_vector_long_fwrite","gsl_vector_long_get","gsl_vector_long_isneg","gsl_vector_long_isnonneg","gsl_vector_long_isnull","gsl_vector_long_ispos","gsl_vector_long_max","gsl_vector_long_max_index","gsl_vector_long_memcpy","gsl_vector_long_min","gsl_vector_long_min_index","gsl_vector_long_minmax","gsl_vector_long_minmax_index","gsl_vector_long_mul","gsl_vector_long_ptr","gsl_vector_long_reverse","gsl_vector_long_scale","gsl_vector_long_set","gsl_vector_long_set_all","gsl_vector_long_set_basis","gsl_vector_long_set_zero","gsl_vector_long_sub","gsl_vector_long_subvector","gsl_vector_long_subvector_with_stride","gsl_vector_long_sum","gsl_vector_long_swap","gsl_vector_long_swap_elements","gsl_vector_long_view","gsl_vector_long_view_array","gsl_vector_long_view_array_with_stride","gsl_vector_max","gsl_vector_max_index","gsl_vector_memcpy","gsl_vector_min","gsl_vector_min_index","gsl_vector_minmax","gsl_vector_minmax_index","gsl_vector_mul","gsl_vector_ptr","gsl_vector_reverse","gsl_vector_scale","gsl_vector_set","gsl_vector_set_all","gsl_vector_set_basis","gsl_vector_set_zero","gsl_vector_short","gsl_vector_short_add","gsl_vector_short_add_constant","gsl_vector_short_alloc","gsl_vector_short_alloc_col_from_matrix","gsl_vector_short_alloc_from_block","gsl_vector_short_alloc_from_vector","gsl_vector_short_alloc_row_from_matrix","gsl_vector_short_axpby","gsl_vector_short_calloc","gsl_vector_short_const_ptr","gsl_vector_short_const_subvector","gsl_vector_short_const_subvector_with_stride","gsl_vector_short_const_view","gsl_vector_short_const_view_array","gsl_vector_short_const_view_array_with_stride","gsl_vector_short_div","gsl_vector_short_equal","gsl_vector_short_fprintf","gsl_vector_short_fread","gsl_vector_short_free","gsl_vector_short_fscanf","gsl_vector_short_fwrite","gsl_vector_short_get","gsl_vector_short_isneg","gsl_vector_short_isnonneg","gsl_vector_short_isnull","gsl_vector_short_ispos","gsl_vector_short_max","gsl_vector_short_max_index","gsl_vector_short_memcpy","gsl_vector_short_min","gsl_vector_short_min_index","gsl_vector_short_minmax","gsl_vector_short_minmax_index","gsl_vector_short_mul","gsl_vector_short_ptr","gsl_vector_short_reverse","gsl_vector_short_scale","gsl_vector_short_set","gsl_vector_short_set_all","gsl_vector_short_set_basis","gsl_vector_short_set_zero","gsl_vector_short_sub","gsl_vector_short_subvector","gsl_vector_short_subvector_with_stride","gsl_vector_short_sum","gsl_vector_short_swap","gsl_vector_short_swap_elements","gsl_vector_short_view","gsl_vector_short_view_array","gsl_vector_short_view_array_with_stride","gsl_vector_sub","gsl_vector_subvector","gsl_vector_subvector_with_stride","gsl_vector_sum","gsl_vector_swap","gsl_vector_swap_elements","gsl_vector_uchar","gsl_vector_uchar_add","gsl_vector_uchar_add_constant","gsl_vector_uchar_alloc","gsl_vector_uchar_alloc_col_from_matrix","gsl_vector_uchar_alloc_from_block","gsl_vector_uchar_alloc_from_vector","gsl_vector_uchar_alloc_row_from_matrix","gsl_vector_uchar_axpby","gsl_vector_uchar_calloc","gsl_vector_uchar_const_ptr","gsl_vector_uchar_const_subvector","gsl_vector_uchar_const_subvector_with_stride","gsl_vector_uchar_const_view","gsl_vector_uchar_const_view_array","gsl_vector_uchar_const_view_array_with_stride","gsl_vector_uchar_div","gsl_vector_uchar_equal","gsl_vector_uchar_fprintf","gsl_vector_uchar_fread","gsl_vector_uchar_free","gsl_vector_uchar_fscanf","gsl_vector_uchar_fwrite","gsl_vector_uchar_get","gsl_vector_uchar_isneg","gsl_vector_uchar_isnonneg","gsl_vector_uchar_isnull","gsl_vector_uchar_ispos","gsl_vector_uchar_max","gsl_vector_uchar_max_index","gsl_vector_uchar_memcpy","gsl_vector_uchar_min","gsl_vector_uchar_min_index","gsl_vector_uchar_minmax","gsl_vector_uchar_minmax_index","gsl_vector_uchar_mul","gsl_vector_uchar_ptr","gsl_vector_uchar_reverse","gsl_vector_uchar_scale","gsl_vector_uchar_set","gsl_vector_uchar_set_all","gsl_vector_uchar_set_basis","gsl_vector_uchar_set_zero","gsl_vector_uchar_sub","gsl_vector_uchar_subvector","gsl_vector_uchar_subvector_with_stride","gsl_vector_uchar_sum","gsl_vector_uchar_swap","gsl_vector_uchar_swap_elements","gsl_vector_uchar_view","gsl_vector_uchar_view_array","gsl_vector_uchar_view_array_with_stride","gsl_vector_uint","gsl_vector_uint_add","gsl_vector_uint_add_constant","gsl_vector_uint_alloc","gsl_vector_uint_alloc_col_from_matrix","gsl_vector_uint_alloc_from_block","gsl_vector_uint_alloc_from_vector","gsl_vector_uint_alloc_row_from_matrix","gsl_vector_uint_axpby","gsl_vector_uint_calloc","gsl_vector_uint_const_ptr","gsl_vector_uint_const_subvector","gsl_vector_uint_const_subvector_with_stride","gsl_vector_uint_const_view","gsl_vector_uint_const_view_array","gsl_vector_uint_const_view_array_with_stride","gsl_vector_uint_div","gsl_vector_uint_equal","gsl_vector_uint_fprintf","gsl_vector_uint_fread","gsl_vector_uint_free","gsl_vector_uint_fscanf","gsl_vector_uint_fwrite","gsl_vector_uint_get","gsl_vector_uint_isneg","gsl_vector_uint_isnonneg","gsl_vector_uint_isnull","gsl_vector_uint_ispos","gsl_vector_uint_max","gsl_vector_uint_max_index","gsl_vector_uint_memcpy","gsl_vector_uint_min","gsl_vector_uint_min_index","gsl_vector_uint_minmax","gsl_vector_uint_minmax_index","gsl_vector_uint_mul","gsl_vector_uint_ptr","gsl_vector_uint_reverse","gsl_vector_uint_scale","gsl_vector_uint_set","gsl_vector_uint_set_all","gsl_vector_uint_set_basis","gsl_vector_uint_set_zero","gsl_vector_uint_sub","gsl_vector_uint_subvector","gsl_vector_uint_subvector_with_stride","gsl_vector_uint_sum","gsl_vector_uint_swap","gsl_vector_uint_swap_elements","gsl_vector_uint_view","gsl_vector_uint_view_array","gsl_vector_uint_view_array_with_stride","gsl_vector_ulong","gsl_vector_ulong_add","gsl_vector_ulong_add_constant","gsl_vector_ulong_alloc","gsl_vector_ulong_alloc_col_from_matrix","gsl_vector_ulong_alloc_from_block","gsl_vector_ulong_alloc_from_vector","gsl_vector_ulong_alloc_row_from_matrix","gsl_vector_ulong_axpby","gsl_vector_ulong_calloc","gsl_vector_ulong_const_ptr","gsl_vector_ulong_const_subvector","gsl_vector_ulong_const_subvector_with_stride","gsl_vector_ulong_const_view","gsl_vector_ulong_const_view_array","gsl_vector_ulong_const_view_array_with_stride","gsl_vector_ulong_div","gsl_vector_ulong_equal","gsl_vector_ulong_fprintf","gsl_vector_ulong_fread","gsl_vector_ulong_free","gsl_vector_ulong_fscanf","gsl_vector_ulong_fwrite","gsl_vector_ulong_get","gsl_vector_ulong_isneg","gsl_vector_ulong_isnonneg","gsl_vector_ulong_isnull","gsl_vector_ulong_ispos","gsl_vector_ulong_max","gsl_vector_ulong_max_index","gsl_vector_ulong_memcpy","gsl_vector_ulong_min","gsl_vector_ulong_min_index","gsl_vector_ulong_minmax","gsl_vector_ulong_minmax_index","gsl_vector_ulong_mul","gsl_vector_ulong_ptr","gsl_vector_ulong_reverse","gsl_vector_ulong_scale","gsl_vector_ulong_set","gsl_vector_ulong_set_all","gsl_vector_ulong_set_basis","gsl_vector_ulong_set_zero","gsl_vector_ulong_sub","gsl_vector_ulong_subvector","gsl_vector_ulong_subvector_with_stride","gsl_vector_ulong_sum","gsl_vector_ulong_swap","gsl_vector_ulong_swap_elements","gsl_vector_ulong_view","gsl_vector_ulong_view_array","gsl_vector_ulong_view_array_with_stride","gsl_vector_ushort","gsl_vector_ushort_add","gsl_vector_ushort_add_constant","gsl_vector_ushort_alloc","gsl_vector_ushort_alloc_col_from_matrix","gsl_vector_ushort_alloc_from_block","gsl_vector_ushort_alloc_from_vector","gsl_vector_ushort_alloc_row_from_matrix","gsl_vector_ushort_axpby","gsl_vector_ushort_calloc","gsl_vector_ushort_const_ptr","gsl_vector_ushort_const_subvector","gsl_vector_ushort_const_subvector_with_stride","gsl_vector_ushort_const_view","gsl_vector_ushort_const_view_array","gsl_vector_ushort_const_view_array_with_stride","gsl_vector_ushort_div","gsl_vector_ushort_equal","gsl_vector_ushort_fprintf","gsl_vector_ushort_fread","gsl_vector_ushort_free","gsl_vector_ushort_fscanf","gsl_vector_ushort_fwrite","gsl_vector_ushort_get","gsl_vector_ushort_isneg","gsl_vector_ushort_isnonneg","gsl_vector_ushort_isnull","gsl_vector_ushort_ispos","gsl_vector_ushort_max","gsl_vector_ushort_max_index","gsl_vector_ushort_memcpy","gsl_vector_ushort_min","gsl_vector_ushort_min_index","gsl_vector_ushort_minmax","gsl_vector_ushort_minmax_index","gsl_vector_ushort_mul","gsl_vector_ushort_ptr","gsl_vector_ushort_reverse","gsl_vector_ushort_scale","gsl_vector_ushort_set","gsl_vector_ushort_set_all","gsl_vector_ushort_set_basis","gsl_vector_ushort_set_zero","gsl_vector_ushort_sub","gsl_vector_ushort_subvector","gsl_vector_ushort_subvector_with_stride","gsl_vector_ushort_sum","gsl_vector_ushort_swap","gsl_vector_ushort_swap_elements","gsl_vector_ushort_view","gsl_vector_ushort_view_array","gsl_vector_ushort_view_array_with_stride","gsl_vector_view","gsl_vector_view_array","gsl_vector_view_array_with_stride","h_df","h_fvv","heap","herm_workspace_p","hermv_workspace_p","hit_count","i","igral","init","init","init","init","init","init","init","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","iterate","iterate","ivals","k","kernel","km1","knots","l","level","limit","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","matrix","max","max_iterations","max_iterations","maximum_level","maxiter","min","min_size","minmaxacc","miss_count","movstat_workspace_p","movstat_workspace_p","movstat_workspace_p","movstat_workspace_p","mu","mu","multifit_p","n","n","n","n","n","n","n","n","n","n","n_evals","n_evals","n_evals","n_iter","n_iter","name","name","name","name","name","name","name","name","nbreak","ndiv","needtop","nevaldf","nevalf","nevalfvv","nf","niter","nmax","nonsymm_workspace_p","nrmax","nu","numit","numit","odd_order","omega","order","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","owner","p","p","p","par","params","params","params","params","params","params","params","pmax","precomputed","preduction","preloop","presolve","psi","psi_deriv","qa","qb","r","r","rcond","rcond","rcond","rdepth","resfac","rg","rh","ri","rj","rlist","rmse","scale","scratch","sd","sd","sd","sd","set","set","shft","sigma","sigma_mad","sigma_ols","sigma_rob","sine","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size","size1","size1","size1","size1","size1","size1","size1","size1","size1","size1","size1","size1","size2","size2","size2","size2","size2","size2","size2","size2","size2","size2","size2","size2","size_t","slp","solve","solver","solver_state","sqrt_wts","sqrt_wts","sqrt_wts_work","sse","state","state","state","state","state","state","state_size","stats","step","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","subdiag","symm_workspace_p","symmv_workspace_p","t","tau","tau","tau","tda","tda","tda","tda","tda","tda","tda","tda","tda","tda","tda","tda","to_2d_array","to_array","to_boxed_slice","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trig","trs","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tt","tune","tuning_default","twiddle","type_","type_","type_","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","val","val","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","vector","w","weights","weights","weights","wfun","window","wmat","work","work","work","work1","work1","work2","work2","work2","work3","work3","work4","work5","work6","workn","x","x","x","x","x_lower","x_minimum","x_upper","xmax","xmin","xt","zemu","zz","BSpline","BSplineEvaluation","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","dv","dv_err","eq","eval","fit","fit","fit_bspline","fmt","fmt","from","from","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","y","y_err","bernoulli_pdf","bernoulli_rvs","beta_P_cdf","beta_Pinv_cdf","beta_Q_cdf","beta_Qinv_cdf","beta_pdf","beta_rvs","binomial_P_cdf","binomial_Q_cdf","binomial_pdf","binomial_rvs","bivariate_gaussian_pdf","cauchy_P_cdf","cauchy_Pinv_cdf","cauchy_Q_cdf","cauchy_Qinv_cdf","cauchy_pdf","cauchy_rvs","chi2","chi2_P_cdf","chi2_Pinv_cdf","chi2_Q_cdf","chi2_Qinv_cdf","chi2_pdf","exponential_P_cdf","exponential_Pinv_cdf","exponential_Q_cdf","exponential_Qinv_cdf","exponential_pdf","exponential_rvs","exppow_P_cdf","exppow_Q_cdf","exppow_pdf","exppow_rvs","fdist_P_cdf","fdist_Pinv_cdf","fdist_Q_cdf","fdist_Qinv_cdf","fdist_pdf","fdist_rvs","flat_P_cdf","flat_Pinv_cdf","flat_Q_cdf","flat_Qinv_cdf","flat_pdf","flat_rvs","gamma_P_cdf","gamma_Pinv_cdf","gamma_Q_cdf","gamma_Qinv_cdf","gamma_knuth_rvs","gamma_pdf","gamma_rvs","gaussian_P_cdf","gaussian_Pinv_cdf","gaussian_Q_cdf","gaussian_Qinv_cdf","gaussian_pdf","gaussian_ratio_method_rvs","gaussian_rvs","gaussian_tail_pdf","gaussian_tail_rvs","gaussian_ziggurat_rvs","geometric_P_cdf","geometric_Q_cdf","geometric_pdf","geometric_rvs","gumbel1_P_cdf","gumbel1_Pinv_cdf","gumbel1_Q_cdf","gumbel1_Qinv_cdf","gumbel1_pdf","gumbel1_rvs","gumbel2_P_cdf","gumbel2_Pinv_cdf","gumbel2_Q_cdf","gumbel2_Qinv_cdf","gumbel2_pdf","gumbel2_rvs","hypergeometric_P_cdf","hypergeometric_Q_cdf","hypergeometric_pdf","hypergeometric_rvs","landau_pdf","landau_rvs","laplace_P_cdf","laplace_Pinv_cdf","laplace_Q_cdf","laplace_Qinv_cdf","laplace_pdf","laplace_rvs","levy_rvs","levy_skew_rvs","logarithmic_pdf","logarithmic_rvs","logistic_P_cdf","logistic_Pinv_cdf","logistic_Q_cdf","logistic_Qinv_cdf","logistic_pdf","logistic_rvs","lognormal_P_cdf","lognormal_Pinv_cdf","lognormal_Q_cdf","lognormal_Qinv_cdf","lognormal_pdf","lognormal_rvs","negative_binomial_P_cdf","negative_binomial_Q_cdf","negative_binomial_pdf","negative_binomial_rvs","pareto_P_cdf","pareto_Pinv_cdf","pareto_Q_cdf","pareto_Qinv_cdf","pareto_pdf","pareto_rvs","pascal_P_cdf","pascal_Q_cdf","pascal_pdf","pascal_rvs","poisson_P_cdf","poisson_Q_cdf","poisson_pdf","poisson_rvs","rayleigh_P_cdf","rayleigh_Pinv_cdf","rayleigh_Q_cdf","rayleigh_Qinv_cdf","rayleigh_pdf","rayleigh_rvs","rayleigh_tail_pdf","rayleigh_tail_rvs","student_t","student_t_P_cdf","student_t_Pinv_cdf","student_t_Q_cdf","student_t_Qinv_cdf","student_t_pdf","ugaussian_P_cdf","ugaussian_Pinv_cdf","ugaussian_Q_cdf","ugaussian_Qinv_cdf","ugaussian_pdf","ugaussian_ratio_method_rvs","ugaussian_rvs","ugaussian_tail_pdf","ugaussian_tail_rvs","weibull_P_cdf","weibull_Pinv_cdf","weibull_Q_cdf","weibull_Qinv_cdf","weibull_pdf","weibull_rvs","fft64_packed","fft64_unpack","fft64_unpack_iter","fft64_unpack_norm","ImpulseFilterScale","InterQuartileRange","MedianAbsoluteDeviation","QnStatistic","SnStatistic","borrow","borrow_mut","clone","clone_into","eq","fmt","from","impulse","into","median","to_owned","try_from","try_into","type_id","Gauss15","Gauss21","Gauss31","Gauss41","Gauss51","Gauss61","GaussKronrodRule","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","qag","qag_ext","qagiu","qagiu_ext","to_owned","try_from","try_into","type_id","Algorithm","Derivative","First","Linear","None","Second","Steffen","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","interpolate","interpolate_monotonic","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","FitResult","borrow","borrow_mut","clone","clone_into","covariance","covariance","eq","fmt","from","into","linear_fit","linear_fit_p","mean","params","polynomial_basis","r_squared","residual_squared","residuals","to_owned","try_from","try_into","type_id","uncertainty","DBL_EPSILON","DBL_MAX","DBL_MIN","FLT_EPSILON","FLT_MAX","FLT_MIN","LOG_DBL_EPSILON","LOG_DBL_MAX","LOG_DBL_MIN","LOG_FLT_EPSILON","LOG_FLT_MAX","LOG_FLT_MIN","LOG_MACH_EPS","LOG_SFLT_EPSILON","ROOT3_DBL_EPSILON","ROOT3_DBL_MAX","ROOT3_DBL_MIN","ROOT3_FLT_EPSILON","ROOT3_FLT_MAX","ROOT3_FLT_MIN","ROOT3_MACH_EPS","ROOT3_SFLT_EPSILON","ROOT4_DBL_EPSILON","ROOT4_DBL_MAX","ROOT4_DBL_MIN","ROOT4_FLT_EPSILON","ROOT4_FLT_MAX","ROOT4_FLT_MIN","ROOT4_MACH_EPS","ROOT4_SFLT_EPSILON","ROOT5_DBL_EPSILON","ROOT5_DBL_MAX","ROOT5_DBL_MIN","ROOT5_FLT_EPSILON","ROOT5_FLT_MAX","ROOT5_FLT_MIN","ROOT5_MACH_EPS","ROOT5_SFLT_EPSILON","ROOT6_DBL_EPSILON","ROOT6_DBL_MAX","ROOT6_DBL_MIN","ROOT6_FLT_EPSILON","ROOT6_FLT_MAX","ROOT6_FLT_MIN","ROOT6_MACH_EPS","ROOT6_SFLT_EPSILON","SFLT_EPSILON","SQRT_DBL_EPSILON","SQRT_DBL_MAX","SQRT_DBL_MIN","SQRT_FLT_EPSILON","SQRT_FLT_MAX","SQRT_FLT_MIN","SQRT_MACH_EPS","SQRT_SFLT_EPSILON","M_1_PI","M_2_PI","M_2_SQRTPI","M_E","M_EULER","M_LN10","M_LN2","M_LNPI","M_LOG10E","M_LOG2E","M_PI","M_PI_2","M_PI_4","M_SQRT1_2","M_SQRT2","M_SQRT3","M_SQRTPI","MinimizerCallback","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","iter","lower_bound","minimize","minimize_ext","minimum","to_owned","try_from","try_into","type_id","upper_bound","FitCallback","FitResult","HyperParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cond","covariance","default","eq","eq","final_residual_squared","final_residuals","fmt","fmt","from","from","initial_residual_squared","into","into","iter","mean","neval_f","niter","nonlinear_fit","nonlinear_fit_ext","params","params","r_squared","residual_squared","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uncertainty","Rng","RngType","default_rng","default_rng_with_seed","dedup_x","dedup_x_mean","sort_xy","Chi","Chi_e","Ci","Ci_e","Shi","Shi_e","Si","Si_e","angle_restrict_pos","angle_restrict_symm","atanint","atanint_e","bessel_I0","bessel_I0_e","bessel_I0_scaled","bessel_I0_scaled_e","bessel_I1","bessel_I1_e","bessel_I1_scaled","bessel_I1_scaled_e","bessel_In","bessel_In_e","bessel_In_scaled","bessel_In_scaled_e","bessel_Inu","bessel_Inu_e","bessel_Inu_scaled","bessel_Inu_scaled_e","bessel_J0","bessel_J0_e","bessel_J1","bessel_J1_e","bessel_Jn","bessel_Jn_e","bessel_Jnu","bessel_Jnu_e","bessel_K0","bessel_K0_e","bessel_K0_scaled","bessel_K0_scaled_e","bessel_K1","bessel_K1_e","bessel_K1_scaled","bessel_K1_scaled_e","bessel_Kn","bessel_Kn_e","bessel_Kn_scaled","bessel_Kn_scaled_e","bessel_Knu","bessel_Knu_e","bessel_Knu_scaled","bessel_Knu_scaled_e","bessel_Y0","bessel_Y0_e","bessel_Y1","bessel_Y1_e","bessel_Yn","bessel_Yn_e","bessel_Ynu","bessel_Ynu_e","bessel_i0_scaled","bessel_i0_scaled_e","bessel_i1_scaled","bessel_i1_scaled_e","bessel_i2_scaled","bessel_i2_scaled_e","bessel_il_scaled","bessel_il_scaled_e","bessel_j0","bessel_j0_e","bessel_j1","bessel_j1_e","bessel_j2","bessel_j2_e","bessel_jl","bessel_jl_e","bessel_k0_scaled","bessel_k0_scaled_e","bessel_k1_scaled","bessel_k1_scaled_e","bessel_k2_scaled","bessel_k2_scaled_e","bessel_kl_scaled","bessel_kl_scaled_e","bessel_ln_Knu","bessel_ln_Knu_e","bessel_y0","bessel_y0_e","bessel_y1","bessel_y1_e","bessel_y2","bessel_y2_e","bessel_yl","bessel_yl_e","bessel_zero_J0","bessel_zero_J0_e","bessel_zero_J1","bessel_zero_J1_e","bessel_zero_Jnu","bessel_zero_Jnu_e","beta","beta_e","beta_inc","beta_inc_e","choose","choose_e","clausen","clausen_e","conicalP_0","conicalP_0_e","conicalP_1","conicalP_1_e","conicalP_cyl_reg","conicalP_cyl_reg_e","conicalP_half","conicalP_half_e","conicalP_mhalf","conicalP_mhalf_e","conicalP_sph_reg","conicalP_sph_reg_e","cos","cos_e","cos_err_e","coulomb_CL_e","coupling_3j","coupling_3j_e","coupling_6j","coupling_6j_e","coupling_9j","coupling_9j_e","dawson","dawson_e","debye_1","debye_1_e","debye_2","debye_2_e","debye_3","debye_3_e","debye_4","debye_4_e","debye_5","debye_5_e","debye_6","debye_6_e","dilog","dilog_e","doublefact","doublefact_e","erf","erf_Q","erf_Q_e","erf_Z","erf_Z_e","erf_e","erfc","erfc_e","eta","eta_e","eta_int","eta_int_e","exp","exp_e","exp_err_e","exp_mult","exp_mult_e","exp_mult_err_e","expint_3","expint_3_e","expint_E1","expint_E1_e","expint_E2","expint_E2_e","expint_Ei","expint_Ei_e","expint_En","expint_En_e","expm1","expm1_e","exprel","exprel_2","exprel_2_e","exprel_e","exprel_n","exprel_n_e","fact","fact_e","fermi_dirac_0","fermi_dirac_0_e","fermi_dirac_1","fermi_dirac_1_e","fermi_dirac_2","fermi_dirac_2_e","fermi_dirac_3half","fermi_dirac_3half_e","fermi_dirac_half","fermi_dirac_half_e","fermi_dirac_inc_0","fermi_dirac_inc_0_e","fermi_dirac_int","fermi_dirac_int_e","fermi_dirac_m1","fermi_dirac_m1_e","fermi_dirac_mhalf","fermi_dirac_mhalf_e","gamma","gamma_e","gamma_inc","gamma_inc_P","gamma_inc_P_e","gamma_inc_Q","gamma_inc_Q_e","gamma_inc_e","gammainv","gammainv_e","gammastar","gammastar_e","gegenpoly_1","gegenpoly_1_e","gegenpoly_2","gegenpoly_2_e","gegenpoly_3","gegenpoly_3_e","gegenpoly_n","gegenpoly_n_e","hazard","hazard_e","hermite","hermite_deriv","hermite_deriv_e","hermite_e","hermite_func","hermite_func_der","hermite_func_der_e","hermite_func_e","hermite_func_fast","hermite_func_fast_e","hermite_func_zero","hermite_func_zero_e","hermite_prob","hermite_prob_deriv","hermite_prob_deriv_e","hermite_prob_e","hermite_prob_zero","hermite_prob_zero_e","hermite_zero","hermite_zero_e","hydrogenicR","hydrogenicR_1","hydrogenicR_1_e","hydrogenicR_e","hyperg_0F1","hyperg_0F1_e","hyperg_1F1","hyperg_1F1_e","hyperg_1F1_int","hyperg_1F1_int_e","hyperg_2F0","hyperg_2F0_e","hyperg_2F1","hyperg_2F1_conj","hyperg_2F1_conj_e","hyperg_2F1_conj_renorm","hyperg_2F1_conj_renorm_e","hyperg_2F1_e","hyperg_2F1_renorm","hyperg_2F1_renorm_e","hyperg_U","hyperg_U_e","hyperg_U_int","hyperg_U_int_e","hypot","hypot_e","hzeta","hzeta_e","laguerre_1","laguerre_1_e","laguerre_2","laguerre_2_e","laguerre_3","laguerre_3_e","laguerre_n","laguerre_n_e","lambert_W0","lambert_W0_e","lambert_Wm1","lambert_Wm1_e","legendre_H3d","legendre_H3d_0","legendre_H3d_0_e","legendre_H3d_1","legendre_H3d_1_e","legendre_H3d_e","legendre_P1","legendre_P1_e","legendre_P2","legendre_P2_e","legendre_P3","legendre_P3_e","legendre_Pl","legendre_Pl_e","legendre_Plm","legendre_Plm_e","legendre_Q0","legendre_Q0_e","legendre_Q1","legendre_Q1_e","legendre_Ql","legendre_Ql_e","legendre_array_size","legendre_sphPlm","legendre_sphPlm_e","ln_beta","ln_beta_e","ln_choose","ln_choose_e","ln_cosh","ln_cosh_e","ln_doublefact","ln_doublefact_e","ln_fact","ln_fact_e","ln_gamma","ln_gamma_e","ln_poch","ln_poch_e","ln_sinh","ln_sinh_e","log","log_1plusx","log_1plusx_e","log_1plusx_mx","log_1plusx_mx_e","log_abs","log_abs_e","log_e","log_erfc","log_erfc_e","mathieu_Mc","mathieu_Mc_e","mathieu_Ms","mathieu_Ms_e","mathieu_a","mathieu_a_e","mathieu_b","mathieu_b_e","mathieu_ce","mathieu_ce_e","mathieu_se","mathieu_se_e","multiply","multiply_e","multiply_err_e","poch","poch_e","pochrel","pochrel_e","pow_int","pow_int_e","psi","psi_1","psi_1_e","psi_1_int","psi_1_int_e","psi_1piy","psi_1piy_e","psi_e","psi_int","psi_int_e","psi_n","psi_n_e","sin","sin_e","sin_err_e","sinc","sinc_e","special_function_test","synchrotron_1","synchrotron_1_e","synchrotron_2","synchrotron_2_e","taylorcoeff","taylorcoeff_e","transport_2","transport_2_e","transport_3","transport_3_e","transport_4","transport_4_e","transport_5","transport_5_e","zeta","zeta_e","zeta_int","zeta_int_e","zeta_minus_1","zeta_minus_1_e","zeta_minus_1_int","zeta_minus_1_int_e","SpecialFunctionTestError","TEST_SNGL","TEST_SQRT_TOL0","TEST_TOL0","TEST_TOL1","TEST_TOL2","TEST_TOL3","TEST_TOL4","TEST_TOL5","TEST_TOL6","abs_diff","bad_tolerance","big_error","borrow","borrow_mut","check_result","check_result_helper","error","fmt","frac_diff","fractional_difference","from","into","sqrt","tolerance","try_from","try_into","type_id","mean","variance","variance_mean","N_ITERATIONS","TEST_MOMENTS_SIGMA_CUTOFF","TestMomentsResult","actual_count","assert_moments","borrow","borrow_mut","expected_count","from","into","sigma","test_moments","try_from","try_into","type_id"],"q":[[0,"gsl_rust"],[89,"gsl_rust::bindings"],[5689,"gsl_rust::bspline"],[5720,"gsl_rust::distribution"],[5875,"gsl_rust::fft"],[5879,"gsl_rust::filter"],[5898,"gsl_rust::integration"],[5921,"gsl_rust::interpolation"],[5954,"gsl_rust::linear_fit"],[5978,"gsl_rust::machine"],[6033,"gsl_rust::math"],[6050,"gsl_rust::minimizer"],[6069,"gsl_rust::nonlinear_fit"],[6113,"gsl_rust::rng"],[6117,"gsl_rust::sorting"],[6120,"gsl_rust::special"],[6518,"gsl_rust::special::special_function_test"],[6546,"gsl_rust::stats"],[6549,"gsl_rust::test_helpers"]],"d":["problem with user-supplied function","matrix, vector lengths are not conformant","user specified an invalid tolerance","cache limit exceeded","iteration has not converged","integral or series is divergent","input domain error, e.g sqrt(-1)","cannot reach the specified tolerance in gradient","factorization failed","generic failure","","invalid pointer","","invalid argument supplied by user","loss of accuracy","exceeded max number of iterations","malloc failed","iteration is not making progress towards solution","jacobian evaluations are not improving the solution","matrix not square","overflow","output range error, e.g. exp(1e100)","","failed because of roundoff error","iterative process is out of control","sanity check failed - shouldn’t happen","apparent singularity detected","table limit exceeded","failed to reach the specified tolerance","cannot reach the specified tolerance in F","cannot reach the specified tolerance in gradient","cannot reach the specified tolerance in X","underflow","requested feature not (yet) implemented","Unknown value.","requested feature is not supported by the hardware","","tried to divide by zero","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>k + 1</code> is equal to the spline order","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","This function computes the probability $p(k)$ of obtaining …","This function returns either 0 or 1, the result of a …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the beta …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability $p(k)$ of obtaining …","This function returns a random integer from the binomial …","This function computes the probability density $p(x,y)$ at …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the Cauchy …","This function returns a random variate from the …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the flat …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function returns a gamma variate using the algorithms …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the gamma …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function computes a Gaussian random variate using the …","This function returns a Gaussian random variate, with mean …","This function computes the probability density $p(x)$ at <code>x</code> …","This function provides random variates from the upper tail …","This function computes a Gaussian random variate using the …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability $p(k)$ of obtaining …","This function returns a random integer from the geometric …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns  a random variate from the Type-1 …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the Type-2 …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability $p(k)$ of obtaining …","This function returns a random integer from the …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the Landau …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the Laplace …","This function returns a random variate from the Levy …","This function returns a random variate from the Levy skew …","This function computes the probability $p(k)$ of obtaining …","This function returns a random integer from the logarithmic","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the logistic …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the lognormal …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability $p(k)$ of obtaining …","This function returns a random integer from the negative …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the Pareto …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability $p(k)$ of obtaining …","This function returns a random integer from the Pascal …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability $p(k)$ of obtaining …","This function returns a random integer from the Poisson …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the Rayleigh …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the tail of …","This function returns a random variate from the …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute results for the unit Gaussian …","These functions compute results for the unit Gaussian …","These functions compute results for the unit Gaussian …","These functions compute results for the tail of a unit …","These functions compute results for the tail of a unit …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","These functions compute the cumulative distribution …","This function computes the probability density $p(x)$ at <code>x</code> …","This function returns a random variate from the Weibull …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Impulse filter See …","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This function sorts and deduplicates the given data using …","This function assumes the data is sorted and free of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Magic constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","This function assumes the data is sorted.","This function assumes the data is sorted and uses the mean …","","These routines compute the integral","These routines compute the integral","These routines compute the Cosine integral","These routines compute the Cosine integral","These routines compute the integral","These routines compute the integral","These routines compute the Sine integral","These routines compute the Sine integral","These routines force the angle <code>theta</code> to lie in the range $[…","These routines force the angle <code>theta</code> to lie in the range …","These routines compute the Arctangent integral, which is …","These routines compute the Arctangent integral, which is …","These routines compute the regular modified cylindrical …","These routines compute the regular modified cylindrical …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the regular modified cylindrical …","These routines compute the regular modified cylindrical …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the regular modified cylindrical …","These routines compute the regular modified cylindrical …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the regular modified Bessel …","These routines compute the regular modified Bessel …","These routines compute the scaled regular modified Bessel …","These routines compute the scaled regular modified Bessel …","These routines compute the regular cylindrical Bessel …","These routines compute the regular cylindrical Bessel …","These routines compute the regular cylindrical Bessel …","These routines compute the regular cylindrical Bessel …","These routines compute the regular cylindrical Bessel …","These routines compute the regular cylindrical Bessel …","These routines compute the regular cylindrical Bessel …","These routines compute the regular cylindrical Bessel …","These routines compute the irregular modified cylindrical …","These routines compute the irregular modified cylindrical …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the irregular modified cylindrical …","These routines compute the irregular modified cylindrical …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the irregular modified cylindrical …","These routines compute the irregular modified cylindrical …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the irregular modified Bessel …","These routines compute the irregular modified Bessel …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the irregular cylindrical Bessel …","These routines compute the irregular cylindrical Bessel …","These routines compute the irregular cylindrical Bessel …","These routines compute the irregular cylindrical Bessel …","These routines compute the irregular cylindrical Bessel …","These routines compute the irregular cylindrical Bessel …","These routines compute the irregular cylindrical Bessel …","These routines compute the irregular cylindrical Bessel …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the scaled regular modified …","These routines compute the regular spherical Bessel …","These routines compute the regular spherical Bessel …","These routines compute the regular spherical Bessel …","These routines compute the regular spherical Bessel …","These routines compute the regular spherical Bessel …","These routines compute the regular spherical Bessel …","These routines compute the regular spherical Bessel …","These routines compute the regular spherical Bessel …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the scaled irregular modified …","These routines compute the logarithm of the irregular …","These routines compute the logarithm of the irregular …","These routines compute the irregular spherical Bessel …","These routines compute the irregular spherical Bessel …","These routines compute the irregular spherical Bessel …","These routines compute the irregular spherical Bessel …","These routines compute the irregular spherical Bessel …","These routines compute the irregular spherical Bessel …","These routines compute the irregular spherical Bessel …","These routines compute the irregular spherical Bessel …","These routines compute the location of the <code>s</code>-th positive …","These routines compute the location of the <code>s</code>-th positive …","These routines compute the location of the <code>s</code>-th positive …","These routines compute the location of the <code>s</code>-th positive …","These routines compute the location of the <code>s</code>-th positive …","These routines compute the location of the <code>s</code>-th positive …","These routines compute the Beta Function, $B(a,b) = …","These routines compute the Beta Function, $B(a,b) = …","These routines compute the normalized incomplete Beta …","These routines compute the normalized incomplete Beta …","These routines compute the combinatorial factor <code>nchoosem</code>$= …","These routines compute the combinatorial factor <code>nchoosem</code>$= …","These routines compute the Clausen integral $Cl_2(x)$.","These routines compute the Clausen integral $Cl_2(x)$.","These routines compute the conical function $P^0_{-1/2 + i …","These routines compute the conical function $P^0_{-1/2 + i …","These routines compute the conical function $P^1_{-1/2 + i …","These routines compute the conical function $P^1_{-1/2 + i …","These routines compute the Regular Cylindrical Conical …","These routines compute the Regular Cylindrical Conical …","These routines compute the irregular Spherical Conical …","These routines compute the irregular Spherical Conical …","These routines compute the regular Spherical Conical …","These routines compute the regular Spherical Conical …","These routines compute the Regular Spherical Conical …","These routines compute the Regular Spherical Conical …","These routines compute the cosine function $\\\\cos(x)$.","These routines compute the cosine function $\\\\cos(x)$.","This routine computes the cosine of an angle <code>x</code> with an …","This function computes the Coulomb wave function …","These routines compute the Wigner 3-j coefficient,","These routines compute the Wigner 3-j coefficient,","These routines compute the Wigner 6-j coefficient,","These routines compute the Wigner 6-j coefficient,","These routines compute the Wigner 9-j coefficient,","These routines compute the Wigner 9-j coefficient,","These routines compute the value of Dawson’s integral …","These routines compute the value of Dawson’s integral …","These routines compute the first-order Debye function …","These routines compute the first-order Debye function …","These routines compute the second-order Debye function …","These routines compute the second-order Debye function …","These routines compute the third-order Debye function …","These routines compute the third-order Debye function …","These routines compute the fourth-order Debye function …","These routines compute the fourth-order Debye function …","These routines compute the fifth-order Debye function …","These routines compute the fifth-order Debye function …","These routines compute the sixth-order Debye function …","These routines compute the sixth-order Debye function …","These routines compute the dilogarithm for a real …","These routines compute the dilogarithm for a real …","These routines compute the double factorial $n!! = …","These routines compute the double factorial $n!! = …","These routines compute the error function $\\\\text{erf}(x)$, …","These routines compute the upper tail of the Gaussian …","These routines compute the upper tail of the Gaussian …","These routines compute the Gaussian probability density …","These routines compute the Gaussian probability density …","These routines compute the error function $\\\\text{erf}(x)$, …","These routines compute the complementary error function …","These routines compute the complementary error function …","These routines compute the eta function $\\\\eta(s)$ for …","These routines compute the eta function $\\\\eta(s)$ for …","These routines compute the eta function $\\\\eta(n)$ for …","These routines compute the eta function $\\\\eta(n)$ for …","These routines provide an exponential function $\\\\exp(x)$ …","These routines provide an exponential function $\\\\exp(x)$ …","This function exponentiates <code>x</code> with an associated absolute …","These routines exponentiate <code>x</code> and multiply by the factor <code>y</code> …","These routines exponentiate <code>x</code> and multiply by the factor <code>y</code> …","This routine computes the product $y \\\\exp(x)$ for the …","These routines compute the third-order exponential integral","These routines compute the third-order exponential integral","These routines compute the exponential integral $E_1(x)$,","These routines compute the exponential integral $E_1(x)$,","These routines compute the second-order exponential …","These routines compute the second-order exponential …","These routines compute the exponential integral $Ei(x)$,","These routines compute the exponential integral $Ei(x)$,","These routines compute the exponential integral $E_n(x)$ …","These routines compute the exponential integral $E_n(x)$ …","These routines compute the quantity $\\\\exp(x)-1$ using an …","These routines compute the quantity $\\\\exp(x)-1$ using an …","These routines compute the quantity $(\\\\exp(x)-1)/x$ using …","These routines compute the quantity $2(\\\\exp(x)-1-x)/x^2$ …","These routines compute the quantity $2(\\\\exp(x)-1-x)/x^2$ …","These routines compute the quantity $(\\\\exp(x)-1)/x$ using …","These routines compute the $N$-relative exponential, which …","These routines compute the $N$-relative exponential, which …","These routines compute the factorial $n!$. The factorial is","These routines compute the factorial $n!$. The factorial is","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral $F…","These routines compute the complete Fermi-Dirac integral $F…","These routines compute the complete Fermi-Dirac integral $F…","These routines compute the complete Fermi-Dirac integral $F…","These routines compute the incomplete Fermi-Dirac integral …","These routines compute the incomplete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral …","These routines compute the complete Fermi-Dirac integral $F…","These routines compute the complete Fermi-Dirac integral $F…","These routines compute the Gamma function $\\\\Gamma(x)$, …","These routines compute the Gamma function $\\\\Gamma(x)$, …","These functions compute the unnormalized incomplete Gamma …","These routines compute the complementary normalized …","These routines compute the complementary normalized …","These routines compute the normalized incomplete Gamma …","These routines compute the normalized incomplete Gamma …","These functions compute the unnormalized incomplete Gamma …","These routines compute the reciprocal of the gamma …","These routines compute the reciprocal of the gamma …","These routines compute the regulated Gamma Function …","These routines compute the regulated Gamma Function …","These functions evaluate the Gegenbauer polynomials …","These functions evaluate the Gegenbauer polynomials …","These functions evaluate the Gegenbauer polynomials …","These functions evaluate the Gegenbauer polynomials …","These functions evaluate the Gegenbauer polynomials …","These functions evaluate the Gegenbauer polynomials …","These functions evaluate the Gegenbauer polynomial …","These functions evaluate the Gegenbauer polynomial …","These routines compute the hazard function for the normal …","These routines compute the hazard function for the normal …","These routines evaluate the physicist Hermite polynomial …","These routines evaluate the <code>m</code>-th derivative of the …","These routines evaluate the <code>m</code>-th derivative of the …","These routines evaluate the physicist Hermite polynomial …","These routines evaluate the Hermite function $\\\\psi_n(x)$ …","These routines evaluate the <code>m</code>-th derivative of the Hermite …","These routines evaluate the <code>m</code>-th derivative of the Hermite …","These routines evaluate the Hermite function $\\\\psi_n(x)$ …","These routines evaluate the Hermite function $\\\\psi_n(x)$ …","These routines evaluate the Hermite function $\\\\psi_n(x)$ …","These routines evaluate the <code>s</code>-th zero of the Hermite …","These routines evaluate the <code>s</code>-th zero of the Hermite …","These routines evaluate the probabilist Hermite polynomial …","These routines evaluate the <code>m</code>-th derivative of the …","These routines evaluate the <code>m</code>-th derivative of the …","These routines evaluate the probabilist Hermite polynomial …","These routines evaluate the <code>s</code>-th zero of the probabilist …","These routines evaluate the <code>s</code>-th zero of the probabilist …","These routines evaluate the <code>s</code>-th zero of the physicist …","These routines evaluate the <code>s</code>-th zero of the physicist …","These routines compute the <code>n</code>-th normalized hydrogenic …","These routines compute the lowest-order normalized …","These routines compute the lowest-order normalized …","These routines compute the <code>n</code>-th normalized hydrogenic …","These routines compute the hypergeometric function","These routines compute the hypergeometric function","These routines compute the confluent hypergeometric …","These routines compute the confluent hypergeometric …","These routines compute the confluent hypergeometric …","These routines compute the confluent hypergeometric …","These routines compute the hypergeometric function","These routines compute the hypergeometric function","These routines compute the Gauss hypergeometric function","These routines compute the Gauss hypergeometric function","These routines compute the Gauss hypergeometric function","These routines compute the renormalized Gauss …","These routines compute the renormalized Gauss …","These routines compute the Gauss hypergeometric function","These routines compute the renormalized Gauss …","These routines compute the renormalized Gauss …","These routines compute the confluent hypergeometric …","These routines compute the confluent hypergeometric …","These routines compute the confluent hypergeometric …","These routines compute the confluent hypergeometric …","These routines compute the hypotenuse function $\\\\sqrt{x^2 …","These routines compute the hypotenuse function $\\\\sqrt{x^2 …","These routines compute the Hurwitz zeta function …","These routines compute the Hurwitz zeta function …","These routines evaluate the generalized Laguerre …","These routines evaluate the generalized Laguerre …","These routines evaluate the generalized Laguerre …","These routines evaluate the generalized Laguerre …","These routines evaluate the generalized Laguerre …","These routines evaluate the generalized Laguerre …","These routines evaluate the generalized Laguerre …","These routines evaluate the generalized Laguerre …","These compute the principal branch of the Lambert W …","These compute the principal branch of the Lambert W …","These compute the secondary real-valued branch of the …","These compute the secondary real-valued branch of the …","These routines compute the <code>l</code>-th radial eigenfunction of the","These routines compute the zeroth radial eigenfunction of …","These routines compute the zeroth radial eigenfunction of …","These routines compute the first radial eigenfunction of …","These routines compute the first radial eigenfunction of …","These routines compute the <code>l</code>-th radial eigenfunction of the","These functions evaluate the Legendre polynomials $P_l(x)$ …","These functions evaluate the Legendre polynomials $P_l(x)$ …","These functions evaluate the Legendre polynomials $P_l(x)$ …","These functions evaluate the Legendre polynomials $P_l(x)$ …","These functions evaluate the Legendre polynomials $P_l(x)$ …","These functions evaluate the Legendre polynomials $P_l(x)$ …","These functions evaluate the Legendre polynomial $P_l(x)$ …","These functions evaluate the Legendre polynomial $P_l(x)$ …","These routines compute the associated Legendre polynomial …","These routines compute the associated Legendre polynomial …","These routines compute the Legendre function $Q_0(x)$ for …","These routines compute the Legendre function $Q_0(x)$ for …","These routines compute the Legendre function $Q_1(x)$ for …","These routines compute the Legendre function $Q_1(x)$ for …","These routines compute the Legendre function $Q_l(x)$ for …","These routines compute the Legendre function $Q_l(x)$ for …","This function is now deprecated and will be removed in a …","These routines compute the normalized associated Legendre …","These routines compute the normalized associated Legendre …","These routines compute the logarithm of the Beta Function, …","These routines compute the logarithm of the Beta Function, …","These routines compute the logarithm of <code>nchoosem</code>. This is …","These routines compute the logarithm of <code>nchoosem</code>. This is …","These routines compute $\\\\log(\\\\cosh(x))$ for any <code>x</code>.","These routines compute $\\\\log(\\\\cosh(x))$ for any <code>x</code>.","These routines compute the logarithm of the double …","These routines compute the logarithm of the double …","These routines compute the logarithm of the factorial of <code>n</code>,","These routines compute the logarithm of the factorial of <code>n</code>,","These routines compute the logarithm of the Gamma function,","These routines compute the logarithm of the Gamma function,","These routines compute the logarithm of the Pochhammer …","These routines compute the logarithm of the Pochhammer …","These routines compute $\\\\log(\\\\sinh(x))$ for $x &gt; 0$.","These routines compute $\\\\log(\\\\sinh(x))$ for $x &gt; 0$.","These routines compute the logarithm of <code>x</code>, $\\\\log(x)$, for …","These routines compute $\\\\log(1 + x)$ for $x &gt; -1$ using an …","These routines compute $\\\\log(1 + x)$ for $x &gt; -1$ using an …","These routines compute $\\\\log(1 + x) - x$ for $x &gt; -1$ …","These routines compute $\\\\log(1 + x) - x$ for $x &gt; -1$ …","These routines compute the logarithm of the magnitude of <code>x</code>,","These routines compute the logarithm of the magnitude of <code>x</code>,","These routines compute the logarithm of <code>x</code>, $\\\\log(x)$, for …","These routines compute the logarithm of the complementary …","These routines compute the logarithm of the complementary …","These routines compute the radial <code>j</code>-th kind Mathieu …","These routines compute the radial <code>j</code>-th kind Mathieu …","These routines compute the radial <code>j</code>-th kind Mathieu …","These routines compute the radial <code>j</code>-th kind Mathieu …","These routines compute the characteristic values $a_n(q)$, …","These routines compute the characteristic values $a_n(q)$, …","These routines compute the characteristic values $a_n(q)$, …","These routines compute the characteristic values $a_n(q)$, …","These routines compute the angular Mathieu functions …","These routines compute the angular Mathieu functions …","These routines compute the angular Mathieu functions …","These routines compute the angular Mathieu functions …","This function multiplies <code>x</code> and <code>y</code> storing the product and …","This function multiplies <code>x</code> and <code>y</code> storing the product and …","This function multiplies <code>x</code> and <code>y</code> with associated absolute …","These routines compute the Pochhammer symbol $(a)_x = …","These routines compute the Pochhammer symbol $(a)_x = …","These routines compute the relative Pochhammer symbol $((a)…","These routines compute the relative Pochhammer symbol $((a)…","These routines compute the power $x^n$ for integer <code>n</code>. The …","These routines compute the power $x^n$ for integer <code>n</code>. The …","These routines compute the digamma function $\\\\psi(x)$ for …","These routines compute the Trigamma function $\\\\psi’(x)$ …","These routines compute the Trigamma function $\\\\psi’(x)$ …","These routines compute the Trigamma function $\\\\psi’(n)$ …","These routines compute the Trigamma function $\\\\psi’(n)$ …","These routines compute the real part of the digamma …","These routines compute the real part of the digamma …","These routines compute the digamma function $\\\\psi(x)$ for …","These routines compute the digamma function $\\\\psi(n)$ for …","These routines compute the digamma function $\\\\psi(n)$ for …","These routines compute the polygamma function …","These routines compute the polygamma function …","These routines compute the sine function $\\\\sin(x)$.","These routines compute the sine function $\\\\sin(x)$.","This routine computes the sine of an angle <code>x</code> with an …","These routines compute $\\\\text{sinc}(x) = \\\\sin(\\\\pi x) / …","These routines compute $\\\\text{sinc}(x) = \\\\sin(\\\\pi x) / …","","These routines compute the first synchrotron function $x …","These routines compute the first synchrotron function $x …","These routines compute the second synchrotron function $x K…","These routines compute the second synchrotron function $x K…","These routines compute the Taylor coefficient $x^n / n!$ …","These routines compute the Taylor coefficient $x^n / n!$ …","These routines compute the transport function $J(2,x)$.","These routines compute the transport function $J(2,x)$.","These routines compute the transport function $J(3,x)$.","These routines compute the transport function $J(3,x)$.","These routines compute the transport function $J(4,x)$.","These routines compute the transport function $J(4,x)$.","These routines compute the transport function $J(5,x)$.","These routines compute the transport function $J(5,x)$.","These routines compute the Riemann zeta function $\\\\zeta(s)$","These routines compute the Riemann zeta function $\\\\zeta(s)$","These routines compute the Riemann zeta function $\\\\zeta(n)$","These routines compute the Riemann zeta function $\\\\zeta(n)$","These routines compute $\\\\zeta(s) - 1$ for arbitrary <code>s</code>, $s …","These routines compute $\\\\zeta(s) - 1$ for arbitrary <code>s</code>, $s …","These routines compute $\\\\zeta(n) - 1$ for integer <code>n</code>, $n …","These routines compute $\\\\zeta(n) - 1$ for integer <code>n</code>, $n …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Generates <code>N_ITERATIONS</code> random numbers from the given …","","",""],"i":[3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,0,2,3,2,3,0,0,2,3,2,3,0,0,2,3,2,0,0,2,3,3,2,2,3,0,0,2,3,3,0,0,0,0,0,3,0,0,0,0,0,2,3,3,2,3,2,3,2,3,2,109,134,149,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,137,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,117,156,163,114,145,146,114,115,117,149,121,134,163,164,134,137,163,136,134,156,157,158,163,164,0,19,19,19,0,0,0,19,19,19,19,19,0,19,19,19,0,0,19,0,0,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,19,19,19,19,123,126,165,136,126,119,130,140,142,144,120,126,163,163,143,144,145,123,126,165,126,120,126,119,23,27,31,35,39,43,47,51,55,59,63,67,70,73,76,79,82,85,88,91,94,97,100,103,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,163,163,123,137,129,121,127,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,163,156,163,152,153,154,155,109,20,21,22,23,26,27,30,31,34,35,38,39,42,43,46,47,50,51,54,55,58,59,62,63,66,67,70,73,76,79,82,85,88,91,94,97,100,103,138,165,112,109,109,123,107,139,128,145,157,157,136,137,146,151,165,165,119,123,150,151,163,130,165,130,130,130,165,165,165,107,139,145,146,133,133,133,110,143,143,107,145,146,143,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,157,130,140,142,144,16,17,18,19,20,21,22,23,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,76,106,108,113,133,139,123,145,146,153,155,164,112,147,147,153,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,143,124,161,162,129,119,123,112,127,130,140,141,142,144,112,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,132,144,124,109,115,109,109,109,119,119,71,72,74,75,77,78,80,81,83,84,86,87,89,90,92,93,95,96,98,99,101,102,104,105,147,156,163,119,137,147,130,117,129,115,116,117,118,120,145,137,109,110,111,121,122,125,128,134,137,139,156,157,163,156,163,130,132,135,140,141,142,144,147,109,123,163,139,139,139,110,146,134,158,119,120,136,137,165,121,119,23,27,31,35,39,43,47,51,55,59,63,67,70,73,76,79,82,85,88,91,94,97,100,103,134,137,139,121,106,107,108,113,139,145,146,134,122,140,140,142,137,135,165,165,136,137,134,142,144,123,137,120,120,120,120,119,136,143,111,152,153,154,155,132,147,126,136,136,136,136,121,22,23,26,27,30,31,34,35,38,39,42,43,46,47,50,51,54,55,58,59,62,63,66,67,112,119,124,131,132,138,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,70,73,76,79,82,85,88,91,94,97,100,103,70,73,76,79,82,85,88,91,94,97,100,103,0,126,142,143,145,145,146,146,136,114,117,131,133,146,148,114,137,140,23,27,31,35,39,43,47,51,55,59,63,67,128,159,160,134,154,155,157,70,73,76,79,82,85,88,91,94,97,100,103,76,23,23,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,110,143,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,165,137,135,110,128,131,133,137,146,148,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,141,150,151,24,25,28,29,32,33,36,37,40,41,44,45,48,49,52,53,56,57,60,61,64,65,68,69,122,128,136,137,135,117,165,114,158,163,125,164,125,158,164,158,164,164,164,164,137,122,128,145,146,133,133,133,131,131,134,126,165,0,0,169,168,169,168,168,168,169,168,168,168,169,169,169,0,169,168,169,168,169,168,168,169,168,169,168,169,168,168,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,176,176,176,176,176,176,176,176,176,176,0,176,0,176,176,176,176,177,177,177,177,177,177,0,177,177,177,177,177,177,177,177,0,0,0,0,177,177,177,177,0,0,180,179,180,180,179,179,180,179,180,179,180,179,180,179,180,179,180,179,180,0,0,179,180,179,180,179,180,179,180,179,180,0,181,181,181,181,181,181,181,181,181,181,0,0,181,181,0,181,181,181,181,181,181,181,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,182,182,182,182,182,182,182,182,182,0,0,182,182,182,182,182,182,0,0,0,183,184,183,184,183,184,183,184,183,184,185,183,184,184,184,183,184,183,184,184,183,184,183,184,184,184,0,0,183,184,184,183,183,184,183,184,183,184,183,184,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,189,189,189,189,0,0,189,189,189,0,189,189,0,189,189,189,189,0,0,0,0,0,0,191,0,191,191,191,191,191,191,0,191,191,191],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[[2,[1]]],[[2,[1]]]],[3,3],[[]],[[]],[[]],0,[[[2,[4]],[2,[4]]],5],[[3,3],5],0,0,0,[[[2,[6]],7],8],[[3,7],8],[[3,7],8],[[]],[9,[[2,[10]]]],[[]],0,0,[[]],[3,11],[[]],0,0,0,0,0,[12],0,0,0,0,0,[[]],[[]],[[],13],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[16,7],8],[[17,7],8],[[18,7],8],[[19,7],8],[[20,7],8],[[21,7],8],[[22,7],8],[[23,7],8],[[24,7],8],[[25,7],8],[[26,7],8],[[27,7],8],[[28,7],8],[[29,7],8],[[30,7],8],[[31,7],8],[[32,7],8],[[33,7],8],[[34,7],8],[[35,7],8],[[36,7],8],[[37,7],8],[[38,7],8],[[39,7],8],[[40,7],8],[[41,7],8],[[42,7],8],[[43,7],8],[[44,7],8],[[45,7],8],[[46,7],8],[[47,7],8],[[48,7],8],[[49,7],8],[[50,7],8],[[51,7],8],[[52,7],8],[[53,7],8],[[54,7],8],[[55,7],8],[[56,7],8],[[57,7],8],[[58,7],8],[[59,7],8],[[60,7],8],[[61,7],8],[[62,7],8],[[63,7],8],[[64,7],8],[[65,7],8],[[66,7],8],[[67,7],8],[[68,7],8],[[69,7],8],[[70,7],8],[[71,7],8],[[72,7],8],[[73,7],8],[[74,7],8],[[75,7],8],[[76,7],8],[[77,7],8],[[78,7],8],[[79,7],8],[[80,7],8],[[81,7],8],[[82,7],8],[[83,7],8],[[84,7],8],[[85,7],8],[[86,7],8],[[87,7],8],[[88,7],8],[[89,7],8],[[90,7],8],[[91,7],8],[[92,7],8],[[93,7],8],[[94,7],8],[[95,7],8],[[96,7],8],[[97,7],8],[[98,7],8],[[99,7],8],[[100,7],8],[[101,7],8],[[102,7],8],[[103,7],8],[[104,7],8],[[105,7],8],[[106,7],8],[[107,7],8],[[108,7],8],[[109,7],8],[[110,7],8],[[111,7],8],[[112,7],8],[[113,7],8],[[114,7],8],[[115,7],8],[[116,7],8],[[117,7],8],[[118,7],8],[[119,7],8],[[120,7],8],[[121,7],8],[[122,7],8],[[123,7],8],[[124,7],8],[[125,7],8],[[126,7],8],[[127,7],8],[[128,7],8],[[129,7],8],[[130,7],8],[[131,7],8],[[132,7],8],[[133,7],8],[[134,7],8],[[135,7],8],[[136,7],8],[[137,7],8],[[138,7],8],[[139,7],8],[[140,7],8],[[141,7],8],[[142,7],8],[[143,7],8],[[144,7],8],[[145,7],8],[[146,7],8],[[147,7],8],[[148,7],8],[[149,7],8],[[150,7],8],[[151,7],8],[[152,7],8],[[153,7],8],[[154,7],8],[[155,7],8],[[156,7],8],[[157,7],8],[[158,7],8],[[159,7],8],[[160,7],8],[[161,7],8],[[162,7],8],[[163,7],8],[[164,7],8],[[165,7],8],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],76],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[166,166],76],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],167],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[168,168],[[]],[169],0,0,[[168,168],5],[169,[[170,[168]]]],[[166,10,10,166],[[170,[169]]]],0,[[166,10,10,166],[[170,[169]]]],[[169,7],8],[[168,7],8],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0,[[171,10],10],[[172,10],171],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[171,10,171],10],[[171,10,171],10],[[171,10,171],10],[[172,10,171],171],[[10,10,10,10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[172,10],10],[[172,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[172,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[10,10,10],10],[[172,10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[172,10],10],[[172,10],10],[[10,10,10],10],[[172,10,10],10],[[172,10],10],[[171,10],10],[[171,10],10],[[171,10],10],[[172,10],171],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[171,171,171,171],10],[[171,171,171,171],10],[[171,171,171,171],10],[[172,171,171,171],171],[10,10],[172,10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[172,10],10],[[172,10,10],10],[[172,10,10,10],10],[[171,10],10],[[172,10],171],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[172,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[171,10,10],10],[[171,10,10],10],[[171,10,10],10],[[172,10,10],171],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[171,10,171],10],[[171,10,171],10],[[171,10,171],10],[[172,10,171],171],[[171,10],10],[[171,10],10],[[171,10],10],[[172,10],171],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[172,10],10],[[10,10,10],10],[[172,10,10],10],[[172,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[10,10],[10,10],[10,10],[10,10],[10,10],[172,10],[172,10],[[10,10],10],[[172,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[10,10,10],10],[[172,10,10],10],[[],170],[[],[[174,[173]]]],[[],175],[[],[[174,[10]]]],0,0,0,0,0,[[]],[[]],[176,176],[[]],[[176,176],5],[[176,7],8],[[]],[[166,10,176],[[170,[166]]]],[[]],[166,170],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[177,177],[[]],[[177,177],5],[[177,7],8],[[]],[[]],[[10,10,178],[[170,[[2,[10]]]]]],[[166,10,10,10,10,177,178],[[170,[[2,[10]]]]]],[[10,178],[[170,[[2,[10]]]]]],[[166,10,10,10,178],[[170,[[2,[10]]]]]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[179,179],[180,180],[[]],[[]],[[179,179],5],[[180,180],5],[[179,7],8],[[180,7],8],[[]],[[]],[[179,180,[174,[10]],[174,[10]]],[[170,[[174,[10]]]]]],[[179,180],[[170,[[174,[10]]]]]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,[[]],[[]],[181,181],[[]],[[181,166,166],10],0,[[181,181],5],[[181,7],8],[[]],[[]],[[166,178],[[170,[181]]]],[178,[[170,[181]]]],0,0,[10,170],0,0,0,[[]],[[],14],[[],14],[[],15],[[181,166],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[182,182],[[]],[[182,182],5],[[182,7],8],[[]],[[]],0,0,[[10,10,10,178],[[170,[10]]]],[[166,10,10,10,10,10,178,178],[[170,[10]]]],0,[[]],[[],14],[[],14],[[],15],0,0,0,0,[[]],[[]],[[]],[[]],[183,183],[184,184],[[]],[[]],0,0,[[],185],[[183,183],5],[[184,184],5],0,0,[[183,7],8],[[184,7],8],[[]],[[]],0,[[]],[[]],0,0,0,0,[178,[[170,[184]]]],[[166,10,10,10,185,178,[186,[178]]],[[170,[184]]]],0,0,0,0,[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[184,166],10],0,0,[[],172],[187,172],[178,170],[[],170],[[]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,10],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[171,10],[171,[[170,[[2,[10]]]]]],[171,10],[171,[[170,[[2,[10]]]]]],[[10,171],10],[[10,171],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10,10],10],[[10,10,10],[[170,[[2,[10]]]]]],[[171,171],10],[[171,171],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[188,10,10],10],[[188,10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[188,10,10],10],[[188,10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[10,10],[[170,[[2,[10]]]]]],[[10,10],[[170,[[2,[10]]]]]],[[188,188,188,188,188,188],10],[[188,188,188,188,188,188],[[170,[[2,[10]]]]]],[[188,188,188,188,188,188],10],[[188,188,188,188,188,188],[[170,[[2,[10]]]]]],[[188,188,188,188,188,188,188,188,188],10],[[188,188,188,188,188,188,188,188,188],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[171,10],[171,[[170,[[2,[10]]]]]],[10,10],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[188,10],[188,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10,10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,10],[10,[[170,[[2,[10]]]]]],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[171,10],[171,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[188,10,10],10],[[188,10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,188,10],10],[[188,188,10],[[170,[[2,[10]]]]]],[[188,10],[[170,[[2,[10]]]]]],[[188,10],10],[[188,188,10],10],[[188,188,10],[[170,[[2,[10]]]]]],[[188,10],[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[188,188],10],[[188,188],[[170,[[2,[10]]]]]],[[188,10],10],[[188,188,10],10],[[188,188,10],[[170,[[2,[10]]]]]],[[188,10],[[170,[[2,[10]]]]]],[[188,188],10],[[188,188],[[170,[[2,[10]]]]]],[[188,188],10],[[188,188],[[170,[[2,[10]]]]]],[[188,188,10,10],10],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[188,188,10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10,10],10],[[10,10,10],[[170,[[2,[10]]]]]],[[188,188,10],10],[[188,188,10],[[170,[[2,[10]]]]]],[[10,10,10],10],[[10,10,10],[[170,[[2,[10]]]]]],[[10,10,10,10],10],[[10,10,10,10],10],[[10,10,10,10],[[170,[[2,[10]]]]]],[[10,10,10,10],10],[[10,10,10,10],[[170,[[2,[10]]]]]],[[10,10,10,10],[[170,[[2,[10]]]]]],[[10,10,10,10],10],[[10,10,10,10],[[170,[[2,[10]]]]]],[[10,10,10],10],[[10,10,10],[[170,[[2,[10]]]]]],[[188,188,10],10],[[188,188,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[188,10,10],10],[[188,10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10,10],10],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[188,10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[188,188,10],10],[[188,188,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[188,188],188],[[188,188,10],10],[[188,188,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[171,171],10],[[171,171],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[171,10],[171,[[170,[[2,[10]]]]]],[171,10],[171,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,188,10,10],10],[[188,188,10,10],[[170,[[2,[10]]]]]],[[188,188,10,10],10],[[188,188,10,10],[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[[188,10,10],10],[[188,10,10],[[170,[[2,[10]]]]]],[[188,10,10],10],[[188,10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10,10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,10],10],[[10,10],[[170,[[2,[10]]]]]],[[10,188],10],[[10,188],[[170,[[2,[10]]]]]],[10,10],[10,10],[10,[[170,[[2,[10]]]]]],[188,10],[188,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,[[170,[[2,[10]]]]]],[188,10],[188,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[10,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],0,[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[[188,10],10],[[188,10],[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[188,10],[188,[[170,[[2,[10]]]]]],[10,10],[10,[[170,[[2,[10]]]]]],[188,10],[188,[[170,[[2,[10]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[[170,[[2,[10]]]],10,10],[[14,[189]]]],0,[[189,7],8],0,[[10,10],10],[[]],[[]],[10,10],0,[[],14],[[],14],[[],15],[[],10],[[],10],[10,10],0,0,0,0,0,[[]],[[]],0,[[]],[[]],0,[[190,190,10],191],[[],14],[[],14],[[],15]],"c":[],"p":[[8,"Clone"],[3,"ValWithError"],[4,"GSLError"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[6,"gsl_sf_result"],[15,"f64"],[6,"c_int"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"_IO_marker"],[3,"_IO_codecvt"],[3,"_IO_wide_data"],[3,"_IO_FILE"],[3,"gsl_complex"],[3,"gsl_complex_float"],[3,"gsl_block_struct"],[3,"gsl_vector"],[3,"_gsl_vector_view"],[3,"_gsl_vector_const_view"],[3,"gsl_block_complex_struct"],[3,"gsl_vector_complex"],[3,"_gsl_vector_complex_view"],[3,"_gsl_vector_complex_const_view"],[3,"gsl_block_float_struct"],[3,"gsl_vector_float"],[3,"_gsl_vector_float_view"],[3,"_gsl_vector_float_const_view"],[3,"gsl_block_complex_float_struct"],[3,"gsl_vector_complex_float"],[3,"_gsl_vector_complex_float_view"],[3,"_gsl_vector_complex_float_const_view"],[3,"gsl_block_ulong_struct"],[3,"gsl_vector_ulong"],[3,"_gsl_vector_ulong_view"],[3,"_gsl_vector_ulong_const_view"],[3,"gsl_block_long_struct"],[3,"gsl_vector_long"],[3,"_gsl_vector_long_view"],[3,"_gsl_vector_long_const_view"],[3,"gsl_block_uint_struct"],[3,"gsl_vector_uint"],[3,"_gsl_vector_uint_view"],[3,"_gsl_vector_uint_const_view"],[3,"gsl_block_int_struct"],[3,"gsl_vector_int"],[3,"_gsl_vector_int_view"],[3,"_gsl_vector_int_const_view"],[3,"gsl_block_ushort_struct"],[3,"gsl_vector_ushort"],[3,"_gsl_vector_ushort_view"],[3,"_gsl_vector_ushort_const_view"],[3,"gsl_block_short_struct"],[3,"gsl_vector_short"],[3,"_gsl_vector_short_view"],[3,"_gsl_vector_short_const_view"],[3,"gsl_block_uchar_struct"],[3,"gsl_vector_uchar"],[3,"_gsl_vector_uchar_view"],[3,"_gsl_vector_uchar_const_view"],[3,"gsl_block_char_struct"],[3,"gsl_vector_char"],[3,"_gsl_vector_char_view"],[3,"_gsl_vector_char_const_view"],[3,"gsl_matrix_complex"],[3,"_gsl_matrix_complex_view"],[3,"_gsl_matrix_complex_const_view"],[3,"gsl_matrix_complex_float"],[3,"_gsl_matrix_complex_float_view"],[3,"_gsl_matrix_complex_float_const_view"],[3,"gsl_matrix"],[3,"_gsl_matrix_view"],[3,"_gsl_matrix_const_view"],[3,"gsl_matrix_float"],[3,"_gsl_matrix_float_view"],[3,"_gsl_matrix_float_const_view"],[3,"gsl_matrix_ulong"],[3,"_gsl_matrix_ulong_view"],[3,"_gsl_matrix_ulong_const_view"],[3,"gsl_matrix_long"],[3,"_gsl_matrix_long_view"],[3,"_gsl_matrix_long_const_view"],[3,"gsl_matrix_uint"],[3,"_gsl_matrix_uint_view"],[3,"_gsl_matrix_uint_const_view"],[3,"gsl_matrix_int"],[3,"_gsl_matrix_int_view"],[3,"_gsl_matrix_int_const_view"],[3,"gsl_matrix_ushort"],[3,"_gsl_matrix_ushort_view"],[3,"_gsl_matrix_ushort_const_view"],[3,"gsl_matrix_short"],[3,"_gsl_matrix_short_view"],[3,"_gsl_matrix_short_const_view"],[3,"gsl_matrix_uchar"],[3,"_gsl_matrix_uchar_view"],[3,"_gsl_matrix_uchar_const_view"],[3,"gsl_matrix_char"],[3,"_gsl_matrix_char_view"],[3,"_gsl_matrix_char_const_view"],[3,"gsl_function_struct"],[3,"gsl_function_fdf_struct"],[3,"gsl_function_vec_struct"],[3,"gsl_bspline_workspace"],[3,"gsl_fft_real_wavetable"],[3,"gsl_fft_real_workspace"],[3,"gsl_movstat_accum"],[3,"gsl_movstat_function"],[3,"gsl_movstat_workspace"],[3,"gsl_filter_gaussian_workspace"],[3,"gsl_filter_median_workspace"],[3,"gsl_filter_rmedian_workspace"],[3,"gsl_filter_impulse_workspace"],[3,"gsl_integration_workspace"],[3,"gsl_integration_qaws_table"],[3,"gsl_integration_qawo_table"],[3,"gsl_integration_glfixed_table"],[3,"gsl_integration_cquad_ival"],[3,"gsl_integration_cquad_workspace"],[3,"gsl_integration_romberg_workspace"],[3,"gsl_integration_fixed_params"],[3,"gsl_integration_fixed_type"],[3,"gsl_integration_fixed_workspace"],[3,"gsl_interp_accel"],[3,"gsl_interp_type"],[3,"gsl_interp"],[3,"gsl_min_fminimizer_type"],[3,"gsl_min_fminimizer"],[3,"gsl_multifit_linear_workspace"],[3,"gsl_multifit_robust_type"],[3,"gsl_multifit_robust_stats"],[3,"gsl_multifit_robust_workspace"],[3,"gsl_permutation_struct"],[3,"gsl_multifit_nlinear_fdf"],[3,"gsl_multifit_nlinear_trs"],[3,"gsl_multifit_nlinear_scale"],[3,"gsl_multifit_nlinear_solver"],[3,"gsl_multifit_nlinear_parameters"],[3,"gsl_multifit_nlinear_type"],[3,"gsl_multifit_nlinear_trust_state"],[3,"gsl_multifit_nlinear_workspace"],[3,"gsl_rng_type"],[3,"gsl_rng"],[3,"gsl_ran_discrete_t"],[3,"gsl_sf_result_struct"],[3,"gsl_sf_result_e10_struct"],[3,"gsl_eigen_symm_workspace"],[3,"gsl_eigen_symmv_workspace"],[3,"gsl_eigen_herm_workspace"],[3,"gsl_eigen_hermv_workspace"],[3,"gsl_eigen_francis_workspace"],[3,"gsl_eigen_nonsymm_workspace"],[3,"gsl_eigen_nonsymmv_workspace"],[3,"gsl_eigen_gensymm_workspace"],[3,"gsl_eigen_gensymmv_workspace"],[3,"gsl_eigen_genherm_workspace"],[3,"gsl_eigen_genhermv_workspace"],[3,"gsl_eigen_gen_workspace"],[3,"gsl_eigen_genv_workspace"],[3,"gsl_sf_mathieu_workspace"],[15,"usize"],[3,"Box"],[3,"BSplineEvaluation"],[3,"BSpline"],[6,"Result"],[15,"u32"],[6,"Rng"],[6,"Complex64"],[3,"Vec"],[8,"Iterator"],[4,"ImpulseFilterScale"],[4,"GaussKronrodRule"],[8,"FnMut"],[4,"Algorithm"],[4,"Derivative"],[3,"FitResult"],[3,"MinimizerCallback"],[3,"FitCallback"],[3,"FitResult"],[6,"HyperParams"],[4,"Option"],[15,"u64"],[15,"i32"],[3,"SpecialFunctionTestError"],[8,"PartialOrd"],[3,"TestMomentsResult"]]},\
"ident_case":{"doc":"Crate for changing case of Rust identifiers.","t":"NNNNNENNLLLLLLLLLLLLLLLL","n":["CamelCase","KebabCase","LowerCase","None","PascalCase","RenameRule","ScreamingSnakeCase","SnakeCase","apply_to_field","apply_to_variant","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from_str","into","to_owned","try_from","try_into","type_id"],"q":[[0,"ident_case"]],"d":["Rename direct children to “camelCase” style.","Rename direct children to “kebab-case” style.","Rename direct children to “lowercase” style.","No-op rename rule.","Rename direct children to “PascalCase” style, as …","A casing rule for renaming Rust identifiers.","Rename direct children to “SCREAMING_SNAKE_CASE” …","Rename direct children to “snake_case” style, as …","Change case of a <code>snake_case</code> field.","Change case of a <code>PascalCase</code> variant.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,[[1,[3,[2]]],4],[[1,[3,[2]]],4],[[]],[[]],[1,1],[[]],[[],1],[[1,1],5],[[1,6],7],[[]],[2,[[8,[1]]]],[[]],[[]],[[],8],[[],8],[[],9]],"c":[],"p":[[4,"RenameRule"],[15,"str"],[8,"AsRef"],[3,"String"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","t":"NNENEENNEINNNNNNEINNNIENNNFLLLFLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFOLLLLLLLLLLLLLFLLLLLLLFLFLLLLLLLLLLLLFLLLLLLLFLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLFLLFLFLLLLLLLLLLLLLLLLLLLLOLLLLLLLLFOFLLFLFLLLLLLLLLLLLLLLLLLLLLFLLLFLLFLFLLLLLLLFLFKLFLLLLLLLLLLFLLLFKLLLLLLLLLLLLLLLFLLFFFLLLLLLLFFFLLLLLLLLLLLLFLLLLLLLLLALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLFFLLDDDDGDDDGGGGGGDDDDDDDDDGDDDGDDDGDGGGGDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLI","n":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","MultiUnzip","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","all_unique","any","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","at_most_one","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","cause","chain","chain","chunks","circular_tuple_windows","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","concat","cons_tuples","consume","contains","count","counts","counts_by","dedup","dedup_by","dedup_by_with_count","dedup_with_count","deref","deref_mut","description","diff_with","dropping","dropping_back","duplicates","duplicates_by","either","either_into","either_with","enumerate","eq","eq","eq","eq","eq","equal","exactly_one","expect_left","expect_right","extend","factor_err","factor_first","factor_into_iter","factor_iter","factor_iter_mut","factor_none","factor_ok","factor_second","fill_buf","filter_map_ok","filter_ok","find","find_map","find_or_first","find_or_last","find_position","flatten_ok","flip","flip","flush","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","for_each","foreach","format","format_with","from","from","from","from","from","from","from","group_by","has_left","has_right","hash","hash","interleave","interleave","interleave_shortest","intersperse","intersperse","intersperse_with","intersperse_with","into","into","into","into","into","into","into","into","into_future","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iter","iter_mut","iterate","izip","join","join","k_smallest","kmerge","kmerge","kmerge_by","kmerge_by","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","len","map","map_any","map_either","map_either_with","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","max_set","max_set_by","max_set_by_key","merge","merge","merge_by","merge_join_by","merge_join_by","min","min_set","min_set_by","min_set_by_key","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multipeek","multiunzip","multiunzip","multiunzip","multizip","next","next_back","next_tuple","nth","nth_back","or","or_default","or_else","pad_using","partial_cmp","partition","partition","partition_map","partition_result","peek_nth","peeking_next","peeking_take_while","permutations","poll","position","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","provide","put_back","put_back_n","rciter","read","read_exact","read_line","read_to_end","read_to_string","read_until","reduce","repeat_call","repeat_n","rev","rfind","rfold","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","seek","set_from","size_hint","sorted","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","source","step","structs","sum1","take_while_ref","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traits","tree_fold1","try_collect","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unique","unique_by","unwrap_left","unwrap_right","update","while_some","with_position","write","write_all","write_fmt","zip","zip_eq","zip_eq","zip_longest","Batching","Chunk","Chunks","CircularTupleWindows","Coalesce","Combinations","CombinationsWithReplacement","ConsTuples","Dedup","DedupBy","DedupByWithCount","DedupWithCount","Duplicates","DuplicatesBy","ExactlyOneError","FilterMapOk","FilterOk","FlattenOk","Format","FormatWith","Group","GroupBy","GroupingMap","GroupingMapBy","Groups","Interleave","InterleaveShortest","Intersperse","IntersperseWith","IntoChunks","Iterate","KMerge","KMergeBy","MapInto","MapOk","MapResults","Merge","MergeBy","MergeJoinBy","MultiPeek","MultiProduct","PadUsing","PeekNth","PeekingTakeWhile","Permutations","Positions","Powerset","ProcessResults","Product","PutBack","PutBackN","RcIter","RepeatCall","RepeatN","Step","TakeWhileRef","Tee","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Unique","UniqueBy","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","aggregate","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","count","count","count","count","count","count","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_first","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","k","last","last","last","max","max_by","max_by_key","min","min_by","min_by_key","minmax","minmax_by","minmax_by_key","n","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","peek","peek","peek_nth","peeking_next","peeking_next","peeking_next","peeking_next","product","provide","put_back","put_back","rciter","reset_peek","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value","HomogeneousTuple"],"q":[[0,"itertools"],[379,"itertools::structs"],[1326,"itertools::traits"]],"d":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of <code>fold_while</code>.","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","A value of type <code>L</code>.","Only the left value of type <code>A</code> is present.","The total number of elements that were in <code>I</code> along with the …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>.","An iterator that can be unzipped into multiple collections.","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position of …","A value of type <code>R</code>.","Only the right value of type <code>B</code> is present.","The total number of elements that were in <code>J</code> along with the …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Check whether all elements are unique (non equal).","Test whether the predicate holds for any elements in the …","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","","Converts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","Converts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.","Assert that two iterables produce equal sequences, with …","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","","Takes two iterables and creates a new iterator over both …","Chain zero or more iterators together into one sequence.","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","","","","","","","","","","","","Create an iterator that clones each element from &amp;T to T","","Return an iterator adaptor that uses the passed-in closure …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","","Returns <code>true</code> if the given item is present in this iterator.","","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Converts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…","Borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s","Mutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","","","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","Convert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.","","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an <em>iterable</em> that can group iterator elements. …","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Iterate <code>iterable</code> with a particular value inserted between …","An iterator adaptor to insert a particular value between …","Iterate <code>iterable</code> with a particular value created by a …","An iterator adaptor to insert a particular value created …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Extract the value of an either over two equivalent types.","Return the inner value.","Return the value in the continue or done.","Convert the inner value to an iterator.","","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","Return true if the value is the <code>Left</code> variant.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","If Right, return true otherwise, return false. Exclusive …","Borrow the inner value as an iterator.","Mutably borrow the inner value as an iterator.","Creates a new iterator that infinitely applies function to …","Create an iterator running multiple iterators in lockstep.","Combine all iterator elements into one String, separated …","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to <code>map_either</code>, with an added context <code>ctx</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return the maximum value of the iterable.","Return all maximum elements of an iterator.","Return all maximum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from the …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return all minimum elements of an iterator.","Return all minimum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Unzip this iterator into multiple collections.","Converts an iterator of tuples into a tuple of containers.","An iterator that generalizes <em>.zip()</em> and allows running …","","","Advances the iterator and returns the next items grouped …","","","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements …","","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","A drop-in replacement for <code>std::iter::Peekable</code> which adds a …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","","","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of an iterator so that …","Iterate over the entire iterator and multiply all the …","","Create an iterator where you can put back a single item","Create an iterator where you can put back multiple values …","Return an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.","","","","","","","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","","","","","","Traits helpful for using certain <code>Itertools</code> methods in …","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that wraps each element in a …","","","","Converts the arguments to iterators and zips them.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","A “meta iterator adaptor”. Its closure receives a …","An iterator for the elements in a single chunk.","An iterator that yields the Chunk iterators.","An iterator over all windows,wrapping back to the first …","An iterator adaptor that may join together adjacent …","An iterator to iterate through all the <code>k</code>-length …","An iterator to iterate through all the <code>n</code>-length …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter for duplicate elements.","Iterator returned for the error case of …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","An iterator adaptor that flattens <code>Result::Ok</code> values and …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator for the elements in a single group.","<code>GroupBy</code> is the storage for the lazy grouping operation.","<code>GroupingMap</code> is an intermediate struct for efficient …","<code>GroupingMapBy</code> is an intermediate struct for efficient …","An iterator that yields the Group iterators.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","<code>ChunkLazy</code> is the storage for a lazy chunking operation.","An iterator that infinitely applies function to value and …","An iterator adaptor that merges an abitrary number of base …","An iterator adaptor that merges an abitrary number of base …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","See <code>MapOk</code>.","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","See <code>multipeek()</code> for more information.","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that pads a sequence to a minimum …","See <code>peek_nth()</code> for more information.","An iterator adaptor that takes items while a closure …","An iterator adaptor that iterates through all the <code>k</code>…","An iterator adapter to get the positions of each element …","An iterator to iterate through the powerset of the …","An iterator that produces only the <code>T</code> values as long as the …","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single item …","An iterator adaptor that allows putting multiple items in …","A wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able iterator","One half of an iterator pair where both return the same …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter out duplicate elements.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>.","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …","This is the generic way to perform any operation on a …roups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","Returns the length of a combination produced by this …","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the (current) length of the pool from which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Works exactly like <code>.next()</code> with the only difference that …","Works exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>","Returns a reference to the <code>nth</code> value without advancing the …","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","Put back a single value to the front of the iterator.","Puts x in front of the iterator. The values are yielded in …","The boxed iterator.","Reset the peeking “cursor”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …","Groups elements from the <code>GroupingMap</code> source by key and …put back value <code>value</code> (builder method)","Implemented for homogeneous tuples of size up to 12."],"i":[12,29,0,29,0,0,28,52,0,0,28,5,12,52,28,27,0,0,27,27,28,0,0,5,12,52,0,5,147,147,0,5,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,5,5,12,0,147,147,5,52,12,27,28,29,5,52,12,27,28,29,12,147,5,0,0,147,147,5,12,27,28,29,5,5,12,27,28,29,0,5,147,5,147,147,147,147,0,147,0,5,147,5,147,147,147,147,147,147,5,5,5,0,147,147,147,147,5,5,5,0,5,12,27,28,29,0,147,5,5,5,5,5,5,5,5,5,5,5,5,147,147,5,5,147,147,147,147,5,12,5,5,5,12,27,28,29,0,5,147,147,147,147,147,5,147,147,147,5,5,52,12,27,28,29,147,12,12,5,12,0,147,147,0,147,0,147,5,5,52,12,12,27,28,29,5,147,147,147,147,5,28,29,5,5,27,0,12,29,5,12,5,12,5,5,0,0,0,147,147,0,147,0,147,5,5,12,5,12,5,5,5,5,5,12,5,5,147,5,12,147,147,5,12,0,147,147,147,0,147,147,0,147,0,147,147,147,147,147,147,147,0,147,0,94,147,0,5,5,147,5,5,12,12,12,147,5,0,5,147,147,0,99,147,147,5,5,147,147,147,147,147,147,147,147,147,147,147,0,147,5,0,0,0,5,5,5,5,5,5,12,0,0,0,5,5,5,12,5,12,5,5,5,5,147,5,0,147,147,147,147,147,147,147,5,147,0,147,147,147,5,12,27,28,29,5,0,147,147,5,52,12,27,28,29,5,52,12,27,28,29,147,147,147,5,52,12,27,28,29,0,147,147,5,5,147,147,147,5,5,5,0,0,147,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,109,90,123,63,37,65,73,143,139,23,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,90,123,63,37,65,73,143,139,23,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,90,37,65,85,91,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,110,111,116,115,128,81,138,126,125,130,129,136,137,95,90,37,65,85,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,110,111,116,115,128,81,138,126,125,130,129,136,137,95,63,64,131,79,91,101,92,109,130,129,139,140,90,123,63,37,65,85,91,100,101,106,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,16,72,71,71,71,71,71,71,71,71,71,79,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,63,109,19,64,131,39,39,39,39,39,39,39,39,39,39,79,78,141,79,90,123,63,37,65,73,143,139,23,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,95,95,95,95,95,95,95,95,95,95,95,95,90,123,63,37,65,73,143,139,23,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,126,90,123,63,37,65,73,143,139,23,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,78,93,96,98,141,110,111,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,109,37,91,92,109,79,79,79,79,79,79,79,79,79,37,90,123,63,37,65,143,139,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,39,39,39,39,39,39,39,39,39,38,16,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,95,95,95,95,95,95,95,95,95,95,95,65,105,131,39,39,39,39,39,39,39,39,39,39,96,111,116,130,129,137,95,95,95,95,95,95,95,95,95,95,95,95,91,109,93,98,98,109,93,98,110,79,16,109,110,111,93,90,123,63,65,85,91,100,101,106,133,92,75,76,109,19,121,132,64,105,131,39,39,39,39,39,39,39,39,39,39,16,78,93,96,98,141,110,111,116,115,81,142,138,130,129,136,137,95,95,95,95,95,95,95,95,95,95,95,95,128,79,90,37,65,85,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,110,111,116,115,128,81,138,126,125,130,129,136,137,95,16,72,71,90,123,63,37,65,73,143,139,23,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,90,123,63,37,65,73,143,139,23,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,90,123,63,37,65,73,143,139,23,144,140,85,91,100,101,106,133,92,75,76,109,19,18,121,132,124,64,105,131,39,38,16,72,71,79,78,93,96,98,141,110,111,116,115,128,81,142,138,126,125,26,130,129,136,137,95,109,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[[[5,[4,4]],2],3],[6,3],[6,3],[[1,2],3],[[[5,[4,4]],2],3],[[[5,[7,7]]]],[[[5,[7,7]]]],[5,5],[[[5,[[7,[8]],[7,[8]]]]],8],[[[5,[[7,[9]],[7,[9]]]]],9],[[[5,[[7,[10]],[7,[10]]]]],10],[[[5,[[7,[11]],[7,[11]]]]],11],[12,12],[[[13,[5]]],[[5,[13,13]]]],[[[13,[5]]],[[5,[13,13]]]],[[[5,[[14,[9]],[14,[9]]]]],9],[[[5,[[14,[10]],[14,[10]]]]],10],[[[5,[14,14]]]],[[[5,[[14,[11]],[14,[11]]]]],11],[[[5,[14,14]]]],[[[5,[[14,[8]],[14,[8]]]]],8],[5,5],[12,12],[[1,1]],[6,[[17,[15,[16,[6]]]]]],[[6,2],[[18,[6,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,15],[[6,1],[[19,[6]]]],[[[5,[20,20]]],[[15,[20]]]],[[1,1],21],0,[[6,22],[[23,[6]]]],[[[0,[6,24,4,25]]],[[26,[[0,[6,24,4,25]],[0,[0,24]]]]]],[[[5,[24,24]]],[[5,[24,24]]]],[[[12,[24,24]]],[[12,[24,24]]]],[[[27,[24]]],[[27,[24]]]],[[[28,[24]]],[[28,[24]]]],[[[29,[24]]],[[29,[24]]]],[[[5,[24,24]],[5,[24,24]]]],[[]],[[]],[[]],[[]],[[]],[1,30],[[[5,[31,31]],[5,[31,31]]],32],[[6,2],[[33,[6,2]]]],[[[5,[4,4]]],34],[[[0,[6,4]]],[[15,[35]]]],[6,36],[[6,22],[[37,[6]]]],[[6,22],[[38,[6]]]],[1],[6],[1,39],[[[5,[40,40]],22]],[[6,41],3],[[[5,[4,4]]],22],[6,[[42,[22]]]],[[6,2],[[42,[[0,[43,44]],22]]]],[6,[[45,[6]]]],[[6,2],[[46,[6,2]]]],[[6,2],[[47,[6,2]]]],[6,[[48,[6]]]],[[[5,[49,49]]]],[[[5,[50,50]]]],[[[5,[20,20]]],9],[[1,1,51],[[15,[52]]]],[[6,22],6],[[[0,[6,53]],22],[[0,[6,53]]]],[6,[[54,[6]]]],[[6,2],[[55,[6,[0,[43,44]],2]]]],[[5,56,56]],[[[5,[57,57]]]],[[5,56,56]],[1,58],[[[5,[[41,[[41,[[41,[41]]]]]],[41,[[41,[[41,[41]]]]]]]],[5,[[41,[[41,[[41,[41]]]]]],[41,[[41,[[41,[41]]]]]]]]],3],[[[12,[41,41]],[12,[41,41]]],3],[[[27,[41]],[27,[41]]],3],[[[28,[41]],[28,[41]]],3],[[[29,[41]],[29,[41]]],3],[[1,1],3],[6,[[17,[[16,[6]]]]]],[[[5,[59]],9]],[[[5,[59]],9]],[[[5,[60,60]],1]],[[[5,[17,17]]],[[17,[5]]]],[5],[[[5,[1,1]]],61],[5,61],[5,61],[[[5,[15,15]]],[[15,[5]]]],[[[5,[17,17]]],[[17,[5]]]],[5],[[[5,[40,40]]],[[17,[62]]]],[[[0,[4,6]],2],[[63,[[0,[4,6]],2]]]],[[[0,[4,6]],2],[[64,[[0,[4,6]],2]]]],[[[5,[4,4]],2],15],[[[5,[4,4]],2],15],[[6,2],15],[[6,2],15],[2,15],[[[0,[4,6]]],[[65,[[0,[4,6]],1]]]],[5,5],[12,12],[[[5,[66,66]]],[[17,[62]]]],[[[5,[67,67]],68],[[17,[69]]]],[[[5,[59,59]],68],[[17,[69]]]],[[[12,[59,59]],68],70],[[[27,[59]],68],70],[[[28,[59]],68],70],[[[29,[59]],68],70],[[1,2]],[[[5,[4,4]],2]],[[6,2],15],[[4,2],17],[[4,2],15],[[4,2],17],[[6,2],29],[[[5,[4,4]],2]],[[6,2]],[[6,9],[[71,[6]]]],[[6,9,2],[[72,[6,2]]]],[17,5],[[]],[[]],[[]],[[]],[[]],[[]],[[6,2],[[73,[41,6,2]]]],[12,3],[12,3],[[[5,[44,44]],74]],[[[12,[44,44]],74]],[[1,1],75],[[6,1],[[75,[6]]]],[[6,1],[[76,[6]]]],[1,77],[6,[[77,[6]]]],[[1,2],[[78,[2]]]],[[6,2],[[78,[6,2]]]],[5,17],[[]],[[]],[[]],[12,[[15,[5]]]],[[]],[[]],[[]],[[]],[[[0,[4,6]]],[[42,[[0,[44,43]],36]]]],[[[0,[4,6]],51],[[42,[[0,[44,43]],36]]]],[[[0,[4,6]]],[[79,[[0,[4,6]]]]]],[[[0,[4,6]],2],[[80,[[0,[4,6]],2]]]],[5],[28],[29],[[[5,[1,1]]],5],[[]],[[[27,[24]]],15],0,[12,3],[29,3],[5,3],[12,3],[5,3],[12,3],[5,5],[5,5],[2,[[81,[2]]]],0,[[1,9],82],[9,82],[[6,22],83],[1,84],[6,84],0,[[6,2],[[85,[2]]]],[[[5,[4,4]]],15],[5,15],[12,15],[[5,56],5],[[12,56],12],[5],[[[5,[86]]],86],[[5,56]],[[[5,[25,25]]],22],[[5,56],5],[[12,56,56],12],[[5,56,56],5],[[5,56,56],5],[6,[[87,[6]]]],[[5,56],5],[[12,56],12],[[[0,[4,6]],2],[[88,[[0,[4,6]],2]]]],[[[0,[4,6]],2],[[88,[[0,[4,6]],2]]]],[[5,56],5],[[12,56],12],[1,15],[6,36],[[6,2],36],[[6,2],36],[[1,1],89],[[6,1],[[89,[6]]]],[[6,1,2],[[90,[6,2]]]],[[1,1,2],[[91,[2]]]],[[6,1,2],[[91,[6,2]]]],[1,15],[6,36],[[6,2],36],[[6,2],36],[6,27],[[6,2],27],[[6,2],27],[6,92],[1,93],[6,[[93,[6]]]],[1],[[]],[[[0,[6,94]]]],[[],95],[[[5,[4,4]]],15],[[[5,[53,53]]],15],[[[0,[6,4]]],[[15,[35]]]],[[[5,[4,4]],22],15],[[[5,[53,53]],22],15],[12],[[[12,[86,86]]]],[[12,56,56]],[[6,22,2],[[96,[6,2]]]],[[[5,[[97,[[97,[[97,[97]]]]]],[97,[[97,[[97,[97]]]]]]]],[5,[[97,[[97,[[97,[97]]]]]],[97,[[97,[[97,[97]]]]]]]]],[[15,[32]]]],[[1,2],22],[[[5,[4,4]],2]],[[6,2]],[[[0,[4,6]]]],[1,98],[56,15],[[[0,[6,99]],2],[[100,[[0,[6,99]],2]]]],[[6,22],[[101,[6]]]],[[[13,[[5,[102,102]]]],103],104],[[[5,[4,4]],2],[[15,[22]]]],[6,[[15,[22]]]],[[6,2],[[15,[22]]]],[[6,2],[[15,[22]]]],[6,[[15,[22]]]],[[6,2],[[15,[22]]]],[[6,2],[[15,[22]]]],[6,[[27,[22]]]],[[6,2],[[27,[22]]]],[[6,2],[[27,[22]]]],[[6,2],[[105,[6,2]]]],[6,[[106,[6]]]],[[1,56],17],[6,[[15,[107]]]],[108],[1,109],[1,110],[1,111],[[[5,[112,112]]],[[17,[22,62]]]],[[[5,[112,112]]],[[17,[62]]]],[[[5,[40,40]],82],[[17,[22,62]]]],[[[5,[112,112]],[36,[113,114]]],[[17,[22,62]]]],[[[5,[112,112]],82],[[17,[22,62]]]],[[[5,[40,40]],113,[36,[113,114]]],[[17,[22,62]]]],[[12,56]],[2,[[115,[2]]]],[[24,22],[[116,[24]]]],[1,117],[[[5,[53,53]],2],15],[[[5,[53,53]],2]],[5,15],[12,15],[[5,56],5],[[12,56],12],[5],[[[5,[86]]],86],[[5,56]],[[[5,[118,118]],119],[[17,[120,62]]]],[[4,1],22],[[[5,[4,4]]]],[1,83],[6,83],[[6,2],83],[[6,2],83],[[6,2],83],[6,83],[[6,2],83],[[6,2],83],[[[5,[20,20]]],[[15,[20]]]],[[6,22],[[121,[6]]]],0,[6,[[15,[122]]]],[[24,2],[[123,[24,2]]]],[6],[[]],[[]],[[]],[[]],[[]],[[],82],0,[[6,2],15],[[[0,[6,4]]],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[0,[6,24]]],[[124,[[0,[6,24]],[0,[[0,[6,24]]]]]]]],[[[0,[6,4]]],[[125,[[0,[6,4]],35]]]],[[[0,[6,4]]],[[126,[[0,[6,4]],35]]]],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[2,[[128,[2]]]],[6,[[129,[6]]]],[[6,2],[[130,[6,[0,[43,44]],2]]]],[[[5,[59]]]],[[[5,[59]]]],[[6,2],[[131,[6,2]]]],[[[0,[6,4]]],[[132,[[0,[6,4]]]]]],[6,[[133,[6]]]],[[[5,[66,66]]],[[17,[22,62]]]],[[[5,[66,66]]],[[17,[62]]]],[[[5,[66,66]],134],[[17,[62]]]],[[1,1],135],[[1,1],136],[[6,1],[[136,[6]]]],[[6,1],[[137,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[79,[4]],2],[[42,[[0,[44,43]]]]]],[[[109,[4]],2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[90,[4,4,24]]],[[90,[4,4,24]]]],[[[37,[[0,[24,4]]]]],[[37,[[0,[24,4]]]]]],[[[65,[[0,[4,24]],1]]],[[65,[[0,[4,24]],1]]]],[[[85,[[0,[4,24]],24]]],[[85,[[0,[4,24]],24]]]],[[[91,[4,4,24]]],[[91,[4,4,24]]]],[[[101,[[0,[24,4]]]]],[[101,[[0,[24,4]]]]]],[[[106,[[0,[24,4]]]]],[[106,[[0,[24,4]]]]]],[[[133,[[0,[24,4]]]]],[[133,[[0,[24,4]]]]]],[[[92,[[0,[4,24,24]]]]],[[92,[[0,[4,24,24]]]]]],[[[75,[24,24]]],[[75,[24,24]]]],[[[76,[[0,[4,24]],[0,[4,24]]]]],[[76,[[0,[4,24]],[0,[4,24]]]]]],[[[109,[[0,[4,24]]]]],[[109,[[0,[4,24]]]]]],[[[19,[[0,[4,24]],24]]],[[19,[[0,[4,24]],24]]]],[[[18,[24,24]]],[[18,[24,24]]]],[[[121,[24]]],[[121,[24]]]],[[[132,[24]]],[[132,[24]]]],[[[124,[[0,[4,24]],[0,[[0,[[0,[4,24]]]],24]]]]],[[124,[[0,[4,24]],[0,[[0,[[0,[4,24]]]],24]]]]]],[[[64,[24,24]]],[[64,[24,24]]]],[[[105,[24,24]]],[[105,[24,24]]]],[[[131,[24,24]]],[[131,[24,24]]]],[[[39,[[0,[24,4]]]]],[[39,[[0,[24,4]]]]]],[[[38,[[0,[4,24]]]]],[[38,[[0,[4,24]]]]]],[[[16,[[0,[4,24]]]]],[[16,[[0,[4,24]]]]]],[[[72,[24,24]]],[[72,[24,24]]]],[[[71,[24]]],[[71,[24]]]],[[[79,[24]]],[[79,[24]]]],[[[78,[[0,[4,24]],24]]],[[78,[[0,[4,24]],24]]]],[[[93,[[0,[4,24]]]]],[[93,[[0,[4,24]]]]]],[[[96,[24,24]]],[[96,[24,24]]]],[[[98,[[0,[4,24]]]]],[[98,[[0,[4,24]]]]]],[[[110,[[0,[24,4]]]]],[[110,[[0,[24,4]]]]]],[111,111],[[[116,[24]]],[[116,[24]]]],[[[115,[24]]],[[115,[24]]]],[[[128,[24,24]]],[[128,[24,24]]]],[[[81,[24,24]]],[[81,[24,24]]]],[[[138,[[0,[35,24]]]]],[[138,[[0,[35,24]]]]]],[[[126,[[0,[4,24]],[0,[35,24]]]]],[[126,[[0,[4,24]],[0,[35,24]]]]]],[[[125,[[0,[4,24]],[0,[35,24]]]]],[[125,[[0,[4,24]],[0,[35,24]]]]]],[[[130,[[0,[24,4]],24,24]]],[[130,[[0,[24,4]],24,24]]]],[[[129,[[0,[24,4]]]]],[[129,[[0,[24,4]]]]]],[[[136,[24,24]]],[[136,[24,24]]]],[[[137,[24,24]]],[[137,[24,24]]]],[[[95,[24]]],[[95,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[63,[4,2]]],34],[[[64,[4,2]]],34],[[[131,[4,2]]],34],[[[79,[4]]],[[42,[[0,[44,43]],[0,[86,60]]]]]],[[[91,[4,4,2]]],22],[[[101,[4]]],22],[[[92,[[0,[4,24]]]]],22],[[[109,[4]]],22],[[[130,[4,[0,[43,44]],2]]],22],[[[129,[4]]],22],[[[139,[4]]]],[[[140,[4]]]],[[[90,[[0,[4,59]],[0,[4,59]]]],68],70],[[[123,[[0,[4,59]]]],68],70],[[[63,[59]],68],70],[[[37,[[0,[4,59]]]],68],70],[[[65,[[0,[4,59]],1]],68],70],[[[85,[[0,[4,59]]]],68],70],[[[91,[[0,[4,59]],[0,[4,59]]]],68],70],[[[100,[[0,[4,59]]]],68],70],[[[101,[[0,[4,59]]]],68],70],[[[106,[[0,[4,59]]]],68],70],[[[92,[[0,[4,24,59]]]],68],70],[[[75,[59,59]],68],70],[[[76,[[0,[4,59]],[0,[4,59]]]],68],70],[[[109,[[0,[4,59]]]],68],70],[[[19,[[0,[4,59]],59]],68],70],[[[18,[59]],68],70],[[[121,[59]],68],70],[[[132,[59]],68],70],[[[124,[[0,[4,59]],[0,[[0,[[0,[4,59]]]],59]]]],68],70],[[[64,[59]],68],70],[[[105,[59]],68],70],[[[131,[59]],68],70],[[[39,[[0,[4,59]],59]],68],70],[[[38,[[0,[4,59]]]],68],70],[[[16,[4]],68],70],[[[16,[[0,[4,59]]]],68],70],[[[72,[4,2]],68],70],[[[71,[4]],68],70],[[[71,[4]],68],70],[[[71,[4]],68],70],[[[71,[4]],68],70],[[[71,[4]],68],70],[[[71,[4]],68],70],[[[71,[4]],68],70],[[[71,[4]],68],70],[[[71,[4]],68],70],[[[79,[59]],68],70],[[[78,[[0,[4,59]],59]],68],70],[[[93,[[0,[4,59]]]],68],70],[[[96,[59]],68],70],[[[98,[[0,[4,59]]]],68],70],[[[141,[59,59]],68],70],[[[110,[[0,[59,4]]]],68],70],[[[111,[59]],68],70],[[[116,[59]],68],70],[[115,68],70],[[[128,[59]],68],70],[[[81,[59]],68],70],[[[142,[[0,[4,59]]]],68],70],[[[138,[[0,[35,59]]]],68],70],[[[126,[[0,[4,59]],[0,[35,59]]]],68],70],[[[125,[[0,[4,59]],[0,[35,59]]]],68],70],[[[26,[[0,[4,24,59]],[0,[0,24,59]]]],68],70],[[[130,[[0,[4,59]],[0,[59,44,43]]]],68],70],[[[129,[[0,[4,59]]]],68],70],[[[136,[59,59]],68],70],[[[137,[59,59]],68],70],[[[95,[59]],68],70],[[[63,[4,2]],2]],[[[109,[4]],2]],[[[19,[4,[0,[24,4]]]],2]],[[[64,[4,2]],2]],[[[131,[4,2]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[79,[4]],24,2],[[42,[[0,[44,43]],24]]]],[[[78,[4,0]],2]],[[[141,[4]],2]],[[[79,[4]],2],[[42,[[0,[44,43]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[]],[[],95],[[],95],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[126,[4,35]]],[[138,[35]]]],[[]],[[]],[[]],[[]],[[]],[[[73,[41,4,2]]]],[[]],[[]],[[[23,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[111,[4]]],[[111,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[109,[4]]]],[[[37,[4]]],22],[[[91,[4,4,2]]],15],[[[92,[[0,[4,24]]]]],15],[[[109,[4]]],15],[[[79,[4]]],[[42,[[0,[44,43]],31]]]],[[[79,[4]],2],[[42,[[0,[44,43]]]]]],[[[79,[4]],2],[[42,[[0,[44,43]]]]]],[[[79,[4]]],[[42,[[0,[44,43]],31]]]],[[[79,[4]],2],[[42,[[0,[44,43]]]]]],[[[79,[4]],2],[[42,[[0,[44,43]]]]]],[[[79,[4]]],[[42,[[0,[44,43]],[27,[31]]]]]],[[[79,[4]],2],[[42,[[0,[44,43]],27]]]],[[[79,[4]],2],[[42,[[0,[44,43]],27]]]],[[[37,[4]]],22],[[[90,[4,4,0]]],15],[[[123,[[0,[4,24]],2]]],15],[[[63,[4,2]]],15],[[[37,[4]]],15],[[[65,[4,1]]],15],[[[143,[41,4,2]]],15],[[[139,[41,4,2]]],15],[[[144,[4]]],15],[[[140,[4]]],15],[[[85,[4,0]]],15],[[[91,[4,4,2]]],15],[[[100,[99,2]]],15],[[[101,[4]]],15],[[[106,[4]]],15],[[[133,[4]]],15],[[[92,[[0,[4,24]]]]],15],[[[75,[4,4]]],15],[[[76,[4,4]]],15],[[[109,[4]]],15],[[[19,[4,[0,[24,4]]]]],15],[[[18,[4,2]]],15],[[[121,[4]]],15],[[[132,[4]]],15],[[[124,[4,[0,[4]]]]],15],[[[64,[4,2]]],15],[[[105,[4,2]]],15],[[[131,[4,2]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[38,[4]]],15],[[[16,[4]]],15],[[[78,[4,0]]],15],[[[93,[4]]],15],[[[96,[4,2]]],15],[[[98,[4]]],15],[[[141,[4]]],15],[[[110,[4]]],15],[[[111,[4]]],15],[[[116,[24]]],15],[[[115,[2]]],15],[[[128,[2]]],15],[[[81,[2]]],15],[[[142,[4]]],15],[[[138,[35]]],15],[[[126,[4,35]]],15],[[[125,[4,[0,[35,24]]]]],15],[[[26,[[0,[4,24]],[0,[0,24]]]]],15],[[[130,[4,[0,[43,44]],2]]],15],[[[129,[4]]],15],[[[136,[4,4]]],15],[[[137,[4,4]]],15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[[[65,[53,1]]],15],[[[105,[[0,[53,25]],2]]],15],[[[131,[53,2]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[96,[[0,[53,25]],2]]],15],[[[111,[53]]],15],[[[116,[24]]],15],[[[130,[53,[0,[43,44]],2]]],15],[[[129,[53]]],15],[[[137,[[0,[53,25]],[0,[53,25]]]]],15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[95,15],[[[91,[4,4,2]],22],15],[[[109,[4]],22],15],[[[93,[4]]],15],[[[98,[4]]],15],[[[98,[4]],22],15],[[[109,[4]],56],15],[[[93,[4]],56],15],[[[98,[4]],56],15],[[[110,[4]],56],15],[[[79,[4]]],[[42,[[0,[44,43]],[145,[[145,[[145,[145]]]]]]]]]],[108],[[[109,[4]]]],[[[110,[4]]]],0,[[[93,[4]]]],[[[90,[4,4,0]]]],[[[123,[[0,[4,24]],2]]]],[[[63,[4,2]]]],[[[65,[4,1]]]],[[[85,[4,0]]]],[[[91,[4,4,2]]]],[[[100,[99,2]]]],[[[101,[4]]]],[[[106,[4]]]],[[[133,[4]]]],[[[92,[[0,[4,24]]]]]],[[[75,[4,4]]]],[[[76,[4,4]]]],[[[109,[4]]]],[[[19,[4,[0,[24,4]]]]]],[[[121,[4]]]],[[[132,[4]]]],[[[64,[4,2]]]],[[[105,[4,2]]]],[[[131,[4,2]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[16,[4]]]],[[[78,[4,0]]]],[[[93,[4]]]],[[[96,[4,2]]]],[[[98,[4]]]],[[[141,[4]]]],[[[110,[4]]]],[[[111,[4]]]],[[[116,[24]]]],[[[115,[2]]]],[[[81,[2]]]],[[[142,[4]]]],[[[138,[35]]]],[[[130,[4,[0,[43,44]],2]]]],[[[129,[4]]]],[[[136,[4,4]]]],[[[137,[4,4]]]],[95],[95],[95],[95],[95],[95],[95],[95],[95],[95],[95],[95],0,[[[79,[4]]],[[42,[[0,[44,43]],[146,[[146,[[146,[146]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],82],[[],82],[[],82],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[],127],[[[109,[4]]],[[109,[4]]]],0],"c":[153,156,159,235,305,329,375,414,431,433],"p":[[8,"IntoIterator"],[8,"FnMut"],[15,"bool"],[8,"Iterator"],[4,"Either"],[8,"Sized"],[8,"AsMut"],[3,"OsStr"],[15,"str"],[3,"Path"],[3,"CStr"],[4,"EitherOrBoth"],[3,"Pin"],[8,"AsRef"],[4,"Option"],[3,"ExactlyOneError"],[4,"Result"],[3,"Batching"],[3,"Product"],[8,"Error"],[3,"Chain"],[15,"usize"],[3,"IntoChunks"],[8,"Clone"],[8,"ExactSizeIterator"],[3,"CircularTupleWindows"],[4,"MinMaxResult"],[4,"Position"],[4,"FoldWhile"],[3,"Cloned"],[8,"Ord"],[4,"Ordering"],[6,"Coalesce"],[8,"FromIterator"],[8,"HomogeneousTuple"],[3,"Vec"],[3,"Combinations"],[3,"CombinationsWithReplacement"],[3,"ConsTuples"],[8,"BufRead"],[8,"PartialEq"],[3,"HashMap"],[8,"Eq"],[8,"Hash"],[6,"Dedup"],[6,"DedupBy"],[6,"DedupByWithCount"],[6,"DedupWithCount"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[4,"Diff"],[8,"DoubleEndedIterator"],[6,"Duplicates"],[6,"DuplicatesBy"],[8,"FnOnce"],[8,"Into"],[3,"Enumerate"],[8,"Debug"],[8,"Extend"],[3,"IterEither"],[3,"Error"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"FlattenOk"],[8,"Write"],[8,"Display"],[3,"Formatter"],[3,"Error"],[6,"Result"],[3,"Format"],[3,"FormatWith"],[3,"GroupBy"],[8,"Hasher"],[3,"Interleave"],[3,"InterleaveShortest"],[6,"Intersperse"],[3,"IntersperseWith"],[3,"GroupingMap"],[6,"GroupingMapBy"],[3,"Iterate"],[3,"String"],[3,"IntoIter"],[6,"KMerge"],[3,"KMergeBy"],[8,"Default"],[6,"MapInto"],[6,"MapOk"],[6,"Merge"],[3,"MergeBy"],[3,"MergeJoinBy"],[3,"MultiProduct"],[3,"MultiPeek"],[8,"MultiUnzip"],[3,"Zip"],[3,"PadUsing"],[8,"PartialOrd"],[3,"PeekNth"],[8,"PeekingNext"],[3,"PeekingTakeWhile"],[3,"Permutations"],[8,"Future"],[3,"Context"],[4,"Poll"],[3,"Positions"],[3,"Powerset"],[8,"Product"],[3,"Demand"],[3,"PutBack"],[3,"PutBackN"],[3,"RcIter"],[8,"Read"],[15,"u8"],[3,"Global"],[3,"RepeatCall"],[3,"RepeatN"],[3,"Rev"],[8,"Seek"],[4,"SeekFrom"],[15,"u64"],[3,"Step"],[8,"Sum"],[3,"TakeWhileRef"],[3,"TupleCombinations"],[3,"TupleWindows"],[3,"Tuples"],[3,"TypeId"],[3,"Unfold"],[3,"Unique"],[3,"UniqueBy"],[3,"Update"],[3,"WhileSome"],[3,"WithPosition"],[3,"Arguments"],[3,"Zip"],[3,"ZipEq"],[3,"ZipLongest"],[3,"TupleBuffer"],[3,"Group"],[3,"Chunk"],[3,"ProcessResults"],[3,"Tee"],[3,"Groups"],[3,"Chunks"],[8,"Mul"],[8,"Add"],[8,"Itertools"]]},\
"katex":{"doc":"This crate offers Rust bindings to KaTeX. This allows you …","t":"CRCCCCAAFFENNNGLLLLLLLLLLLLLLLLLNNNDDEENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Error","KATEX_VERSION","Opts","OptsBuilder","OutputType","Result","error","opts","render","render_with_opts","Error","JsExecError","JsInitError","JsValueError","Result","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from","from","from","into","provide","to_owned","to_string","try_from","try_into","type_id","Html","HtmlAndMathml","Mathml","Opts","OptsBuilder","OptsBuilderError","OutputType","UninitializedField","ValidationError","add_macro","add_macro","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone_into","clone_into","clone_into","default","default","display_mode","eq","error_color","fleqn","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","leqno","macros","max_expand","max_size","min_rule_thickness","output_type","provide","set_display_mode","set_error_color","set_fleqn","set_leqno","set_max_expand","set_max_size","set_min_rule_thickness","set_output_type","set_throw_on_error","set_trust","throw_on_error","to_owned","to_owned","to_owned","to_string","trust","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"katex"],[10,"katex::error"],[32,"katex::opts"]],"d":["","KaTeX version.","","","","","Error handling for this crate.","Custom KaTeX behaviors.","Render LaTeX equation to HTML.","Render LaTeX equation to HTML with additional options.","Error type for this crate.","Error on JS execution.","Error on JS engine creation.","Error on JS value conversion.","Alias to <code>core::result::Result&lt;T, katex::Error&gt;</code>","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Outputs KaTeX in HTML only.","Outputs HTML for visual rendering and includes MathML for …","Outputs KaTeX in MathML only.","Options to be passed to KaTeX.","Builder for <code>Opts</code>.","Error type for OptsBuilder","Output type from KaTeX.","Uninitialized field","Custom validation error","Add an entry to <code>macros</code>.","Add a custom macro. Read …","","","","","","","","","","Builds a new <code>Opts</code>.","Return <code>OptsBuilder</code>.","","","","","","","","","Whether to render the math in the display mode.","","Color used for invalid LaTeX.","Whether to make display math flush left.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether to have <code>\\\\tags</code> rendered on the left instead of the …","Collection of custom macros. Read …","Limit the number of macro expansions to the specified …","Max size for user-specified sizes. If set to <code>None</code>, users …","Specifies a minimum thickness, in ems. Read …","KaTeX output type.","","Set whether to render the math in the display mode.","Set the color used for invalid LaTeX.","Set whether to make display math flush left.","Set whether to have <code>\\\\tags</code> rendered on the left instead of …","Set the limit for the number of macro expansions. If set …","Set the max size for user-specified sizes. If set to <code>None</code>, …","Set the minimum thickness, in ems. Read …","Set KaTeX output type.","Set whether to let KaTeX throw a ParseError for invalid …","Set whether to trust users’ input. Read …","Whether to let KaTeX throw a ParseError for invalid LaTeX.","","","","","Whether to trust users’ input. Read …","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,17,17,17,0,0,0,0,16,16,15,4,4,15,16,4,17,15,16,4,17,15,4,15,4,17,15,4,17,15,4,15,17,15,15,16,16,4,17,15,16,16,16,4,17,15,16,4,17,15,15,15,15,15,15,16,4,4,4,4,4,4,4,4,4,4,15,15,4,17,16,15,15,16,4,17,15,16,4,17,15,16,4,17],"f":[0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[[1,[5,[4]]],[[3,[2]]]],0,0,0,0,0,[[]],[[]],[6,6],[[]],[[6,7],8],[[6,7],8],[9,6],[[]],[10,6],[11,6],[[]],[12],[[]],[[],2],[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,[[15,2,2],15],[[4,2,2]],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,[[13,[4,16]]]],[[],15],[15,15],[4,4],[17,17],[[]],[[]],[[]],[[],15],[[],4],[[15,[19,[18]]],15],[[17,17],18],[[15,[19,[2]]],15],[[15,[19,[18]]],15],[[16,7],8],[[16,7],8],[[4,7],8],[[17,7],8],[[]],[2,16],[[]],[20,16],[[]],[[]],[[]],[[]],[[]],[[]],[[15,[19,[18]]],15],[[15,[19,[[21,[2,2]]]]],15],[[15,[19,[[23,[22]]]]],15],[[15,[19,[[23,[24]]]]],15],[[15,[19,[24]]],15],[[15,[19,[17]]],15],[12],[[4,18]],[[4,2]],[[4,18]],[[4,18]],[[4,[23,[22]]]],[[4,[23,[24]]]],[[4,24]],[[4,17]],[[4,18]],[[4,18]],[[15,[19,[18]]],15],[[]],[[]],[[]],[[],2],[[15,[19,[18]]],15],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14]],"c":[],"p":[[15,"str"],[3,"String"],[6,"Result"],[3,"Opts"],[8,"AsRef"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"ValueError"],[4,"ExecutionError"],[4,"ContextError"],[3,"Demand"],[4,"Result"],[3,"TypeId"],[3,"OptsBuilder"],[4,"OptsBuilderError"],[4,"OutputType"],[15,"bool"],[8,"Into"],[3,"UninitializedFieldError"],[3,"HashMap"],[15,"i32"],[4,"Option"],[15,"f64"]]},\
"katex_doc":{"doc":"Utilizing the html injection feature of rustdoc, we can …","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"katexit":{"doc":"Crate docs.rs","t":"X","n":["katexit"],"q":[[0,"katexit"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"libquickjs_sys":{"doc":"FFI Bindings for quickjs, a Javascript engine. See the …","t":"RRGRRRRRRRRRRRRRRRRRRRRRRGGGGRRRRRRRRRRRRRDTDDDDGTDGDDGGGDGDGGGDDDDGGGDDDDDDDTRFFFFFFFFFFFFFFFFFFFFRFFFFRRRRRRRRRRRFFFFFFFFFFFFFRRRRRRRRRFFFFFFFFFFFFFRRRRRFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFRRRRRRRRRRRRRRRRRRRRRRFFFRRRRFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFRRRRRRRRRRRRRRRRRFFFFFFFFFFFFFFFFFFFFFFRRRRFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGDDRRRRRDRMMMDGDMMMMMDMMMRRRRRRRGRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGMGGGGGGGGDGFGRGGGGGGGGGGGGGGGGDTGGGGFMGMMGGGGGGMMRGGGGGGGGGGGFGGGGGGGGGGGDMMMMGMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMFMMMMMMFFFFFFFFFFFFFFMMMFFLLLLLLLLLLLLLLLLLLLLLLFMGFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFMFFFMMMMMMMFFFFFFMMMMFMMMMMGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFMFMMMMMFMFFMFFFFMFFFFFMMMMMMMMMMMMMMMGMFMFFFFMMMMMFFFFFFMMFFFFMMMMFFMMFFFMMMFMMGFFFFGHHHMMMMMFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMGGGGGGGGGFGMFFFFFFFFFFF","n":["BUFSIZ","EOF","FILE","FILENAME_MAX","FOPEN_MAX","INT16_MAX","INT16_MIN","INT32_MAX","INT32_MIN","INT8_MAX","INT8_MIN","INTPTR_MAX","INTPTR_MIN","INT_FAST16_MAX","INT_FAST16_MIN","INT_FAST32_MAX","INT_FAST32_MIN","INT_FAST8_MAX","INT_FAST8_MIN","INT_LEAST16_MAX","INT_LEAST16_MIN","INT_LEAST32_MAX","INT_LEAST32_MIN","INT_LEAST8_MAX","INT_LEAST8_MIN","JSAtom","JSCFunction","JSCFunctionData","JSCFunctionEnum","JSCFunctionEnum_JS_CFUNC_constructor","JSCFunctionEnum_JS_CFUNC_constructor_magic","JSCFunctionEnum_JS_CFUNC_constructor_or_func","JSCFunctionEnum_JS_CFUNC_constructor_or_func_magic","JSCFunctionEnum_JS_CFUNC_f_f","JSCFunctionEnum_JS_CFUNC_f_f_f","JSCFunctionEnum_JS_CFUNC_generic","JSCFunctionEnum_JS_CFUNC_generic_magic","JSCFunctionEnum_JS_CFUNC_getter","JSCFunctionEnum_JS_CFUNC_getter_magic","JSCFunctionEnum_JS_CFUNC_iterator_next","JSCFunctionEnum_JS_CFUNC_setter","JSCFunctionEnum_JS_CFUNC_setter_magic","JSCFunctionListEntry","JSCFunctionListEntry__bindgen_ty_1","JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1","JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2","JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3","JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4","JSCFunctionMagic","JSCFunctionType","JSClass","JSClassCall","JSClassDef","JSClassExoticMethods","JSClassFinalizer","JSClassGCMark","JSClassID","JSContext","JSFreeArrayBufferDataFunc","JSGCObjectHeader","JSHostPromiseRejectionTracker","JSInterruptHandler","JSJobFunc","JSMallocFunctions","JSMallocState","JSMemoryUsage","JSModuleDef","JSModuleInitFunc","JSModuleLoaderFunc","JSModuleNormalizeFunc","JSObject","JSPropertyDescriptor","JSPropertyEnum","JSRefCountHeader","JSRuntime","JSSharedArrayBufferFunctions","JSValue","JSValueUnion","JS_ATOM_NULL","JS_AddIntrinsicBaseObjects","JS_AddIntrinsicBigDecimal","JS_AddIntrinsicBigFloat","JS_AddIntrinsicBigInt","JS_AddIntrinsicDate","JS_AddIntrinsicEval","JS_AddIntrinsicJSON","JS_AddIntrinsicMapSet","JS_AddIntrinsicOperators","JS_AddIntrinsicPromise","JS_AddIntrinsicProxy","JS_AddIntrinsicRegExp","JS_AddIntrinsicRegExpCompiler","JS_AddIntrinsicStringNormalize","JS_AddIntrinsicTypedArrays","JS_AddModuleExport","JS_AddModuleExportList","JS_AtomToCString","JS_AtomToString","JS_AtomToValue","JS_CALL_FLAG_CONSTRUCTOR","JS_Call","JS_CallConstructor","JS_CallConstructor2","JS_ComputeMemoryUsage","JS_DEFAULT_STACK_SIZE","JS_DEF_ALIAS","JS_DEF_CFUNC","JS_DEF_CGETSET","JS_DEF_CGETSET_MAGIC","JS_DEF_OBJECT","JS_DEF_PROP_DOUBLE","JS_DEF_PROP_INT32","JS_DEF_PROP_INT64","JS_DEF_PROP_STRING","JS_DEF_PROP_UNDEFINED","JS_DefineProperty","JS_DefinePropertyGetSet","JS_DefinePropertyValue","JS_DefinePropertyValueStr","JS_DefinePropertyValueUint32","JS_DeleteProperty","JS_DetachArrayBuffer","JS_DetectModule","JS_DumpMemoryUsage","JS_DupAtom","JS_DupContext","JS_DupValue","JS_DupValueRT","JS_EVAL_FLAG_BACKTRACE_BARRIER","JS_EVAL_FLAG_COMPILE_ONLY","JS_EVAL_FLAG_STRICT","JS_EVAL_FLAG_STRIP","JS_EVAL_TYPE_DIRECT","JS_EVAL_TYPE_GLOBAL","JS_EVAL_TYPE_INDIRECT","JS_EVAL_TYPE_MASK","JS_EVAL_TYPE_MODULE","JS_EnableBignumExt","JS_EnqueueJob","JS_Eval","JS_EvalFunction","JS_EvalThis","JS_ExecutePendingJob","JS_FreeAtom","JS_FreeAtomRT","JS_FreeCString","JS_FreeContext","JS_FreeRuntime","JS_FreeValue","JS_FreeValueRT","JS_GPN_ENUM_ONLY","JS_GPN_PRIVATE_MASK","JS_GPN_SET_ENUM","JS_GPN_STRING_MASK","JS_GPN_SYMBOL_MASK","JS_GetArrayBuffer","JS_GetClassProto","JS_GetContextOpaque","JS_GetException","JS_GetGlobalObject","JS_GetImportMeta","JS_GetModuleName","JS_GetOpaque","JS_GetOpaque2","JS_GetOwnProperty","JS_GetOwnPropertyNames","JS_GetPropertyInternal","JS_GetPropertyStr","JS_GetPropertyUint32","JS_GetPrototype","JS_GetRuntime","JS_GetRuntimeOpaque","JS_GetScriptOrModuleName","JS_GetTypedArrayBuffer","JS_HasProperty","JS_Invoke","JS_IsArray","JS_IsBigDecimal","JS_IsBigFloat","JS_IsBigInt","JS_IsBool","JS_IsConstructor","JS_IsError","JS_IsException","JS_IsExtensible","JS_IsFunction","JS_IsInstanceOf","JS_IsJobPending","JS_IsLiveObject","JS_IsNull","JS_IsNumber","JS_IsObject","JS_IsRegisteredClass","JS_IsString","JS_IsSymbol","JS_IsUndefined","JS_IsUninitialized","JS_JSONStringify","JS_MarkFunc","JS_MarkValue","JS_NewArray","JS_NewArrayBuffer","JS_NewArrayBufferCopy","JS_NewAtom","JS_NewAtomLen","JS_NewAtomString","JS_NewAtomUInt32","JS_NewBigInt64","JS_NewBigUint64","JS_NewBool","JS_NewCFunction","JS_NewCFunction2","JS_NewCFunctionData","JS_NewCFunctionMagic","JS_NewCModule","JS_NewClass","JS_NewClassID","JS_NewContext","JS_NewContextRaw","JS_NewError","JS_NewFloat64","JS_NewInt32","JS_NewObject","JS_NewObjectClass","JS_NewObjectProto","JS_NewObjectProtoClass","JS_NewPromiseCapability","JS_NewRuntime","JS_NewRuntime2","JS_NewString","JS_NewStringLen","JS_PARSE_JSON_EXT","JS_PROP_AUTOINIT","JS_PROP_CONFIGURABLE","JS_PROP_C_W_E","JS_PROP_ENUMERABLE","JS_PROP_GETSET","JS_PROP_HAS_CONFIGURABLE","JS_PROP_HAS_ENUMERABLE","JS_PROP_HAS_GET","JS_PROP_HAS_SET","JS_PROP_HAS_SHIFT","JS_PROP_HAS_VALUE","JS_PROP_HAS_WRITABLE","JS_PROP_LENGTH","JS_PROP_NORMAL","JS_PROP_NO_ADD","JS_PROP_NO_EXOTIC","JS_PROP_THROW","JS_PROP_THROW_STRICT","JS_PROP_TMASK","JS_PROP_VARREF","JS_PROP_WRITABLE","JS_ParseJSON","JS_ParseJSON2","JS_PreventExtensions","JS_READ_OBJ_BYTECODE","JS_READ_OBJ_REFERENCE","JS_READ_OBJ_ROM_DATA","JS_READ_OBJ_SAB","JS_ReadObject","JS_ResetUncatchableError","JS_ResolveModule","JS_RunGC","JS_RunModule","JS_SetCanBlock","JS_SetClassProto","JS_SetConstructor","JS_SetConstructorBit","JS_SetContextOpaque","JS_SetGCThreshold","JS_SetHostPromiseRejectionTracker","JS_SetInterruptHandler","JS_SetIsHTMLDDA","JS_SetMaxStackSize","JS_SetMemoryLimit","JS_SetModuleExport","JS_SetModuleExportList","JS_SetModuleLoaderFunc","JS_SetOpaque","JS_SetProperty","JS_SetPropertyFunctionList","JS_SetPropertyInt64","JS_SetPropertyInternal","JS_SetPropertyStr","JS_SetPropertyUint32","JS_SetPrototype","JS_SetRuntimeInfo","JS_SetRuntimeOpaque","JS_SetSharedArrayBufferFunctions","JS_TAG_BIG_DECIMAL","JS_TAG_BIG_FLOAT","JS_TAG_BIG_INT","JS_TAG_BOOL","JS_TAG_CATCH_OFFSET","JS_TAG_EXCEPTION","JS_TAG_FIRST","JS_TAG_FLOAT64","JS_TAG_FUNCTION_BYTECODE","JS_TAG_INT","JS_TAG_MODULE","JS_TAG_NULL","JS_TAG_OBJECT","JS_TAG_STRING","JS_TAG_SYMBOL","JS_TAG_UNDEFINED","JS_TAG_UNINITIALIZED","JS_Throw","JS_ThrowInternalError","JS_ThrowOutOfMemory","JS_ThrowRangeError","JS_ThrowReferenceError","JS_ThrowSyntaxError","JS_ThrowTypeError","JS_ToBigInt64","JS_ToBool","JS_ToCStringLen2","JS_ToFloat64","JS_ToIndex","JS_ToInt32","JS_ToInt64","JS_ToInt64Ext","JS_ToPropertyKey","JS_ToString","JS_ToUint32","JS_VALUE_GET_FLOAT64","JS_VALUE_GET_NORM_TAG","JS_VALUE_IS_NAN","JS_ValueToAtom","JS_WRITE_OBJ_BSWAP","JS_WRITE_OBJ_BYTECODE","JS_WRITE_OBJ_REFERENCE","JS_WRITE_OBJ_SAB","JS_WriteObject","JS_WriteObject2","L_ctermid","L_tmpnam","PTRDIFF_MAX","PTRDIFF_MIN","P_tmpdir","SEEK_CUR","SEEK_END","SEEK_SET","SIG_ATOMIC_MAX","SIG_ATOMIC_MIN","SIZE_MAX","TMP_MAX","UINT16_MAX","UINT32_MAX","UINT8_MAX","UINTPTR_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST8_MAX","UINT_LEAST16_MAX","UINT_LEAST32_MAX","UINT_LEAST8_MAX","WINT_MAX","WINT_MIN","_ATFILE_SOURCE","_BITS_STDINT_INTN_H","_BITS_STDINT_UINTN_H","_BITS_STDIO_LIM_H","_BITS_TIME64_H","_BITS_TYPESIZES_H","_BITS_TYPES_H","_BITS_WCHAR_H","_DEFAULT_SOURCE","_FEATURES_H","_Float32","_Float32x","_Float64","_Float64x","_G_fpos64_t","_G_fpos_t","_IOFBF","_IOLBF","_IONBF","_IO_EOF_SEEN","_IO_ERR_SEEN","_IO_FILE","_IO_USER_LOCK","_IO_backup_base","_IO_buf_base","_IO_buf_end","_IO_codecvt","_IO_lock_t","_IO_marker","_IO_read_base","_IO_read_end","_IO_read_ptr","_IO_save_base","_IO_save_end","_IO_wide_data","_IO_write_base","_IO_write_end","_IO_write_ptr","_POSIX_C_SOURCE","_POSIX_SOURCE","_STDC_PREDEF_H","_STDINT_H","_STDIO_H","_SYS_CDEFS_H","__FD_SETSIZE","__FILE","__FILE_defined","__GLIBC_MINOR__","__GLIBC_USE_DEPRECATED_GETS","__GLIBC_USE_DEPRECATED_SCANF","__GLIBC_USE_IEC_60559_BFP_EXT","__GLIBC_USE_IEC_60559_BFP_EXT_C2X","__GLIBC_USE_IEC_60559_FUNCS_EXT","__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X","__GLIBC_USE_IEC_60559_TYPES_EXT","__GLIBC_USE_ISOC2X","__GLIBC_USE_LIB_EXT2","__GLIBC__","__GNUC_VA_LIST","__GNU_LIBRARY__","__HAVE_DISTINCT_FLOAT128","__HAVE_DISTINCT_FLOAT128X","__HAVE_DISTINCT_FLOAT16","__HAVE_DISTINCT_FLOAT32","__HAVE_DISTINCT_FLOAT32X","__HAVE_DISTINCT_FLOAT64","__HAVE_DISTINCT_FLOAT64X","__HAVE_FLOAT128","__HAVE_FLOAT128X","__HAVE_FLOAT16","__HAVE_FLOAT32","__HAVE_FLOAT32X","__HAVE_FLOAT64","__HAVE_FLOAT64X","__HAVE_FLOAT64X_LONG_DOUBLE","__HAVE_FLOATN_NOT_TYPEDEF","__HAVE_GENERIC_SELECTION","__INO_T_MATCHES_INO64_T","__JS_FreeValue","__JS_FreeValueRT","__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64","__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI","__OFF_T_MATCHES_OFF64_T","__RLIM_T_MATCHES_RLIM64_T","__STATFS_MATCHES_STATFS64","__STDC_IEC_559_COMPLEX__","__STDC_IEC_559__","__STDC_ISO_10646__","__SYSCALL_WORDSIZE","__TIMESIZE","__USE_ATFILE","__USE_FORTIFY_LEVEL","__USE_ISOC11","__USE_ISOC95","__USE_ISOC99","__USE_MISC","__USE_POSIX","__USE_POSIX199309","__USE_POSIX199506","__USE_POSIX2","__USE_POSIX_IMPLICITLY","__USE_XOPEN2K","__USE_XOPEN2K8","__WORDSIZE","__WORDSIZE_TIME64_COMPAT32","____FILE_defined","_____fpos64_t_defined","_____fpos_t_defined","____mbstate_t_defined","__blkcnt64_t","__blkcnt_t","__blksize_t","__builtin_va_list","__caddr_t","__clock_t","__clockid_t","__count","__daddr_t","__dev_t","__fpos64_t","__fpos_t","__fsblkcnt64_t","__fsblkcnt_t","__fsfilcnt64_t","__fsfilcnt_t","__fsid_t","__fsword_t","__getdelim","__gid_t","__glibc_c99_flexarr_available","__gnuc_va_list","__id_t","__ino64_t","__ino_t","__int16_t","__int32_t","__int64_t","__int8_t","__int_least16_t","__int_least32_t","__int_least64_t","__int_least8_t","__intmax_t","__intptr_t","__key_t","__loff_t","__mbstate_t","__mbstate_t__bindgen_ty_1","__mode_t","__nlink_t","__off64_t","__off_t","__overflow","__pad5","__pid_t","__pos","__pos","__quad_t","__rlim64_t","__rlim_t","__sig_atomic_t","__socklen_t","__ssize_t","__state","__state","__struct_FILE_defined","__suseconds64_t","__suseconds_t","__syscall_slong_t","__syscall_ulong_t","__time_t","__timer_t","__u_char","__u_int","__u_long","__u_quad_t","__u_short","__uflow","__uid_t","__uint16_t","__uint32_t","__uint64_t","__uint8_t","__uint_least16_t","__uint_least32_t","__uint_least64_t","__uint_least8_t","__uintmax_t","__useconds_t","__va_list_tag","__val","__value","__wch","__wchb","_bindgen_ty_1","_chain","_codecvt","_cur_column","_fileno","_flags","_flags2","_freeres_buf","_freeres_list","_lock","_markers","_mode","_offset","_old_offset","_shortbuf","_unused2","_vtable_offset","_wide_data","alias","array_count","atom","atom_count","atom_size","base","binary_object_count","binary_object_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_func_count","call","cfunc","class_name","clearerr","clearerr_unlocked","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constructor","constructor_magic","constructor_or_func","cproto","ctermid","def_type","define_own_property","delete_property","dprintf","exotic","f64_","f_f","f_f_f","fast_array_count","fast_array_elements","fclose","fdopen","feof","feof_unlocked","ferror","ferror_unlocked","fflush","fflush_unlocked","fgetc","fgetc_unlocked","fgetpos","fgets","fileno","fileno_unlocked","finalizer","flags","float64","flockfile","fmemopen","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fopen","fp_offset","fpos_t","fprintf","fputc","fputc_unlocked","fputs","fread","fread_unlocked","freopen","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fscanf","fscanf1","fseek","fseeko","fsetpos","ftell","ftello","ftrylockfile","func","funlockfile","fwrite","fwrite_unlocked","gc_mark","generic","generic_magic","get","get_own_property","get_own_property_names","get_property","getc","getc_unlocked","getchar","getchar_unlocked","getdelim","getline","getset","getter","getter","getter_magic","getw","gp_offset","has_property","i32_","i64_","int32","int_fast16_t","int_fast32_t","int_fast64_t","int_fast8_t","int_least16_t","int_least32_t","int_least64_t","int_least8_t","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_enumerable","iterator_next","js_free","js_free","js_free_rt","js_func_code_size","js_func_count","js_func_pc2line_count","js_func_pc2line_size","js_func_size","js_malloc","js_malloc","js_malloc_rt","js_malloc_usable_size","js_malloc_usable_size","js_malloc_usable_size_rt","js_mallocz","js_mallocz_rt","js_realloc","js_realloc","js_realloc2","js_realloc_rt","js_strdup","js_string_codePointRange","js_strndup","len","length","magic","malloc_count","malloc_count","malloc_limit","malloc_limit","malloc_size","malloc_size","memory_used_count","memory_used_size","name","name","obj_count","obj_size","off_t","opaque","open_memstream","overflow_arg_area","pclose","perror","popen","printf","prop_count","prop_flags","prop_list","prop_size","ptr","putc","putc_unlocked","putchar","putchar_unlocked","puts","putw","ref_count","reg_save_area","remove","rename","renameat","rewind","sab_alloc","sab_dup","sab_free","sab_opaque","scanf","scanf1","set","set_property","setbuf","setbuffer","setlinebuf","setter","setter","setter_magic","setvbuf","shape_count","shape_size","size_t","snprintf","sprintf","sscanf","sscanf1","ssize_t","stderr","stdin","stdout","str_","str_count","str_size","tab","tag","tempnam","tmpfile","tmpnam","tmpnam_r","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","uint_fast16_t","uint_fast32_t","uint_fast64_t","uint_fast8_t","uint_least16_t","uint_least32_t","uint_least64_t","uint_least8_t","uintmax_t","ungetc","va_list","value","vdprintf","vfprintf","vfscanf","vfscanf1","vprintf","vscanf","vscanf1","vsnprintf","vsprintf","vsscanf","vsscanf1"],"q":[[0,"libquickjs_sys"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increment the refcount of this value","Increment the refcount of this value","","","","","","","","","","","","","","","","","","","","","Decrement the refcount of this value","Decrement the refcount of this value","","","","","","","","","","","","","","","","","","","","","","","","","","","","check if a JSValue is a BigDecimal","check if a JSValue is a BigFloat","check if a JSValue is a BigInt","check if a JSValue is a Boolean","","","check if a JSValue is an Exception","","","","","","check if a JSValue is null","check if a JSValue is a Number","check if a JSValue is an Object","","check if a JSValue is a String","check if a JSValue is a Symbol","check if a JSValue is Undefined","check if a JSValue is initialized","","","","","","","","","","","","","create a new boolean value","create a new Function based on a JSCFunction","","","create a new Function based on a JSCFunction","","","","","","","create a new f64 value, please note that if the passed f64 …","create a new int32 value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","set a property of an object identified by a JSAtom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get a u32 value from a JSValue","get a f64 value from a JSValue","same as JS_VALUE_GET_TAG, but return JS_TAG_FLOAT64 with …","check if a JSValue is a NaN valueeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeif":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[3,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[3,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2,4],[2,4],[[1,2],4],[2,4],0,0,[2,4],0,0,0,0,0,[2,4],[2,4],[2,4],0,[2,4],[2,4],[2,4],[2,4],0,0,0,0,0,0,0,0,0,0,0,0,[[1,4],2],[[1,5,6,7],2],0,0,[[1,8,6,7,9,7],2],0,0,0,0,0,0,[[1,10],2],[[1,11],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,12,2],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,13,2],13],[2,10],[2,7],[2,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[3,3],[1,1],[23,23],[24,24],[25,25],[26,26],[2,2],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,45],46],[[19,45],46],[[20,45],46],[[21,45],46],[[22,45],46],[[3,45],46],[[1,45],46],[[23,45],46],[[24,45],46],[[25,45],46],[[27,45],46],[[28,45],46],[[29,45],46],[[30,45],46],[[31,45],46],[[33,45],46],[[34,45],46],[[35,45],46],[[36,45],46],[[42,45],46],[[43,45],46],[[44,45],46],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"JSContext"],[3,"JSValue"],[3,"JSRuntime"],[15,"bool"],[6,"JSCFunction"],[6,"c_char"],[6,"c_int"],[6,"JSCFunctionMagic"],[6,"JSCFunctionEnum"],[15,"f64"],[15,"i32"],[6,"JSAtom"],[15,"u32"],[3,"__fsid_t"],[3,"__mbstate_t"],[19,"__mbstate_t__bindgen_ty_1"],[3,"_G_fpos_t"],[3,"_G_fpos64_t"],[3,"_IO_marker"],[3,"_IO_codecvt"],[3,"_IO_wide_data"],[3,"_IO_FILE"],[3,"JSObject"],[3,"JSClass"],[3,"JSRefCountHeader"],[19,"JSValueUnion"],[3,"JSMallocState"],[3,"JSMallocFunctions"],[3,"JSGCObjectHeader"],[3,"JSMemoryUsage"],[3,"JSPropertyEnum"],[3,"JSPropertyDescriptor"],[3,"JSClassExoticMethods"],[3,"JSClassDef"],[3,"JSSharedArrayBufferFunctions"],[3,"JSModuleDef"],[19,"JSCFunctionType"],[3,"JSCFunctionListEntry"],[19,"JSCFunctionListEntry__bindgen_ty_1"],[3,"JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1"],[3,"JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2"],[3,"JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3"],[3,"JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4"],[3,"__va_list_tag"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"num_complex":{"doc":"Complex numbers.","t":"DGGISSDQSKLKLLKLLLLLLLLLLLLLLKLLLKLLKLLKLLKLLLLLLFFKLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMLLLLLKLLKLLKLLKLLLLKLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLKLMKLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Complex","Complex32","Complex64","ComplexFloat","I","ONE","ParseComplexError","Real","ZERO","abs","abs","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","arg","arg","arg","as_","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atanh","atanh","atanh","borrow","borrow","borrow_mut","borrow_mut","c32","c64","cbrt","cbrt","cbrt","cis","clone","clone_into","conj","conj","conj","cos","cos","cos","cosh","cosh","cosh","default","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","exp","exp","exp","exp2","exp2","exp2","expf","expf","expf","fdiv","finv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_polar","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","im","im","into","into","inv","inv","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_one","is_zero","l1_norm","l1_norm","l1_norm","ln","ln","ln","log","log","log","log10","log10","log10","log2","log2","log2","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm","norm_sqr","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powc","powf","powf","powf","powi","powi","powi","powu","product","product","provide","re","re","re","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sin","sin","sin","sinh","sinh","sinh","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":[[0,"num_complex"]],"d":["A complex number in Cartesian form.","Alias for a <code>Complex&lt;f32&gt;</code>","Alias for a <code>Complex&lt;f64&gt;</code>","Generic trait for floating point complex numbers.","A constant <code>Complex</code> <em>i</em>, the imaginary unit.","A constant <code>Complex</code> 1.","","The type used to represent the real coefficients of this …","A constant <code>Complex</code> 0.","Returns the absolute value of the number. See also …","","Computes the arccosine of a number. Return value is in …","Computes the principal value of the inverse cosine of <code>self</code>.","","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","Computes the argument of the number.","Calculate the principal Arg of self.","","","Computes the arcsine of a number. Return value is in …","","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","","Computes the principal value of inverse hyperbolic sine of …","Computes the arctangent of a number. Return value is in …","Computes the principal value of the inverse tangent of <code>self</code>…","","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic tangent …","","","","","","Create a new <code>Complex&lt;f32&gt;</code> with arguments that can convert …","Create a new <code>Complex&lt;f64&gt;</code> with arguments that can convert …","Take the cubic root of a number.","Computes the principal value of the cube root of <code>self</code>.","","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","","","Computes the complex conjugate of the number.","Returns the complex conjugate. i.e. <code>re - i im</code>","","Computes the cosine of a number (in radians).","","Computes the cosine of <code>self</code>.","Hyperbolic cosine function.","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Returns <code>2^(self)</code>.","Computes <code>2^(self)</code>.","","Returns <code>base^(self)</code>.","Raises a floating point number to the complex power <code>self</code>.","","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Convert a polar representation into a complex number.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns the imaginary unit.","Returns the imaginary part of the number.","","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>1/self</code>","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","","Checks if the given complex number is infinite","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","","Checks if the given complex number is NaN","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Returns the natural logarithm of the number.","","Computes the principal value of natural logarithm of <code>self</code>.","Returns the logarithm of the number with respect to an …","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the base 10 logarithm of the number.","Computes the principal value of log base 10 of <code>self</code>.","","Returns the base 2 logarithm of the number.","Computes the principal value of log base 2 of <code>self</code>.","","","","","","","","","","","","","","","","","","","","Create a new <code>Complex</code>","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a real power.","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","","Returns the real part of the number.","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>. See also …","","","","","","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","","Hyperbolic sine function.","Computes the hyperbolic sine of <code>self</code>.","","Take the square root of a number.","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","","Computes the tangent of a number (in radians).","Computes the tangent of <code>self</code>.","","Hyperbolic tangent function.","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","","Convert to polar form (r, theta), such that …","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,3,3,0,60,3,60,3,60,3,3,60,3,3,3,3,3,3,3,3,3,3,3,3,3,3,60,3,3,3,60,3,3,60,3,3,60,3,3,60,3,3,3,17,3,17,0,0,60,3,3,3,3,3,60,3,3,60,3,3,60,3,3,3,17,3,3,3,3,3,3,3,3,3,3,3,3,3,17,60,3,3,60,3,3,60,3,3,3,3,3,3,3,3,3,3,3,3,17,17,3,3,3,3,17,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,60,3,3,3,17,3,3,3,60,3,3,60,3,3,60,3,3,60,3,3,3,3,60,3,3,60,3,3,60,3,3,60,3,3,60,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,60,3,3,60,3,3,60,3,3,3,3,3,17,60,3,3,60,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,60,3,3,60,3,3,60,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,60,3,3,60,3,3,3,3,3,3,3,3,3,3,3,3,3,17,3,3,3,3,3,3,3,17,3,17,3,17,3,3],"f":[0,0,0,0,0,0,0,0,0,[[]],[[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[]],[[[3,[1]]],1],[[[3,[[0,[1,2]]]]]],[[[3,[[8,[7]]]]],7],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[[10,[9]],[10,[9]]],11],[[[10,[12]],[10,[12]]],13],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[1,[[3,[1]]]],[[[3,[4]]],[[3,[4]]]],[[]],[[]],[[[3,[[0,[4,5,14]]]]],[[3,[[0,[4,5,14]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[],[[3,[15]]]],[[[17,[16]]],18],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[19]],[3,[19]]],20],[[[17,[19]],[17,[19]]],20],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]],1],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[21,5,22,4]]]],23],24],[[[3,[[0,[25,5,22,4]]]],23],24],[[[3,[26]],23],24],[[[3,[[0,[27,5,22,4]]]],23],24],[[[3,[[0,[28,5,22,4]]]],23],24],[[[3,[[0,[29,5,22,4]]]],23],24],[[[3,[[0,[30,5,22,4]]]],23],24],[[[3,[[0,[31,5,22,4]]]],23],24],[[[17,[26]],23],24],[[[17,[27]],23],24],[32,[[34,[[3,[[0,[33,5]]]]]]]],[[[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[]],[[[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[]],[9,[[34,[[3,[[0,[35,5]]]]]]]],[12,[[34,[[3,[[0,[35,5]]]]]]]],[36,[[34,[[3,[[0,[35,5]]]]]]]],[37,[[34,[[3,[[0,[35,5]]]]]]]],[38,[[34,[[3,[[0,[35,5]]]]]]]],[39,[[34,[[3,[[0,[35,5]]]]]]]],[40,[[34,[[3,[[0,[35,5]]]]]]]],[41,[[34,[[3,[[0,[35,5]]]]]]]],[[1,1],[[3,[1]]]],[18,[[43,[[3,[[0,[42,5,4]]]]]]]],[[18,44],[[43,[[3,[[0,[5,4]]]]]]]],[45,[[34,[[3,[[0,[35,5]]]]]]]],[46,[[34,[[3,[[0,[35,5]]]]]]]],[44,[[34,[[3,[[0,[35,5]]]]]]]],[47,[[34,[[3,[[0,[35,5]]]]]]]],[48,[[34,[[3,[[0,[35,5]]]]]]]],[49,[[34,[[3,[[0,[35,5]]]]]]]],[[[3,[50]],51]],[[],[[3,[[0,[4,5]]]]]],[[]],[[[3,[[0,[1,2]]]]]],0,[[]],[[]],[[[3,[[0,[4,5,14]]]]]],[[[3,[[0,[4,5,14]]]]]],[[[3,[[0,[4,5,14]]]]],[[3,[[0,[4,5,14]]]]]],[[],20],[[[3,[[0,[1,2]]]]],20],[[[3,[52]]],20],[[],20],[[[3,[[0,[1,2]]]]],20],[[[3,[52]]],20],[[],20],[[[3,[[0,[1,2]]]]],20],[[[3,[52]]],20],[[],20],[[[3,[52]]],20],[[[3,[[0,[1,2]]]]],20],[[[3,[[0,[4,5]]]]],20],[[[3,[[0,[4,5]]]]],20],[[]],[[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,53]]]]],[[0,[4,53]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],1],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5,54]]]],[3,[[0,[4,5,54]]]],[3,[[0,[4,5,54]]]]],[[3,[[0,[4,5,54]]]]]],[[[3,[[0,[4,5,54]]]],[3,[[0,[4,5,54]]]],[3,[[0,[4,5,54]]]]],[[3,[[0,[4,5,54]]]]]],[[[3,[[0,[4,6,55]]]],[3,[[0,[4,6,55]]]],[3,[[0,[4,6,55]]]]]],[[[3,[[0,[4,6,55]]]],[3,[[0,[4,6,55]]]],[3,[[0,[4,6,55]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,5,14]]]]]],[[[3,[[0,[4,5,14]]]]]],[[],3],[[[3,[1]]],1],[[[3,[[0,[4,5]]]]],[[0,[4,5]]]],[[],[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5,14]]]],36]],[[[3,[[0,[4,5,14]]]],37]],[[[3,[[0,[4,5]]]],47]],[[[3,[1]],12]],[[[3,[[0,[4,5]]]],48]],[[[3,[[0,[4,5]]]],47]],[[[3,[1]],9]],[[[3,[[0,[4,5,14]]]],39]],[[[3,[1]],[3,[1]]]],[[[3,[1]],12]],[[[3,[1]],9]],[[[3,[[0,[4,5]]]],49]],[[[3,[[0,[4,5,14]]]],38]],[[[3,[[0,[4,5,14]]]],41]],[[[3,[[0,[4,5,14]]]],37]],[[[3,[1]],12]],[[[3,[[0,[4,5]]]],48]],[[[3,[[0,[4,5,14]]]],36]],[[[3,[1]],9]],[[[3,[[0,[4,5,14]]]],40]],[[[3,[[0,[4,5]]]],46]],[[[3,[1]],[3,[1]]]],[[[3,[1]],9]],[[[3,[1]],12]],[[[3,[[0,[4,5,14]]]],38]],[[[3,[1]],[3,[1]]]],[[[3,[[0,[4,5,14]]]],40]],[[[3,[[0,[4,5]]]],46]],[[[3,[[0,[4,5,14]]]],41]],[[[3,[[0,[4,5]]]],44]],[[[3,[[0,[4,5]]]],45]],[[[3,[[0,[4,5,14]]]],39]],[[[3,[[0,[4,5]]]],49]],[[[3,[1]],[3,[1]]]],[[[3,[[0,[4,5]]]],45]],[[[3,[[0,[4,5]]]],44]],[3,3],[[[3,[[0,[1,2]]]],3],3],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]],1],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[38],[[[3,[[0,[1,2]]]],38],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5,14]]]],38],[[3,[[0,[4,5,14]]]]]],[[[3,[[0,[4,5]]]],44],[[3,[[0,[4,5]]]]]],[56,[[3,[[0,[5,4]]]]]],[56,[[3,[[0,[5,4]]]]]],[57],[[]],[[[3,[[0,[1,2]]]]]],0,[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[56,[[3,[[0,[5,4]]]]]],[56,[[3,[[0,[5,4]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[32,5]]]]],[[34,[9]]]],[[[3,[[0,[32,5]]]]],[[34,[12]]]],[[[3,[[0,[32,5]]]]],[[34,[36]]]],[[[3,[[0,[32,5]]]]],[[34,[37]]]],[[[3,[[0,[32,5]]]]],[[34,[38]]]],[[[3,[[0,[32,5]]]]],[[34,[39]]]],[[[3,[[0,[32,5]]]]],[[34,[40]]]],[[[3,[[0,[32,5]]]]],[[34,[41]]]],[[]],[[[3,[1]]]],[[],58],[[],58],[[[3,[[0,[32,5]]]]],[[34,[45]]]],[[[3,[[0,[32,5]]]]],[[34,[46]]]],[[[3,[[0,[32,5]]]]],[[34,[44]]]],[[[3,[[0,[32,5]]]]],[[34,[47]]]],[[[3,[[0,[32,5]]]]],[[34,[48]]]],[[[3,[[0,[32,5]]]]],[[34,[49]]]],[[],43],[[],43],[[],43],[[],43],[[],59],[[],59],[[[3,[[0,[4,5]]]],[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[],[[3,[[0,[4,5]]]]]]],"c":[],"p":[[8,"Float"],[8,"FloatConst"],[3,"Complex"],[8,"Clone"],[8,"Num"],[8,"NumAssign"],[8,"Copy"],[8,"AsPrimitive"],[15,"f32"],[8,"Into"],[6,"Complex32"],[15,"f64"],[6,"Complex64"],[8,"Neg"],[8,"Default"],[8,"Error"],[3,"ParseComplexError"],[15,"str"],[8,"PartialEq"],[15,"bool"],[8,"LowerHex"],[8,"PartialOrd"],[3,"Formatter"],[6,"Result"],[8,"LowerExp"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"UpperHex"],[8,"UpperExp"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[8,"FromPrimitive"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[8,"FromStr"],[4,"Result"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Hash"],[8,"Hasher"],[8,"FloatCore"],[8,"Signed"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Iterator"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"ComplexFloat"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCCCNCCCECCQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLIKLKKKKKKKKKKLLLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKKLIISISILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKLKKLKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","ConstOne","ConstZero","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","TotalOrder","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","clamp","clamp","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","total_cmp","trunc","trunc","ConstOne","ConstZero","ONE","One","ZERO","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_div_rem_euclid","checked_rem_euclid","div_euclid","div_rem_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[92,"num_traits::bounds"],[99,"num_traits::cast"],[134,"num_traits::float"],[249,"num_traits::identities"],[263,"num_traits::int"],[283,"num_traits::ops"],[291,"num_traits::ops::bytes"],[302,"num_traits::ops::checked"],[318,"num_traits::ops::euclid"],[326,"num_traits::ops::inv"],[329,"num_traits::ops::mul_add"],[334,"num_traits::ops::overflowing"],[340,"num_traits::ops::saturating"],[349,"num_traits::ops::wrapping"],[361,"num_traits::pow"],[366,"num_traits::real"],[414,"num_traits::sign"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Trait for floating point numbers that provide an …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","A value bounded by a minimum and a maximum","Clamps a value between a min and max.","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the ordering between <code>self</code> and <code>other</code>.","Return the integer part of a number.","Return the integer part of a number.","Defines an associated constant representing the …","Defines an associated constant representing the additive …","The multiplicative identity element of <code>Self</code>, <code>1</code>.","Defines a multiplicative identity element for <code>Self</code>.","The additive identity element of <code>Self</code>, <code>0</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Returns both the quotient and remainder from checked …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Returns both the quotient and remainder from Euclidean …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,40,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,40,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,41,42,41,43,0,0,0,0,44,0,11,45,45,45,45,45,45,45,45,45,45,45,45,45,45,13,13,13,13,13,13,13,13,13,13,13,13,13,13,46,46,46,46,46,46,46,46,46,46,0,0,0,46,46,46,46,46,46,46,46,46,0,47,48,47,47,47,47,47,47,47,47,47,47,48,48,47,48,47,47,47,47,48,47,47,47,47,47,48,47,48,47,48,47,48,47,47,48,47,48,47,48,47,48,47,48,47,48,48,47,47,47,47,47,47,47,48,48,47,47,48,48,47,48,47,47,48,47,48,47,48,47,47,47,48,47,48,47,48,47,48,47,47,47,47,47,47,48,47,48,47,49,47,48,0,0,50,0,51,0,34,35,0,34,34,35,0,35,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,0,0,0,0,0,53,54,0,0,0,54,54,54,53,53,53,0,0,0,0,0,0,0,0,55,56,37,57,58,59,60,61,0,0,62,62,62,63,63,63,0,64,64,0,0,65,65,66,0,0,0,67,68,69,0,0,0,0,70,71,72,70,73,0,0,0,0,0,0,74,75,76,77,78,79,80,0,0,0,80,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,0,0,39,0,39,39,39,0,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[],[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,29]]]]]]]]]]]]]]]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[[]],[[]],0,0,0,0,0,0,[33,31],[[],31],[[],34],[[]],[[]],[[]],[[],35],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[],12],[[]],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[36,34,37]],26],[[12,[[0,[36,34,37]]]]]],[[[0,[36,34,[38,[[0,[36,34,[38,[[0,[36,34,[38,[[0,[36,34,[38,[[0,[36,34,38]]]]]]]]]]]]]]]]]],26],[[0,[36,34,[38,[[0,[36,34,[38,[[0,[36,34,[38,[[0,[36,34,[38,[[0,[36,34,38]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[39,39],[[]],[[39,39],39],[[]],[[],31],[[],31],[39,39],[[]]],"c":[],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized"],[8,"Div"],[8,"Add"],[4,"FpCategory"],[15,"bool"],[4,"Ordering"],[8,"PartialEq"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"TotalOrder"],[8,"ConstOne"],[8,"ConstZero"],[8,"PrimInt"],[8,"ToBytes"],[8,"FromBytes"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"once_cell":{"doc":"Overview","t":"AAADDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":[[0,"once_cell"],[3,"once_cell::race"],[64,"once_cell::sync"],[111,"once_cell::unsync"]],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,15,17,15,17,15,15,15,15,17,17,17,15,15,17,17,17,15,15,15,17,15,17,15,17,15,15,15,15,17,15,17,15,17,15,15,15,15,17,15,15,17,15,17,15,15,0,0,21,22,21,22,21,21,21,21,22,22,22,21,21,22,22,22,21,21,21,22,21,22,21,22,21,21,21,22,21,22,21,22,21,21,21,21,22,21,21,22,21,22,21],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[2],[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[]],[[]],[[]],[[]],[1,7],[2,7],[3,[[7,[8]]]],[4,[[7,[9]]]],[[1,10]],[[2,10]],[[3,10],8],[[4,10],9],[[1,10],11],[[2,10],11],[[3,10],[[11,[8]]]],[[4,10],[[11,[9]]]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[1,11],[[2,12],[[11,[12]]]],[[3,8],11],[[4,9],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],13],[[],13],[[],13],[[],13],0,0,[[]],[[]],[[]],[[]],[[[15,[14]]],[[15,[14]]]],[[[15,[14]],[15,[14]]]],[[]],[[],15],[[],[[17,[16]]]],[[[17,[10]]]],[[[17,[10]]]],[[[15,[18]],[15,[18]]],9],[[[15,[19]],5],6],[[[17,[19]],5],6],[[[17,[10]]]],[[[17,[10]]]],[20],[[],15],[[]],[[]],[15,7],[[[17,[10]]],7],[15,7],[[[17,[10]]],7],[[15,10]],[[15,10],11],[15],[[]],[[]],[15,7],[17,11],[[],15],[[],17],[15,11],[15,7],[[]],[[],11],[[],11],[15,11],[[],11],[[],11],[[],13],[[],13],[15],[[],15],0,0,[[]],[[]],[[]],[[]],[[[21,[14]]],[[21,[14]]]],[[[21,[14]],[21,[14]]]],[[]],[[],21],[[],[[22,[16]]]],[[[22,[10]]]],[[[22,[10]]]],[[[21,[18]],[21,[18]]],9],[[[21,[19]],5],6],[[[22,[19]],5],6],[[[22,[10]]]],[[[22,[10]]]],[20],[[]],[[],21],[[]],[21,7],[[[22,[10]]],7],[21,7],[[[22,[10]]],7],[[21,10]],[[21,10],11],[[]],[[]],[21,7],[22,11],[[],21],[[],22],[21,11],[21,7],[[]],[[],11],[[],11],[21,11],[[],11],[[],11],[[],13],[[],13],[[],21]],"c":[],"p":[[3,"OnceRef"],[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[8,"FnOnce"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"PartialEq"],[8,"Debug"],[15,"never"],[3,"OnceCell"],[3,"Lazy"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_character","byte_string","c_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","provide","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[231,"proc_macro2::extra"],[246,"proc_macro2::token_stream"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>∅ ... ∅</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte character literal.","Byte string literal.","C string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,22,7,6,8,9,10,1,11,12,4,22,7,6,8,9,10,1,11,12,4,4,4,4,6,4,7,6,8,9,10,1,11,12,4,7,6,8,9,10,1,11,12,4,12,7,9,9,10,11,12,12,7,7,0,4,4,4,4,22,22,7,7,6,8,8,9,9,10,1,1,11,12,12,4,4,22,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,4,7,7,7,4,12,4,4,4,4,4,4,4,4,4,4,22,7,6,8,9,10,1,11,12,4,7,7,4,4,6,6,6,7,9,1,12,12,12,22,6,8,9,1,12,4,6,1,22,8,9,1,12,4,9,9,9,4,4,7,6,8,9,10,1,11,12,4,22,7,8,9,1,12,4,0,22,7,6,8,9,10,1,11,12,4,22,7,6,8,9,10,1,11,12,4,22,7,6,8,9,10,1,11,12,4,4,4,4,4,4,4,4,4,4,4,6,4,4,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,4],[[],4],[5,4],[[],6],[2,4],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],13],[[],7],[9,14],[9,10],[[10,10],15],[[11,11],15],[[12,12],15],[[12,[0,[16,[18,[17]]]]],15],[[7,19]],[[7,19]],0,[20,4],[20,4],[21,4],[21,4],[[22,23],24],[[22,23],24],[[7,23],24],[[7,23],24],[[6,23],24],[[8,23],24],[[8,23],24],[[9,23],24],[[9,23],24],[[10,23],24],[[1,23],24],[[1,23],24],[[11,23],24],[[12,23],24],[[12,23],24],[[4,23],24],[[4,23],24],[[]],[25,7],[[]],[8,7],[[]],[26,6],[1,8],[[]],[4,8],[9,8],[12,8],[[]],[[]],[[]],[[]],[[]],[[]],[19,7],[19,7],[17,[[27,[7,22]]]],[17,[[27,[4,22]]]],[[12,28]],[29,4],[29,4],[30,4],[30,4],[31,4],[31,4],[32,4],[32,4],[33,4],[33,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,34],[7,15],[35,4],[35,4],[[6,6],[[36,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[17,6],12],[[17,6],12],[[12,12],[[36,[13]]]],[37],[[6,6],6],[[8,6]],[[9,6]],[[1,6]],[[12,6]],[[4,6]],[6,[[36,[38]]]],[1,11],[22,6],[8,6],[9,6],[1,6],[12,6],[4,6],[9,6],[9,6],[9,7],[17,4],[[4,[40,[39]]],[[36,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[42,4],[42,4],[43,4],[43,4],[44,4],[44,4],[45,4],[45,4],[3,4],[3,4],[6,26],[39,4],[39,4],0,[[]],[[]],[14,14],[[]],[14,6],[[14,23],24],[[]],[[]],[14,6],[14,6],[[]],[[],27],[[],27],[[],41],0,0,[[]],[[]],[34,34],[[]],[[34,23],24],[[]],[[]],[[]],[34,[[36,[8]]]],[34],[[]],[[],27],[[],27],[[],41]],"c":[],"p":[[3,"Punct"],[15,"char"],[15,"u8"],[3,"Literal"],[3,"CStr"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[3,"DelimSpan"],[15,"bool"],[8,"Sized"],[15,"str"],[8,"AsRef"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Result"],[8,"Hasher"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[3,"String"],[15,"usize"],[8,"RangeBounds"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]]},\
"quick_js":{"doc":"quick-js is a a Rust wrapper for QuickJS, a new Javascript …","t":"DNNIDDNENNNENNNNNNENNNNNNNNELKLLLLLLLLLLLLLLLLLKLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLINNNENNNLLLLLLLLLKLLLLL","n":["Arguments","Array","Bool","Callback","Context","ContextBuilder","ContextCreationFailed","ContextError","Conversion","Exception","Execution","ExecutionError","Float","InputWithZeroBytes","Int","Internal","Internal","InvalidString","JsValue","Null","Object","OutOfMemory","RuntimeCreationFailed","String","StringWithZeroBytes","Undefined","UnexpectedType","ValueError","add_callback","argument_count","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","call","call_function","clone","clone_into","console","console","eq","eq","eq","eval","eval_as","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_string","into_vec","memory_limit","new","provide","provide","provide","reset","set_global","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ConsoleBackend","Debug","Error","Info","Level","Log","Trace","Warn","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","log","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"quick_js"],[128,"quick_js::console"]],"d":["A wrapper around Vec, used for vararg callbacks.","","","The Callback trait is implemented for functions/closures …","Context is a wrapper around a QuickJS Javascript context. …","A builder for Context.","Context could not be created.","Error on context creation.","Value conversion failed. (either input arguments or result …","JS Exception was thrown.","Execution error while building.","Error on Javascript execution.","","Code to be executed contained zero-bytes.","","Internal error.","Internal error.","Invalid non-utf8 string.","A value that can be (de)serialized to/from the quickjs …","","","JS Runtime exceeded the memory limit.","Runtime could not be created.","","Encountered string with \\\\0 bytes.","","Received an unexpected type that could not be converted.","Error during value conversion.","Add a global JS function that is backed by a Rust function …","The number of JS arguments required.","Cast value to a str.","","","","","","","","","","","","","","","Finalize the builder and build a JS Context.","Create a <code>ContextBuilder</code> that allows customization of JS …","Execute the callback.","Call a global function in the Javascript namespace.","","","Javascript console integration. See the ConsoleBackend …","Set a console handler that will proxy …","","","","Evaluates Javascript code and returns the value of the …","Evaluates Javascript code and returns the value of the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert to <code>String</code>.","Unpack the arguments into a Vec.","Sets the memory limit of the Javascript runtime (in bytes).","Create a new Javascript context with default settings.","","","","Reset the Javascript engine.","Set a global variable.","","","","","","","","","","","","","","","","","","","","","","","","","","A console backend that handles console messages sent from …","","","","Log level of a log message sent via the console. These …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Handle a log message.","","","","",""],"i":[0,7,7,0,0,0,10,0,4,4,10,0,7,4,7,13,4,13,0,7,7,4,10,7,13,7,13,0,1,3,7,30,9,1,7,13,4,10,30,9,1,7,13,4,10,9,1,3,1,7,7,0,9,7,13,4,1,1,7,13,13,4,4,10,10,30,9,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,13,4,4,10,30,9,1,7,13,4,10,7,30,9,1,13,4,10,1,1,7,13,4,10,30,9,1,7,13,4,10,30,9,1,7,13,4,10,30,9,1,7,13,4,10,0,33,33,33,0,33,33,33,33,33,33,33,33,33,33,33,33,15,33,33,33,33,33],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3],[[5,[4]]]],[[],6],[7,[[8,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,[[5,[1,10]]]],[[],9],[[[11,[7]]],[[5,[[5,[7,12]],13]]]],[[1,2,14],[[5,[7,4]]]],[7,7],[[]],0,[[9,15],9],[[7,7],16],[[13,13],16],[[4,4],16],[[1,2],[[5,[7,4]]]],[[1,2],[[5,[[17,[7]],4]]]],[[7,18],19],[[13,18],19],[[13,18],19],[[4,18],19],[[4,18],19],[[10,18],19],[[10,18],19],[[]],[[]],[[]],[20,7],[21,7],[[]],[22,7],[16,7],[23,7],[[[11,[[24,[7]]]]],7],[25,7],[2,7],[[[8,[[24,[7]]]]],7],[12,7],[26,7],[27,7],[[[28,[[24,[12]],[24,[7]]]]],7],[[]],[29,13],[[]],[13,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[8,[12]]]],[30,[[11,[7]]]],[[9,6],9],[[],[[5,[1,10]]]],[31],[31],[31],[1,[[5,[1,10]]]],[[1,2,[24,[7]]],[[5,[4]]]],[[]],[[],12],[[],12],[[],12],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,[[]],[[]],[33,33],[[]],[[33,33],16],[[33,18],19],[[33,18],19],[[]],[[]],[[33,[11,[7]]]],[[]],[[],12],[[],5],[[],5],[[],32]],"c":[],"p":[[3,"Context"],[15,"str"],[8,"Callback"],[4,"ExecutionError"],[4,"Result"],[15,"usize"],[4,"JsValue"],[4,"Option"],[3,"ContextBuilder"],[4,"ContextError"],[3,"Vec"],[3,"String"],[4,"ValueError"],[8,"IntoIterator"],[8,"ConsoleBackend"],[15,"bool"],[8,"TryFrom"],[3,"Formatter"],[6,"Result"],[15,"u32"],[15,"i8"],[15,"u8"],[15,"i32"],[8,"Into"],[15,"f64"],[15,"u16"],[15,"i16"],[3,"HashMap"],[4,"Infallible"],[3,"Arguments"],[3,"Demand"],[3,"TypeId"],[4,"Level"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,11,11,11,11,12,0,4,4,0,0,12,12,4,4,4],"f":[0,0,0,[[[2,[1]]]],[3],[[3,4]],[[3,4]],[5,6],0,[7,8],[7,8],0,0,[[],[[10,[9]]]],[[],[[10,[9]]]],[[],8],[[],8],[8]],"c":[],"p":[[4,"TokenTree"],[8,"Into"],[8,"IntoIterator"],[8,"ToTokens"],[3,"Formatter"],[6,"Result"],[8,"Sized"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"]]},\
"strsim":{"doc":"This library implements string similarity metrics.","t":"NGELLFLLLLFFFFFFLFFFFFFLFLLLL","n":["DifferentLengthArgs","HammingResult","StrSimError","borrow","borrow_mut","damerau_levenshtein","eq","fmt","fmt","from","generic_damerau_levenshtein","generic_hamming","generic_jaro","generic_jaro_winkler","generic_levenshtein","hamming","into","jaro","jaro_winkler","levenshtein","normalized_damerau_levenshtein","normalized_levenshtein","osa_distance","provide","sorensen_dice","to_string","try_from","try_into","type_id"],"q":[[0,"strsim"]],"d":["","","","","","Like optimal string alignment, but substrings can be …","","","","Returns the argument unchanged.","Like optimal string alignment, but substrings can be …","Calculates the number of positions in the two sequences …","Calculates the Jaro similarity between two sequences. The …","Like Jaro but gives a boost to sequences that have a …","Calculates the minimum number of insertions, deletions, …","Calculates the number of positions in the two strings …","Calls <code>U::from(self)</code>.","Calculates the Jaro similarity between two strings. The …","Like Jaro but gives a boost to strings that have a common …","Calculates the minimum number of insertions, deletions, …","Calculates a normalized score of the Damerau–Levenshtein …","Calculates a normalized score of the Levenshtein algorithm …","Like Levenshtein but allows for adjacent transpositions. …","","Calculates a Sørensen-Dice similarity distance using …","","","",""],"i":[3,0,0,3,3,0,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0,3,3,3,3],"f":[0,0,0,[[]],[[]],[[1,1],2],[[3,3],4],[[3,5],[[7,[6]]]],[[3,5],8],[[]],[[],2],[[9,9],10],[[],11],[[],11],[[],2],[[1,1],10],[[]],[[1,1],11],[[1,1],11],[[1,1],2],[[1,1],11],[[1,1],11],[[1,1],2],[12],[[1,1],11],[[],13],[[],7],[[],7],[[],14]],"c":[],"p":[[15,"str"],[15,"usize"],[4,"StrSimError"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[8,"IntoIterator"],[6,"HammingResult"],[15,"f64"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDDNNNNNEDGNNDENDNNNNNNNDNNDNNNNNNNNNNNNNNNNNNDDNNNNEDDDNNDNNNNNNDENDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNDNDDEDDDNNNENEDDDDNNEEEDNNNNNNCDNNNDEDDDDNDNNNNNENDDDDDDDDDDDDDDDDDNNDNNNNDNENNNDDDDDDDDNNNDNNNNNNNNENNEENDDNNNDNNNNNNNNNENNNNNNNNNNNDEDDDDDDDDDDDDDDDDNNNNNEDDDDNNDNNENDNNNNNNNNNNGNENNNNNDNNNNENENNNNNNONNNDEEDDDDNNNNNNNDENNNNNNNNNNNDDDDDDDDDEDDDDDDDNENNNNNNNNDDDDDEDDNNNNNNNNDDDEDENNNMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMOMMMMMMMOMAMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMMMMMMMMOOMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMMMMMMMMMMMMLMMMMMLMMMLMMMMLMMMMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLFLOLLLLOOFLLLLLLMMMMMMMMMLMMMMMMMMMMMMMMMMMAMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMMMMMMMLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLMMMMMMLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDDDQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","eq","error","error","error","extend","fmt","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","hash","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","provide","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","eq","extend","extend","first","first_mut","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[4257,"syn::buffer"],[4291,"syn::ext"],[4295,"syn::parse"],[4392,"syn::parse::discouraged"],[4394,"syn::punctuated"],[4556,"syn::spanned"],[4558,"syn::token"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0...10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>::&lt;&gt;</code> explicit type parameters passed to a method call: …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with a","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A reference pattern: <code>&amp;mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</codealue of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the varianteturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Generics required to complete the definition.","If this path consists of a single ident, returns the identame of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementsype of the fieldeturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,143,143,143,186,0,0,26,148,26,26,26,0,0,0,26,148,0,0,26,0,187,143,143,143,143,143,143,0,26,130,0,26,167,137,137,26,130,130,26,26,130,73,26,69,75,88,116,121,187,0,0,187,26,349,22,0,0,0,0,166,144,0,143,143,88,139,84,143,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,26,0,0,0,0,0,0,130,88,111,0,26,0,0,0,0,0,88,143,0,0,0,0,105,26,105,148,143,73,0,0,167,26,88,0,0,0,0,0,0,148,0,26,148,22,12,130,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,26,0,75,80,84,187,0,13,0,16,26,167,0,0,0,0,0,0,0,0,146,26,143,0,26,88,111,116,121,148,167,88,0,26,82,0,0,16,0,0,116,121,26,0,88,143,143,105,13,18,66,143,144,0,148,82,186,144,143,167,12,26,137,148,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,26,105,148,167,0,0,0,0,0,148,22,0,26,167,0,349,0,127,26,148,167,143,143,105,26,167,22,0,26,0,146,143,143,143,143,0,148,167,88,111,0,130,0,26,88,139,167,143,143,0,80,88,88,0,0,0,0,0,0,0,148,26,26,26,148,167,167,0,0,26,69,75,84,88,111,116,121,166,167,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,26,88,139,18,18,66,26,88,0,0,0,0,0,0,0,0,26,88,111,116,121,130,148,167,0,0,0,0,0,0,26,167,26,93,126,150,54,159,175,10,36,50,68,188,185,49,37,108,192,1,30,38,126,17,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,72,76,77,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,112,113,114,115,117,118,119,120,122,123,124,125,128,129,138,147,164,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,100,31,136,155,31,40,3,5,3,5,30,33,59,63,92,123,38,41,47,64,72,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,349,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,349,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,85,76,77,85,86,101,119,152,161,190,34,168,19,49,57,90,93,94,100,110,141,145,178,0,11,27,44,55,149,160,177,0,35,0,169,30,38,172,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,9,10,68,106,188,21,61,70,71,76,77,78,85,86,89,98,100,113,117,119,122,181,183,190,72,43,64,74,74,78,89,117,122,158,126,97,39,24,91,0,0,138,74,79,186,76,78,117,118,119,94,122,123,124,136,17,57,176,178,31,40,50,165,161,149,151,156,158,159,160,27,60,162,177,179,43,90,141,8,1,2,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,15,28,45,76,78,87,89,98,101,102,122,124,189,34,35,37,41,42,44,45,49,51,54,55,56,58,61,62,65,70,89,98,122,170,0,91,163,72,17,57,99,103,140,142,178,8,1,2,9,9,9,10,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,66,67,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,3,5,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,126,150,41,79,8,1,2,9,9,9,9,9,9,9,10,11,12,13,13,13,13,14,15,16,16,16,17,18,18,18,19,20,21,22,22,22,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,66,66,66,67,67,68,69,70,71,72,73,74,75,75,75,75,76,76,77,78,79,80,80,80,81,82,83,84,84,84,84,85,86,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,105,105,105,105,105,106,107,108,109,110,111,111,111,111,111,112,113,114,115,116,116,116,116,116,117,118,119,120,121,121,121,121,121,122,123,124,125,126,127,127,127,128,129,130,130,130,130,130,130,130,130,131,132,133,134,3,3,5,5,135,349,136,137,138,138,138,138,139,139,139,139,140,141,142,143,144,145,146,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,184,185,185,186,187,188,189,190,191,192,53,36,90,94,99,100,101,102,103,119,124,126,138,184,42,151,68,74,79,188,192,72,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,174,10,17,21,76,78,89,90,91,95,96,97,98,99,100,101,102,103,106,107,108,113,114,117,119,122,124,126,138,169,185,189,190,43,94,152,25,41,44,67,147,38,126,150,191,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,349,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,18,18,18,18,186,184,186,93,94,100,110,129,18,18,33,35,39,41,47,64,104,184,172,28,29,32,18,55,149,45,147,87,128,77,86,159,74,79,81,85,150,74,53,174,15,46,174,47,68,74,79,188,192,48,95,115,120,125,154,171,96,74,49,40,70,183,50,97,81,38,54,98,113,128,158,159,169,175,71,163,164,19,14,9,10,77,130,131,132,133,134,3,5,135,9,29,32,62,38,38,38,126,150,191,74,14,20,25,36,50,51,60,81,126,150,156,162,179,191,0,0,0,9,10,13,14,15,16,17,19,20,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,131,132,133,134,3,5,135,136,138,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,166,167,184,185,187,188,189,190,191,0,9,11,11,136,136,0,11,0,11,184,21,11,0,0,0,21,131,145,26,9,10,41,45,72,147,168,175,180,181,183,13,11,14,15,25,52,57,81,136,157,173,178,180,192,11,83,23,25,0,52,157,173,58,54,126,50,128,91,108,57,56,87,28,29,32,96,184,128,94,97,55,89,91,95,98,99,101,102,104,112,113,114,115,117,118,119,120,122,124,125,140,147,149,9,10,130,131,132,133,134,3,5,135,129,92,112,118,123,8,1,2,9,9,9,10,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,66,67,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,131,132,132,133,133,134,134,3,3,5,5,135,135,136,138,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,67,135,0,74,109,158,98,113,145,99,140,11,169,130,131,132,133,134,3,5,100,43,53,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,9,10,3,5,8,1,2,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,138,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,0,131,132,133,134,3,5,135,11,136,94,100,101,104,106,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,349,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,349,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,59,50,21,37,61,78,89,98,102,113,117,122,124,164,181,189,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,349,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,74,74,102,114,119,124,153,182,103,142,20,9,63,94,100,126,150,104,131,132,133,134,135,135,126,150,90,141,21,89,90,91,92,96,97,98,99,100,101,102,103,104,112,113,114,122,123,124,138,74,83,64,148,152,161,166,65,0,0,225,225,226,225,226,226,226,226,226,226,225,226,226,226,225,226,226,226,225,225,226,226,226,226,226,226,225,226,225,226,225,226,0,350,350,350,0,0,0,221,0,0,0,0,0,0,0,228,232,228,229,231,230,232,228,229,231,230,228,229,230,229,230,230,228,229,0,228,231,232,228,229,230,228,228,231,230,230,228,232,228,229,231,230,230,231,232,228,229,231,230,230,230,230,228,228,230,230,218,228,221,231,221,221,228,232,228,228,228,230,228,230,228,230,229,230,228,230,232,228,229,231,230,232,228,229,231,230,232,228,229,231,230,0,351,245,0,0,0,0,0,0,0,0,245,237,242,250,243,244,212,213,245,237,242,250,243,244,212,213,245,237,237,242,243,244,212,245,237,242,243,244,212,245,237,237,237,237,237,237,237,237,237,242,250,243,244,212,213,245,237,237,237,237,237,237,237,242,250,243,244,212,213,245,237,237,237,242,250,243,244,212,213,237,245,245,237,237,237,237,237,237,242,250,243,244,212,213,237,245,242,250,243,244,212,213,242,250,243,244,212,213,237,237,237,237,237,237,237,245,245,237,237,237,242,250,243,244,212,213,237,245,237,242,243,244,212,245,237,245,237,237,242,250,243,244,212,213,245,237,242,250,243,244,212,213,245,237,242,250,243,244,212,213,245,245,245,0,352,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,299,301,304,305,306,308,310,311,313,314,318,321,323,326,329,330,333,336,341,342,344,205,299,301,304,305,306,308,310,311,313,314,318,321,323,326,329,330,333,336,341,342,344,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,345,346,347,348,205,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,205,252,253,254,255,256,257,258,259,260,261,206,262,263,264,265,266,203,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,201,202,285,286,204,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348],"fc":[],"p":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[8,"FromStr"],[6,"Result"],[3,"ImplGenerics"],[3,"Ident"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[4,"Visibility"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[4,"Member"],[3,"Index"],[3,"MethodTurbofish"],[4,"GenericMethodArgument"],[3,"FieldValue"],[3,"Label"],[3,"Arm"],[4,"RangeLimits"],[3,"Generics"],[4,"GenericParam"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[4,"UseTree"],[3,"UsePath"],[3,"UseName"],[3,"UseRename"],[3,"UseGlob"],[3,"UseGroup"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Signature"],[4,"FnArg"],[3,"Receiver"],[3,"File"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[4,"Stmt"],[3,"Local"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"Variadic"],[4,"ReturnType"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Ordering"],[15,"bool"],[8,"AsRef"],[8,"Sized"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"SelfType"],[3,"SelfValue"],[3,"Extern"],[3,"Super"],[3,"Underscore"],[3,"Crate"],[15,"usize"],[3,"Literal"],[8,"Into"],[4,"Option"],[8,"Hasher"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Nothing"],[3,"Lookahead1"],[8,"Display"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Punctuated"],[8,"Peek"],[3,"Demand"],[8,"FnOnce"],[8,"Clone"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[8,"PartialEq"],[8,"Default"],[8,"Debug"],[8,"Hash"],[3,"PairsMut"],[8,"Token"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[4,"StrStyle"],[8,"IdentExt"],[8,"Speculative"],[8,"Spanned"]]},\
"thiserror":{"doc":"github crates-io docs-rs","t":"Y","n":["Error"],"q":[[0,"thiserror"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"thiserror_impl":{"doc":"","t":"Y","n":["Error"],"q":[[0,"thiserror_impl"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
